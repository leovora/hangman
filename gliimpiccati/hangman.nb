(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Wolfram 14.2' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       154,          7]
NotebookDataLength[    223635,       4079]
NotebookOptionsPosition[    172875,       3148]
NotebookOutlinePosition[    219162,       4001]
CellTagsIndexPosition[    219119,       3998]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["Hangman game", "Title",
 CellChangeTimes->{{3.9527493056512184`*^9, 
  3.9527493193203354`*^9}},ExpressionUUID->"c0d10265-0122-ef49-b205-\
3504c01f7f53"],

Cell["\<\
Gruppo Numero : gliimpiccati
MC 2024 / 2025\
\>", "Subtitle",
 CellFrame->{{0, 0}, {0, 0}},
 CellChangeTimes->{{3.952749338150717*^9, 3.952749377757843*^9}, {
  3.9527495938257313`*^9, 
  3.9527496076012287`*^9}},ExpressionUUID->"2af73279-7200-9f49-bb81-\
b0d9e79e303c"],

Cell["\<\
FOTO 1 , FOTO 2 , FOTO 3 , FOTO 4 , FOTO 5 (vuole le nostre foto)\
\>", "Text",
 CellFrame->{{0, 0}, {0, 0}},
 CellChangeTimes->{{3.9527496105600567`*^9, 3.952749621828211*^9}, {
  3.9527496648662376`*^9, 3.9527496757689095`*^9}, {3.952749717335041*^9, 
  3.9527497317129173`*^9}},ExpressionUUID->"5fa28044-5d8f-f944-b66c-\
3081990c14b9"],

Cell["\<\
Claudio Leo, Alexandru Nicolescu, Carlotta Nunziati, Leonardo Vorabbi\
\>", "Text",
 CellFrame->{{0, 0}, {0, 0}},
 CellChangeTimes->{
  3.9527497284486465`*^9, {3.9530040218180447`*^9, 
   3.953004088414503*^9}},ExpressionUUID->"377b9d67-0394-0141-9385-\
837b73eeec74"],

Cell["\<\
(anno 1/2, curriculum A/B/C) (anno 1/2, curr . A/B/C) (anno 1/2, curr . \
A/B/C) (anno 1/2, curr . A/B/C) (anno 1/2, curr .
A/B/C) \
\>", "Text",
 CellFrame->{{0, 0}, {0, 0}},
 CellChangeTimes->{
  3.952749719653925*^9, {3.952950566622942*^9, 3.952950567307434*^9}, {
   3.9529511998054295`*^9, 
   3.9529512009655113`*^9}},ExpressionUUID->"da94ac42-1c37-8e4f-a35d-\
cfab77b35df7"],

Cell[CellGroupData[{

Cell["Indice", "Section",
 CellChangeTimes->{{3.9529513634491577`*^9, 
  3.9529513894718494`*^9}},ExpressionUUID->"61ab9a5d-fe27-8d49-96df-\
04e596fce78c"],

Cell["cercare come generare una TOC", "Text",
 CellChangeTimes->{{3.9529513634491577`*^9, 
  3.9529513894718494`*^9}},ExpressionUUID->"935f0f68-a392-ab45-8fcf-\
45c8654d8de8"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Introduzione", "Title",
 CellChangeTimes->{{3.952951303895029*^9, 3.952951340111513*^9}, 
   3.952951427013727*^9},ExpressionUUID->"4be9a7d2-9fc1-f545-90af-\
62802ce52b08"],

Cell["\<\
Il gioco dell\[CloseCurlyQuote]impiccato, noto anche come Hangman, \[EGrave] \
un classico passatempo linguistico che sfida i giocatori a indovinare una \
parola nascosta, una lettera alla volta, entro un numero limitato di \
tentativi. Pur nella sua semplicit\[AGrave], questo gioco offre interessanti \
spunti sia dal punto di vista linguistico che logico, ed \[EGrave] spesso \
utilizzato anche in contesti educativi per stimolare la memoria, l\
\[CloseCurlyQuote]ampliamento del vocabolario e il ragionamento deduttivo. La \
realizzazione di questo gioco nasce con l\[CloseCurlyQuote]obiettivo di \
creare un\[CloseCurlyQuote]applicazione interattiva capace di unire \
divertimento e apprendimento: nei contesti educativi pu\[OGrave] stimolare la \
memoria e il lessico dei bambini ma anche sviluppare le loro abilit\[AGrave] \
logiche e cognitive (il giocatore deve infatti ragionare su quali lettere \
abbiano pi\[UGrave] probabilit\[AGrave] di apparire nella parola).

Il lavoro presentato si propone di sviluppare una versione digitale e \
potenziata del gioco, mantenendo la struttura di base ma introducendo diverse \
funzionalit\[AGrave] avanzate che ne arricchiscono \
l\[CloseCurlyQuote]esperienza e ne aumentano il valore educativo. L\
\[CloseCurlyQuote]obiettivo \[EGrave] creare un\[CloseCurlyQuote]applicazione \
interattiva, accessibile e coinvolgente, adatta sia al gioco individuale che \
all\[CloseCurlyQuote]apprendimento guidato.

In particolare, sono state implementate funzionalit\[AGrave] innovative come \
la selezione automatica delle parole da un dizionario interno, la scelta del \
livello di difficolt\[AGrave], un sistema di punteggio dinamico e strumenti \
di assistenza per il giocatore. Queste modifiche mirano a rendere il gioco pi\
\[UGrave] flessibile, inclusivo e adatto a un pubblico variegato.\
\>", "Text",
 CellChangeTimes->{{3.953788174453327*^9, 3.9537881752210026`*^9}, {
  3.953791691416809*^9, 3.9537916942322407`*^9}, {3.953791734984436*^9, 
  3.9537917356467323`*^9}, {3.9537917684786777`*^9, 3.9537917701847496`*^9}, {
  3.953791802369644*^9, 
  3.9537918032980423`*^9}},ExpressionUUID->"0a13f48f-4b7d-e040-97b9-\
6d810546a458"],

Cell[CellGroupData[{

Cell["I. Hangman", "Section",
 CellChangeTimes->{{3.953788076369793*^9, 
  3.9537880961328297`*^9}},ExpressionUUID->"64199269-405f-7d42-9f26-\
0cec28fb2eef"],

Cell[CellGroupData[{

Cell["I.1 Struttura del gioco", "Subsection",
 CellChangeTimes->{{3.9537881134632626`*^9, 
  3.9537881225617657`*^9}},ExpressionUUID->"b23819c7-b61d-a64c-bdb9-\
5183691a0432"],

Cell["\<\
Il gioco dell\[CloseCurlyQuote]impiccato (Hangman) \[EGrave] un classico \
gioco asimmetrico per due giocatori. Uno dei due, chiamato setter (colui che \
imposta il gioco), sceglie una parola segreta w che l\[CloseCurlyQuote]altro \
giocatore, detto guesser (colui che indovina), deve cercare di indovinare.
All\[CloseCurlyQuote]inizio della partita, entrambi i giocatori concordano un \
numero massimo di tentativi falliti, indicato con d. Inoltre, il setter \
comunica al guesser la lunghezza della parola segreta, ovvero un numero \
intero k.
Ad ogni turno, il guesser prova a indovinare una singola lettera s. Il setter \
allora rivela tutte le posizioni in cui quella lettera s appare nella parola \
w, se ce ne sono. Se la lettera s non appare mai nella parola, si dice che il \
tentativo \[EGrave] fallito.

Il gioco pu\[OGrave] terminare in due modi:
- Il guesser vince se riesce a rivelare l\[CloseCurlyQuote]intera parola w.
- Il setter vince se il guesser supera il limite massimo d di tentativi \
falliti.
\
\>", "Text",
 CellChangeTimes->{
  3.952951607914589*^9, {3.953009166725668*^9, 
   3.9530091816463223`*^9}},ExpressionUUID->"49bc2f04-ebee-1a41-b72f-\
d5d90c3c3bcc"]
}, Open  ]],

Cell[CellGroupData[{

Cell["I.2 La nostra versione", "Subsection",
 CellChangeTimes->{{3.9530092361977005`*^9, 3.9530092964097843`*^9}, {
  3.953788129658739*^9, 
  3.9537881340211773`*^9}},ExpressionUUID->"e1eec17d-b810-b441-8ded-\
980b484e5ff3"],

Cell["", "Text",
 CellChangeTimes->{
  3.953009255188492*^9, {3.953009289027931*^9, 3.9530093008734093`*^9}, {
   3.9530102780188694`*^9, 3.953010278389927*^9}, {3.953788136188957*^9, 
   3.953788136874216*^9}},ExpressionUUID->"c3f36166-ec64-cb40-868f-\
0184b42cc7fb"],

Cell["\<\
La versione del gioco che abbiamo implementato introduce alcune modifiche \
rispetto alla versione classica:
- Nessun setter umano: la parola segreta w non viene scelta da un giocatore, \
ma \[EGrave] estratta automaticamente da un vocabolario, in base al livello \
di difficolt\[AGrave] selezionato.
- Scelta del livello: all\[CloseCurlyQuote]inizio della partita, l\
\[CloseCurlyQuote]utente pu\[OGrave] scegliere il livello di difficolt\
\[AGrave], che influisce sulla complessit\[AGrave] delle parole proposte e \
sul numero di tentativi a disposizione. (LIVELLO FACILE: parola da 1 a 5 \
caratteri, numero di tentativi consentiti pari a 6, LIVELLO MEDIO: parola da \
6 a 8 caratteri, numero di tentativi consentiti pari a 6, LIVELLO DIFFICILE: \
parola da 9 a 12 caratteri, numero di tentativi consentiti pari a 6)
- Sistema di punti: al guesser vengono assegnati o sottratti punti in base al \
comportamento e ai risultati. Il punteggio viene calcolato come segue: quando \
viene indovinata una lettera: +10*modalit\[AGrave], \[NoBreak]quando viene \
chiesto un suggerimento: -5*modalit\[AGrave] dove modalit\[AGrave] \[EGrave] \
1 (facile), 2 (medio), 3 (difficile).
- Funzionalit\[AGrave] avanzate di assistenza: il guesser ha la possibilit\
\[AGrave] di richiedere la pulizia della parola (per rimuovere i caratteri \
inseriti), ricevere suggerimenti (a fronte di una penalit\[AGrave] in punti) \
oppure visualizzare direttamente la soluzione corretta della parola. 
\
\>", "Text",
 CellChangeTimes->{{3.9530092876732864`*^9, 3.953009368013008*^9}, {
   3.95300945450502*^9, 3.953009483966524*^9}, {3.953010046584263*^9, 
   3.953010047826067*^9}, 3.9530101850484467`*^9, 3.9530102805519676`*^9, {
   3.953788033813444*^9, 3.9537880402791195`*^9}, {3.9537881931069736`*^9, 
   3.9537882772356644`*^9}, {3.9537883164038315`*^9, 3.953788357231451*^9}, {
   3.953788390133322*^9, 3.953788390544256*^9}, {3.953791728842039*^9, 
   3.9537917297404175`*^9}, {3.953881272556818*^9, 3.953881279767956*^9}, {
   3.9538813559805107`*^9, 3.953881405036644*^9}, {3.95388143612397*^9, 
   3.9538814727068253`*^9}, {3.9538893722918224`*^9, 
   3.9538894646574326`*^9}, {3.953889512542488*^9, 3.9538895139729843`*^9}, {
   3.9538897445341816`*^9, 
   3.9538897550023193`*^9}},ExpressionUUID->"765ba2fc-2b1a-d342-9b3a-\
6162fc08e7f6"]
}, Open  ]],

Cell[CellGroupData[{

Cell["I.3 Formalizzazione ed esempi", "Subsection",
 CellChangeTimes->{{3.9530097442575016`*^9, 3.9530097455346203`*^9}, {
  3.953788145180237*^9, 
  3.9537881518260345`*^9}},ExpressionUUID->"db5720e7-0bc5-b94b-9f0e-\
bb417c275c40"],

Cell["\<\
Il gioco inizia con una lunghezza della parola, k, e un parametro d che \
indica il numero di tentativi falliti consentiti, concordati tra i giocatori. \
Una partita di Hangman si gioca su un alfabeto \[CapitalSigma], inizialmente \
impostato come [1..\[Sigma]], e un linguaggio (potenzialmente infinito) L, \
proiettato su parole di lunghezza k sull\[CloseCurlyQuote]alfabeto rimanente, \
mediante l\[CloseCurlyQuote]intersezione con \[CapitalSigma]\:1d4f. L\
\[CloseCurlyQuote]alfabeto verr\[AGrave] progressivamente ridotto durante il \
gioco, per rappresentare il fatto che i simboli gi\[AGrave] indovinati non \
possono pi\[UGrave] far parte del gioco.

Utilizzeremo un simbolo aggiuntivo, non presente in \[CapitalSigma], che \
denota una lettera non ancora rivelata. I giocatori usano spesso un \
underscore (_) per questo scopo, ma noi useremo il simbolo \[UpTee] per una \
migliore leggibilit\[AGrave].

Poich\[EAcute] il gioco procede a turni, possiamo definire lo stato del gioco \
in termini delle lettere gi\[AGrave] escluse e delle azioni intraprese al \
turno i (i turni sono indicizzati a partire da 1). Il gioco inizia con il \
setter che rivela M\:2080 = \[UpTee]\:1d4f, che rappresenta ci\[OGrave] che \
il guesser sa della parola in quel momento. Poi, al turno i, il guesser fa \
una proposta con il simbolo s\:1d62, e il setter risponde con la maschera M\
\:1d62, che \[EGrave] uguale a M\:1d62\:208b\:2081 eccetto, eventualmente, \
per alcune occorrenze del simbolo \[UpTee], che vengono sostituite da s\:1d62.

1. w = ciao
2. M0 = \[UpTee]\[UpTee]\[UpTee]\[UpTee]
3. s1 = e
4. M1 = \[UpTee]\[UpTee]\[UpTee]\[UpTee]
5. s2 = o
6. M2 = \[UpTee]\[UpTee]\[UpTee]o
7. s3 = a
8. M3 = \[UpTee]\[UpTee]ao
9. s4 = c
10. M4 = c\[UpTee]ao
11. s5 = i
12. M5 = ciao
HangMan tradizionale (guesser vince). Nota: s1 rappresenta un tentativo \
fallito. 
Esempio di partita di Impiccato (k = 4, d = 3) sull\[CloseCurlyQuote]alfabeto \
minuscolo latino e utilizzando l\[CloseCurlyQuote]iitaliano come lingua.
\
\>", "Text",
 CellChangeTimes->{{3.9530097777340374`*^9, 3.9530097844442425`*^9}, {
  3.9530098247024937`*^9, 3.95300997272151*^9}, {3.953010009872078*^9, 
  3.9530100162650204`*^9}, {3.9530100594968376`*^9, 3.9530100614302597`*^9}, {
  3.953010091447094*^9, 3.953010115210188*^9}, {3.953791543288374*^9, 
  3.9537915439666767`*^9}},ExpressionUUID->"1975e73d-73c4-414a-a809-\
7c7940ebbd84"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["II. Hangman: complessit\[AGrave]", "Section",
 CellChangeTimes->{{3.9537895202970695`*^9, 3.9537895504146175`*^9}, {
  3.9537915210290947`*^9, 3.9537915279147606`*^9}, {3.953791708201214*^9, 
  3.953791708690876*^9}},ExpressionUUID->"3ed7b48a-539b-0643-9640-\
fefdd8f0a2bb"],

Cell[CellGroupData[{

Cell["II.1 Complessit\[AGrave] computazionale", "Subsection",
 CellChangeTimes->{{3.9537895470033455`*^9, 3.9537895540661373`*^9}, {
  3.9537903094508247`*^9, 3.9537903187564697`*^9}, {3.953957885610262*^9, 
  3.9539578872643642`*^9}},ExpressionUUID->"4d7dcd69-139e-ba44-9711-\
e4217d0aa1ff"],

Cell[TextData[{
 "Hangman \[EGrave] un gioco asimmetrico a due giocatori, in cui il ",
 StyleBox["setter ",
  FontWeight->"Bold"],
 "sceglie segretamente una parola da un dizionario ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    TemplateBox[<|"boxes" -> FormBox[
        RowBox[{
          StyleBox["L", "TI"], "\[SubsetEqual]", 
          SuperscriptBox["\[CapitalSigma]", 
           StyleBox["k", "TI"]]}], TraditionalForm], "errors" -> {}, "input" -> 
      "L \\subseteq \\Sigma^k", "state" -> "Boxes"|>,
     "TeXAssistantTemplate"], "  "}], TraditionalForm]],ExpressionUUID->
  "05f2149b-bf66-a348-888c-1c2136b64709"],
 "(insieme di parole di lunghezza ",
 Cell[BoxData[
  FormBox[
   TemplateBox[<|"boxes" -> FormBox[
       StyleBox["k", "TI"], TraditionalForm], "errors" -> {}, "input" -> "k", 
     "state" -> "Boxes"|>,
    "TeXAssistantTemplate"], TraditionalForm]],ExpressionUUID->
  "d5ce1a3c-04be-4c47-891a-f6f887db1c97"],
 " su un alfabeto ",
 Cell[BoxData[
  FormBox[
   TemplateBox[<|
    "boxes" -> FormBox["\[CapitalSigma]", TraditionalForm], "errors" -> {}, 
     "input" -> "\\Sigma", "state" -> "Boxes"|>,
    "TeXAssistantTemplate"], TraditionalForm]],ExpressionUUID->
  "07d4e7ee-e6e5-3441-9072-a32702adfc19"],
 "), e il ",
 StyleBox["guesser",
  FontWeight->"Bold"],
 " cerca di indovinarla proponendo lettere, ricevendo in risposta la \
posizione delle lettere corrette o un errore se la lettere non \[EGrave] \
presente. Il guessere ha a disposizione un numero massimo di errori ",
 Cell[BoxData[
  FormBox[
   TemplateBox[<|"boxes" -> FormBox[
       StyleBox["d", "TI"], TraditionalForm], "errors" -> {}, "input" -> "d", 
     "state" -> "Boxes"|>,
    "TeXAssistantTemplate"], TraditionalForm]],ExpressionUUID->
  "37e28c04-d97e-4549-9565-d50cad82ea48"],
 " prima di perdere la partita.\n\nIl problema pu\[OGrave] essere risolto \
tramite una ricerca esaustiva di tutte le ",
 StyleBox["strategie di interrogazione",
  FontWeight->"Bold"],
 ", che pu\[OGrave] essere vista come un albero decisionale avente:\n- Ogni \
nodo che rappresenta lo ",
 StyleBox["stato corrente ",
  FontWeight->"Bold"],
 "del gioco (cio\[EGrave] la maschera e le lettere gi\[AGrave] \t\tgiocate)\n\
- Ogni ramo corrisponde alla prossima lettera da interrogarare,\n- Le foglie \
corrispondono a uno stato in cui la parola \[EGrave] completamente \
identificata o sono finiti i tentativi.\n\nIl numero di possibili maschere \
(con lettere o ",
 Cell[BoxData[
  FormBox[
   TemplateBox[<|
    "boxes" -> FormBox["\[Perpendicular]", TraditionalForm], "errors" -> {}, 
     "input" -> "\\perp", "state" -> "Boxes"|>,
    "TeXAssistantTemplate"], TraditionalForm]],ExpressionUUID->
  "b0cd922d-eb3b-c346-92fc-1b200c5b187a"],
 " in ciascuna posizione) \[EGrave] al massimo: ",
 Cell[BoxData[
  FormBox[
   TemplateBox[<|"boxes" -> FormBox[
       SuperscriptBox[
        RowBox[{"(", 
          RowBox[{"\[Sigma]", "+", "1"}], ")"}], 
        StyleBox["k", "TI"]], TraditionalForm], "errors" -> {}, "input" -> 
     "(\\sigma + 1)^k", "state" -> "Boxes"|>,
    "TeXAssistantTemplate"], TraditionalForm]],ExpressionUUID->
  "3ca128b5-9575-2545-a084-76ead4c2dc19"],
 " poich\[EGrave] ogni posizione pu\[OGrave] contenere una delle ",
 Cell[BoxData[
  FormBox[
   TemplateBox[<|
    "boxes" -> FormBox["\[Sigma]", TraditionalForm], "errors" -> {}, "input" -> 
     "\\sigma", "state" -> "Boxes"|>,
    "TeXAssistantTemplate"], TraditionalForm]],ExpressionUUID->
  "2fcef215-3518-dd42-86e0-9441a66354a8"],
 " lettere gi\[AGrave] rivelate, oppure il simbolo ",
 Cell[BoxData[
  FormBox[
   TemplateBox[<|
    "boxes" -> FormBox["\[Perpendicular]", TraditionalForm], "errors" -> {}, 
     "input" -> "\\perp", "state" -> "Boxes"|>,
    "TeXAssistantTemplate"], TraditionalForm]],ExpressionUUID->
  "9df259c6-3435-8342-804d-56147b3a38dd"],
 ".\n\nAd ogni maschera ci sono al massimo ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    TemplateBox[<|
     "boxes" -> FormBox["\[Sigma]", TraditionalForm], "errors" -> {}, "input" -> 
      "\\sigma", "state" -> "Boxes"|>,
     "TeXAssistantTemplate"], " "}], TraditionalForm]],ExpressionUUID->
  "442ad1c0-ef61-0c4a-b0ff-2072b4f46c0d"],
 " interrogazioni possibili (le lettere non ancora usate). Quindi: ",
 Cell[BoxData[
  FormBox[
   TemplateBox[<|"boxes" -> FormBox[
       RowBox[{"Numero totale di stati possibili", "\[LessEqual]", 
         SuperscriptBox[
          RowBox[{"(", 
            RowBox[{"\[Sigma]", "+", "1"}], ")"}], 
          StyleBox["k", "TI"]], "\[CenterDot]", 
         SuperscriptBox["2", "\[Sigma]"]}], TraditionalForm], "errors" -> {}, 
     "input" -> 
     "\\text{Numero totale di stati possibili} \\leq (\\sigma + 1)^k \\cdot \
2^\\sigma", "state" -> "Boxes"|>,
    "TeXAssistantTemplate"], TraditionalForm]],ExpressionUUID->
  "e691bb16-ff95-ed45-b74a-bc0d5d253631"],
 " (dove ",
 Cell[BoxData[
  FormBox[
   TemplateBox[<|"boxes" -> FormBox[
       SuperscriptBox["2", "\[Sigma]"], TraditionalForm], "errors" -> {}, 
     "input" -> "2^\\sigma", "state" -> "Boxes"|>,
    "TeXAssistantTemplate"], TraditionalForm]],ExpressionUUID->
  "1a44d602-0a9f-c14a-9b70-488d09eac369"],
 " rappresenta l\[CloseCurlyQuote]insieme di sottoinsiemi delle lettere gi\
\[AGrave] gioccate).\n\nPer ogni stato si pu\[OGrave] mantenere l\
\[CloseCurlyQuote]elenco delle parole consistenti (filtrando da ",
 Cell[BoxData[
  FormBox[
   TemplateBox[<|"boxes" -> FormBox[
       StyleBox["L", "TI"], TraditionalForm], "errors" -> {}, "input" -> "L", 
     "state" -> "Boxes"|>,
    "TeXAssistantTemplate"], TraditionalForm]],ExpressionUUID->
  "2892d670-ca6a-384d-803e-fce25c1f7a7a"],
 "), il che richiede ",
 Cell[BoxData[
  FormBox[
   TemplateBox[<|"boxes" -> FormBox[
       RowBox[{
         StyleBox["O", "TI"], "(", 
         RowBox[{
           StyleBox["n", "TI"], 
           StyleBox["k", "TI"]}], ")"}], TraditionalForm], "errors" -> {}, 
     "input" -> "O(nk)", "state" -> "Boxes"|>,
    "TeXAssistantTemplate"], TraditionalForm]],ExpressionUUID->
  "57978f81-0d3c-1b4b-801c-c24600835b5f"],
 " in tempo.\n\nQuindi, il costo totale \[EGrave]: ",
 Cell[BoxData[
  FormBox[
   TemplateBox[<|"boxes" -> FormBox[
       RowBox[{
         StyleBox["O", "TI"], "(", 
         RowBox[{
           SuperscriptBox[
            RowBox[{"(", 
              RowBox[{"\[Sigma]", "+", "1"}], ")"}], 
            StyleBox["k", "TI"]], "\[CenterDot]", 
           SuperscriptBox["2", "\[Sigma]"], "\[CenterDot]", 
           StyleBox["n", "TI"], "\[CenterDot]", 
           StyleBox["k", "TI"]}], ")"}], TraditionalForm], "errors" -> {}, 
     "input" -> "O((\\sigma + 1)^k\\cdot 2^\\sigma \\cdot n  \\cdot k)", 
     "state" -> "Boxes"|>,
    "TeXAssistantTemplate"], TraditionalForm]],ExpressionUUID->
  "b3914357-6906-7c45-9cfa-ddc8673949a8"],
 "\nQuesto \[EGrave] ",
 StyleBox["esponenziale",
  FontWeight->"Bold"],
 " nei parametri ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    TemplateBox[<|
     "boxes" -> FormBox["\[Sigma]", TraditionalForm], "errors" -> {}, "input" -> 
      "\\sigma", "state" -> "Boxes"|>,
     "TeXAssistantTemplate"], " "}], TraditionalForm]],ExpressionUUID->
  "e998ba12-3682-8a4f-93c8-39a1b2e12b06"],
 "(alfabeto) e ",
 Cell[BoxData[
  FormBox[
   TemplateBox[<|"boxes" -> FormBox[
       StyleBox["k", "TI"], TraditionalForm], "errors" -> {}, "input" -> "k", 
     "state" -> "Boxes"|>,
    "TeXAssistantTemplate"], TraditionalForm]],ExpressionUUID->
  "cae6f27d-3354-eb4b-81d7-b28c13347007"],
 " (lunghezza della parola), ma ",
 StyleBox["polinomiale",
  FontWeight->"Bold"],
 " nella dimensione del dizionario ",
 Cell[BoxData[
  FormBox[
   TemplateBox[<|"boxes" -> FormBox[
       StyleBox["n", "TI"], TraditionalForm], "errors" -> {}, "input" -> "n", 
     "state" -> "Boxes"|>,
    "TeXAssistantTemplate"], TraditionalForm]],ExpressionUUID->
  "43c44c5f-819e-e149-ab64-a6d13e2cf2bd"],
 "."
}], "Text",
 CellChangeTimes->{{3.9537895941502457`*^9, 3.9537896167588654`*^9}, {
   3.9537897030057316`*^9, 3.953789722622921*^9}, {3.9537897591082897`*^9, 
   3.953789820779131*^9}, {3.9537899639290276`*^9, 3.9537900486638565`*^9}, {
   3.9537901271662846`*^9, 3.953790189674448*^9}, {3.9537902448912525`*^9, 
   3.953790298661972*^9}, {3.953790345854227*^9, 3.9537903905178394`*^9}, {
   3.953790451833103*^9, 3.9537904616685505`*^9}, {3.953790567530655*^9, 
   3.9537906594019127`*^9}, {3.953790894699732*^9, 3.953791010033615*^9}, {
   3.953791086705902*^9, 3.953791137112236*^9}, {3.9538237033644276`*^9, 
   3.953823704611614*^9}, {3.953881172544653*^9, 3.9538812617672577`*^9}, {
   3.953957899687971*^9, 3.953958008475132*^9}, {3.953958061326227*^9, 
   3.9539581033988667`*^9}, 3.9539581506130886`*^9, {3.953958185406908*^9, 
   3.9539582454008713`*^9}, {3.953958304932987*^9, 3.9539584147679996`*^9}, 
   3.9539594523773174`*^9, {3.9539594968903313`*^9, 3.953959749793764*^9}, {
   3.953959790246668*^9, 3.9539599684111824`*^9}, {3.953960027380028*^9, 
   3.9539600958102665`*^9}, {3.953960129366976*^9, 3.9539602289059277`*^9}, {
   3.953960275174118*^9, 
   3.9539603254388924`*^9}},ExpressionUUID->"69c62429-f047-f043-9032-\
eb4fb8137393"]
}, Open  ]],

Cell[CellGroupData[{

Cell["II.2 Esempio ", "Subsection",
 CellChangeTimes->{{3.953791302391716*^9, 3.953791317834902*^9}, 
   3.9537915030567703`*^9},ExpressionUUID->"bd6d3cb2-c18b-924e-b012-\
bbfd74089f37"],

Cell[TextData[{
 "Supponendo un caso reale:\n- Alfabeto italiano: ",
 Cell[BoxData[
  FormBox[
   TemplateBox[<|"boxes" -> FormBox[
       RowBox[{"\[Sigma]", "\[LongEqual]", "26"}], TraditionalForm], 
     "errors" -> {}, "input" -> "\\sigma = 26", "state" -> "Boxes"|>,
    "TeXAssistantTemplate"], TraditionalForm]],ExpressionUUID->
  "d1741e00-d357-a147-8254-6d6e47c463e1"],
 "\n- Parole di 8 lettere: ",
 Cell[BoxData[
  FormBox[
   TemplateBox[<|"boxes" -> FormBox[
       RowBox[{
         StyleBox["k", "TI"], "\[LongEqual]", "8"}], TraditionalForm], 
     "errors" -> {}, "input" -> "k=8", "state" -> "Boxes"|>,
    "TeXAssistantTemplate"], TraditionalForm]],ExpressionUUID->
  "bddf1712-f838-3547-9412-96aa004dd340"],
 "\n- Dizionario di 50.000 parole: ",
 Cell[BoxData[
  FormBox[
   TemplateBox[<|"boxes" -> FormBox[
       RowBox[{
         StyleBox["n", "TI"], "\[LongEqual]", "5", "\[CenterDot]", 
         SuperscriptBox["10", "4"]}], TraditionalForm], "errors" -> {}, 
     "input" -> "n = 5\\cdot 10^4", "state" -> "Boxes"|>,
    "TeXAssistantTemplate"], TraditionalForm]],ExpressionUUID->
  "6ecaa6df-c148-f248-8f67-073d6665a468"],
 "\n\nAbbiamo che:\n- ",
 Cell[BoxData[
  FormBox[
   TemplateBox[<|"boxes" -> FormBox[
       RowBox[{
         SuperscriptBox[
          RowBox[{"(", 
            RowBox[{"\[Sigma]", "+", "1"}], ")"}], 
          StyleBox["k", "TI"]], "\[LongEqual]", 
         SuperscriptBox["27", "8"]}], TraditionalForm], "errors" -> {}, 
     "input" -> "(\\sigma + 1)^k = 27^8", "state" -> "Boxes"|>,
    "TeXAssistantTemplate"], TraditionalForm]],ExpressionUUID->
  "849b69aa-0453-e340-baeb-44de824a755c"],
 "\n- ",
 Cell[BoxData[
  FormBox[
   TemplateBox[<|"boxes" -> FormBox[
       RowBox[{
         SuperscriptBox["2", "\[Sigma]"], "\[LongEqual]", 
         SuperscriptBox["2", "26"]}], TraditionalForm], "errors" -> {}, 
     "input" -> "2^\\sigma = 2^{26}", "state" -> "Boxes"|>,
    "TeXAssistantTemplate"], TraditionalForm]],ExpressionUUID->
  "d0174147-0d25-5c42-82cb-6d136dbb7e04"],
 "\n- ",
 Cell[BoxData[
  FormBox[
   TemplateBox[<|"boxes" -> FormBox[
       RowBox[{
         StyleBox["n", "TI"], "\[LongEqual]", "50000"}], TraditionalForm], 
     "errors" -> {}, "input" -> "n = 50000", "state" -> "Boxes"|>,
    "TeXAssistantTemplate"], TraditionalForm]],ExpressionUUID->
  "6851056e-7c53-7045-b6b5-87656de942a5"],
 "\n- ",
 Cell[BoxData[
  FormBox[
   TemplateBox[<|"boxes" -> FormBox[
       RowBox[{
         StyleBox["k", "TI"], "\[LongEqual]", "8"}], TraditionalForm], 
     "errors" -> {}, "input" -> "k = 8", "state" -> "Boxes"|>,
    "TeXAssistantTemplate"], TraditionalForm]],ExpressionUUID->
  "01fca2a3-d9f7-e64e-861a-012be8c1ddbe"],
 "\nIl risultato finale \[EGrave] di circa ",
 Cell[BoxData[
  FormBox[
   TemplateBox[<|"boxes" -> FormBox[
       RowBox[{
         StyleBox["O", "TI"], "(", 
         RowBox[{"7", ",", "6", "\[CenterDot]", 
           SuperscriptBox["10", "24"]}], ")"}], TraditionalForm], 
     "errors" -> {}, "input" -> "O(7,6\\cdot 10^{24})", "state" -> "Boxes"|>,
    "TeXAssistantTemplate"], TraditionalForm]],ExpressionUUID->
  "df6fdde7-c216-804c-8cfe-846094a19105"],
 " il che rende necessario adottare ",
 StyleBox["strategie euristiche",
  FontWeight->"Bold"],
 "."
}], "Text",
 CellChangeTimes->{{3.9537913254796753`*^9, 3.9537915082712955`*^9}, {
  3.9539604345899315`*^9, 3.9539604484502983`*^9}, {3.9539605668267536`*^9, 
  3.9539605936654587`*^9}, {3.9539607806504154`*^9, 3.953960854493685*^9}, {
  3.9539608878823433`*^9, 3.953960908610777*^9}, {3.9539609512559414`*^9, 
  3.9539609623431625`*^9}, {3.953961133741787*^9, 
  3.953961185404896*^9}},ExpressionUUID->"83f49459-a520-e24a-9cbf-\
2476d27b2203"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["III Hangman: modello dell\[CloseCurlyQuote]urna", "Section",
 CellChangeTimes->{{3.9538097526377144`*^9, 3.9538097917626495`*^9}, {
  3.95381051425873*^9, 3.953810516355057*^9}, {3.9538134418445644`*^9, 
  3.953813446507208*^9}},ExpressionUUID->"7f932e4b-efab-6645-9f02-\
e31694a76418"],

Cell[CellGroupData[{

Cell["III.1 Modello dell\[CloseCurlyQuote]urna", "Subsection",
 CellChangeTimes->{{3.953809775470066*^9, 
  3.9538098110372105`*^9}},ExpressionUUID->"d2c922b6-181e-5c42-abbc-\
656b1a4c50e8"],

Cell[TextData[{
 "Possiamo descrivere un modello astratto per il gioco \
dell\[CloseCurlyQuote]impiccato basato su un\[CloseCurlyQuote]analogia con il \
modello dell\[CloseCurlyQuote]urna.\nParametri:\n- alfabeto di n lettere\n- \
numero di tentativi concessi  k, 1\[LessEqual] k \[LessEqual] n.\n- numero di \
lettere distinte della parola t, 1\[LessEqual] t \[LessEqual]n\n- parola w\n\n\
Attenzione: la parola da indovinare ha una lunghezza ma conta solo il numero \
di lettere distinte della parola!\nIndovinata una lettera, tutte le sue \
occorrenze nella parola vengono svelate. Quindi non importa quante volte \
compare una lettera, n\[EAcute] dove: ci\[OGrave] che conta \[EGrave] quali \
lettere ci sono nella parola.\nEsempio: la parola \
\[OpenCurlyDoubleQuote]lettera\[CloseCurlyDoubleQuote] ha 7 lettere, ma solo \
5 distinte: l, e, t, r, a quindi t = 5.\n\n\nPresentiamo quindi il modello \
dell\[CloseCurlyQuote]urna. Immaginiamo un\[CloseCurlyQuote]urna con: \n- \
\|01d461 palline bianche = lettere presenti nella parola (cio\[EGrave] le \
\[OpenCurlyDoubleQuote]giuste\[CloseCurlyDoubleQuote]).\n- n \[Minus]\|01d461 \
palline nere = lettere non presenti nella parola (cio\[EGrave] gli \
\[OpenCurlyDoubleQuote]errori\[CloseCurlyDoubleQuote]).\nIl guesser pesca \
palline una alla volta, senza ripetizioni (una volta pescata una lettera, non \
la pu\[OGrave] riprovare). Pu\[OGrave] succedere:\n- Se pesca \|01d461 \
palline bianche prima di pescare  \|01d458 nere \[RightArrow] vince (indovina \
tutta la parola).\n- Se pesca \|01d458 nere prima di indovinare tutte \
\[RightArrow] perde (viene impiccato).\n\nSe si lascia che Pj sia la \
probabilit\[AGrave] che la t-esima pallina bianca venga estratta nella (t \
+j)-esima estrazione, allora \[EGrave] facile vedere che la probabilit\
\[AGrave] di scegliere una pallina bianca \[EGrave]:\n\n",
 Cell[BoxData[
  GraphicsBox[
   TagBox[RasterBox[CompressedData["
1:eJztnQn8VWP+x6eSUihlZ5AtW2SrmCwhu2qkzZpMIlQSWbNkKesg+zLGTsi+
LxFZyog0llCWsi+RsQzO3/vxf5rrustztvvcc+/n/Xod+f1+59zzvWf9PN/n
u7QZMHT3Axv+6U9/OqLpr//Zff+RXYYP3/+Yni1//aHXkCMOHjRk4N92GjJi
4KCBwzsNaPTrL0f/usz/df2Ffv03EEIIIYQQQgghhBBCCCGEEEIIIYQQFeOb
b77xbUJdoOMshBBCCCGS5vnnnw/69+/v24y6YL/99gu+/PJL32aIPGbOnBnc
ddddvs1InfHjxwfz589P5LMuvPDC4Mcff0zks6qda665xrcJQgghREm6d+8e
7L333r7NqAt22223YNSoUb7NEHnss88+wWmnnebbjNQ5/vjjg7POOiv258ye
PTtYZJFFgu+//z4Bq6qfNdZYI3jvvfd8myGEEEIU5MUXXwxat24dTJ8+3bcp
dcEdd9wRLLXUUsFnn33m2xTx/8yYMSNo3rx5cPfdd/s2JXWuuuqqYOmll44d
93XIIYcE7dq1C/773/8mZFl1s8UWWwSDBw/2bYYQQghRkF69egXHHnusbzPq
ig033DC4/vrrfZsh/h9ioA477DDfZlSEn376Kdhkk02Cyy+/PPJnzJo1K2jZ
smXw5ptvJmhZdTNt2rRg4YUXTixWSQghhEiKOXPmBIsuuqjxT4rKceONNwYd
OnTwbYb4FeZJFltsseC1117zbUrFuPrqq4ONN9448vannnqqiRurJxgHbb31
1iZnQAghhKgmzj///GD77bcPfvnlF9+mZIrPP//cxCAfc8wxwQ477BA0adIk
eOutt5y3//rrr03Mg+Jx/XPBBReYe6Ce+M9//hMsu+yyJgc4LDwr2rRpEzz4
4IMpWFbd3HrrrUGXLl30vBRCCFFVbLXVVsEZZ5xR0X2+9NJLwZgxY2J9xgcf
fBBsvvnmwU033ZSQVeGYN29ecMMNNwTXXXed0fK0Zg2j5wENeeKJJ6ZjoHAC
XUbsySWXXOLblIpD/vvQoUNDbzdx4kST/1GPcSfU8uFe5xkmhBBCVANffPFF
sMQSSwSTJ0923mbSpEnBoYceGkyZMiXyfi+77LJgxx13jLw9XHTRRea9euCB
B8b6nCTYZpttIun5Sy+91MzfC3+QE8q58xVr88MPPxgfOfdipWE82r59+9Db
nXzyycHOO++cgkV++PTTT805IJ6mHIz/unbtGvz973+vgGVCCCFEeaizQr25
MAwaNMjonyjz9Bb0fM+ePSNvDy+88EKwwgormJp5vomq5++//36Tu1CPfs5q
4dprrw1WWmklbzUXr7jiCnPt/POf/6z4vpnjaty4cfDJJ5+E2o4xwJlnnpmS
VZWnc+fOQYsWLcycmwvkDvz1r39N2SohhBDCDebb11xzTef18V+ts846wWab
bRYrfjQJPQ/V0scmqp7/7rvvzHYTJkxIyTJRjh49esTKC40L92CzZs2Cjz76
qOL7JoeDuBlyY11hHN+gQQPj268FOAYc/zDPo5tvvtnU9iGHRgghhPANeV1h
alRQAwf9OWLEiODjjz82SxTi6vknn3wy2HTTTYP77rsv8mckSVQ9T91ucmKJ
XxB+oG7oUUcd5W3/f/7zn73m4q699trBsGHDnNd/7LHHzLUed/zx7rvvVsW8
lP0+YcYnzz33nNnm5ZdfTtEyIYQQojzMLTPHfMQRR5Rdlxib7bbbLlhllVXM
e4zY2V133TU44IADIu07jp5He9DTZfHFFw822mijSJ+RNFH1PJCPvMcee6Rg
lSgHdSobNWpU8ZzkJ554wtR+p08r1w11S7mX6E9L3ZlKcvDBB5u8cldOOOEE
E6NDzLkL6Hb6MJFzDM8++6z5njxTmBt8/fXXI9kdB+YWOf4s9t4dMGBA0Lt3
b6dalIzDiZOLU79fCCGESAJ8S7zHqNXnSp8+fYyO/vnnn53Wnzp1qok1Zbn9
9ttNLRhixslh3WCDDcz/87ennnrK/D/v0vHjxxf9PGq2jx07Nvjqq6/M+3T3
3XcvawMaG39amIW44jDE1fOrr7566O1EfO68805z3h555JGK7vfRRx81MRuM
idk/eSz0ZfJRu3TIkCFB06ZNnccRW265pbl3XSAnoV+/fiZ3lLx7el1wz9o4
FcYxxBtVGvT8xRdfbM7BkksuacYVb7zxhjkHX375pdNn0K+AHmRCCCGET8gD
DKPniVVfccUVg1122cV5H9QAXG211f6wELPbvHnzgn8rVveG2H18ethh58ip
nV8Oxg6sG2ZBZ4UBPU8MdpTc3JNOOsnEI1dDXm+9YWskVVrPW7iXiLfxlYsL
3EOusSP4pdu2beus58eNG2fmIk477TQzZthpp50W6GVyR5Zffvlg/fXXL/s5
1P5B+4ddpk+fXvJzGbdTa3bkyJFO3ycXcoKrZX5QCCFE/XLOOeeY9/iLL77o
tD71/Fg/iboWcePnR40a5axBqEf4zjvvhFpcfXQW+uq41LorBPMTfJdZs2ZF
2l5EhxgXjj2+2UpDnUp81sx5+eTuu+82x+Cuu+4quy7zYqzrmnNja/bgk2e7
Bx54YMHf0NL8ziXWh2PFPT98+PBQy9y5c0t+7m233WZsYG4wLHynVq1ahd5O
CCGESJJevXqZd9m///1vp/Wplc76cerOW+LqeWrFYUu1gD+fufsoWD0fdXsR
HfzFzI34gFg0zjtxHz6xet6lnxbPCtZ1ybnJpXXr1ibvO7ce1fXXX28+i/7K
vqCPBvV6yaMIC3qeOcYo2wohhBBJQVxLGD1Pzib5s0n0OY+j55mnX2655YJt
t902th1JQbwN8QTEB4fF6nnqkIvKsvLKK3vT82effbY579SM8onV82jbcpDb
ElbPM4fWsGFDk8Oey8CBA81nMbfli3bt2pk6WVGwcw6u85tCCCFEGuCXYr6f
OXQXyBvr1q2b+f/333/fxH1HJY6et3m8p5xySuT9J02cfFir5+McTxEe6rMw
PqWOuA+Y0yEfhVgSePjhh73YEUbPjxkzJvS9Rww929xyyy2/+z054Pwen/3j
jz8euqdVXGzs/JFHHml+JjbnlVdecd5eel4IIYRvyGujTh/9VV1B+xBzz7Zo
kQ8//DDy/uPoefJ3eY9Sg74aYL6Cmh9R9fwZZ5xhtqVWnqgcxMxz3Lt27epl
/+uuu66JeYOrrrrK5Ob6wOp5+sSVw/aGzo2Dd92GvBQLtevp4UQdS+4fakW6
1sxKCuIGscv2sGD+MdfGclg9X0t9coUQQmQLak7wLgqj54lNIMeM/L24vsQ4
ep73KHML5XLd0ubVV18NJk6caGpQ27o49IXid8RGu2J700jPVxZqRPrW89Ry
px67rdvkA8agHIe11lqr7LqdO3cOpefR6Hwu9azow2oh99vmwpIz62MsY/U8
NSqPO+44U7s0DLZ3AHMWQgghhA+i6PlJkyaZvrD0f4kbQ08tmKj6hXkC13p5
aTJhwgQzLrn33nt/t1BrO4zPjlp+nAtyBkXlsLUqfel5rhHuv8MPPzxS3kVS
TJs2zRwHYu/K1XWinmwYPc99Ts4xc1C5EOPHeIa+VGhpH3z77bdBx44dTf8H
anaGfabR1872oRJCCCF8EEXPVwPEqpK/SA+cWoG4Ic6Fat9VFt96vlqgRrud
XyIvphRh9XwtQ04wx4K+2UIIIYQPbIxIly5dfJsSivPOO29BP81awcbbSM9X
lqOPPtoc9+7du/s2xSv0hXXR8/PmzTM58dWUu+IT6oxKzwshhPAJ+Xe8i7LW
r5y5beIC6BdZK0jP+8HmIY8dO9a3KV5x1fP0sKUeD+uRE1/vSM8LIYTwzbHH
Hlv1ep5cOnrO2HqaxOLiH9x77709W5Ys0vN+sD3JpOfd9Dy1X+x60vPS80II
IfyTBT1PLWhs3H777Y2Wpw7Gmmuuaeb9awnpeT9Iz/+G9Hw0pOeFEEL4Jgt6
Hs3Qt29fY2ePHj2C9u3bmxqRtYbV88QRJdF7V7ghPf8b0vPRkJ4XQgjhmz33
3LPq9bzlvffe81rPL22snlevycpCTzTp+d/r+VJ9JWz/Len537B6Pms1woQQ
QtQOHTp0yIyer3Wk5/2w2GKLSc8Hv9fz//jHP4quR68F6fn/YfU8ixBCCOED
6fnqQXreD9LzvyE9Hw3peSGEEL6Rnq8epOf9ID3/G9Lz0ZCeF0II4Rvp+epB
et4P0vO/IT0fDel5IYQQvpGerx6k5/0gPf8b0vPRkJ4XQgjhm06dOknPVwm5
ev5f//qXb3PqBun535Cej4b0vBBCCN9kof58vWD1/CKLLBLMnTvXtzl1gx3T
Ss//T89PmjSp6HpPP/209HwOVs+vvvrqvk0RQghRpwwdOlR6vkqwen7RRRcN
vvzyS9/m1A3qJ/UbuXr+nnvuKbqe+kn9Hqvnl1xySd+mCCGEqFP69+8vPV8l
WD3fqlUr36bUFeutt570fODeH/ahhx6Sns9B/WGFEEL4ptbibX7++WejMX75
5RffpoTm3nvvlZ73QC34519//fXgtddeC+666y5zL1966aWhP8NVz8s//3uk
54UoDb3dhRDpMmbMGPMu6tGjh29TEuGYY44x3yeKnvHNBRdcYGxffPHFg/nz
5/s2p26oBT1/+OGHB/369Qvatm1rvsu4ceNCf0au3z1ren6DDTYIttpqq+DT
Tz+t+L457tLzop645ZZbgt133934oErx7bffBn369AnOPPPMCllWWahDt/PO
O4d6X0+dOjXo3bt3cPbZZ5dcD98kvoKTTz45rpkihyeffDLYY489gu+++855
G/Qk1/szzzyTomXxeeONN4IGDRoETZs2LfkOzwroGt6tAwcO9G1KaP79738H
jRo1MvHzX3zxhW9z6gZ0PNfMlltuGXrbBx98MFh//fWDa6+9NgXLwjNs2DDz
Xe64447Q26KFW7RoYbZ//PHHi673/fffB3/+85/NenfeeWcccxODZxj2PPzw
wxXf9xVXXGH2vfLKK1d830L4YOONNzbX/N///vei66BxGePiW/jpp58qaF1l
mTBhQrD22mub97cLhx12mDl2aPpioOWPOuqo4G9/+1vwzTffJGVq3fDDDz+U
1FD//Oc/zXt79uzZZT+L9x3Pds7ZrbfemqSZqbDQQguZmiq1oOe/+uorU08v
i/5txc/7gTEtx32VVVYJve0yyywT7LrrrilYFQ3er1H1vGu8DQwaNMisx5yS
b2bOnBlcd9113vaveJv4oPceffRRs3ANM7a+5JJLfJslisBzr5Sexy/P/XDo
oYdW2DI/oA9XW201J91h54NL6fkjjzwy2GKLLTKn5XkW+4IaDiNHjjTjpTZt
2gQNGzYsuf75559vND16vRRoSnysWdLz2Pvxxx/7NiU25557rjn+WUR63g9W
z7du3dppfeaYmT8+5JBDzHbt27c3c3HErKGJfRLHP2/1PL73cnORVs+fdtpp
UU2NDc9h8n+stiBeyAdWz/MOFtEgbuvUU08NRowYEayzzjqRr2FRGYgxKaXn
mfNcbrnlgnnz5lXYMj+Qr8ecRa9evcquy3VeSs9ff/31Ro999NFHSZtZlOOO
O87EocSBuYTGjRsHb775ZkJWheOTTz4x74Arr7zSHN+uXbuWXJ9zRo1hl1gO
3vFZ0vNNmjRxmnuoVh555JGgY8eO5pj37NnTtzmRsHp+22239W1KXcE7h1qD
xGy4MHnyZBNnw3VmY1OIVamGGqOMM+Lq+bXWWqvsuhdeeKFZ94gjjohiZiKM
GjUquPzyyxfEu/jSf1bPk4sk4sP7leMZV1+I6BxwwAFmnFwsj9X6mAvpG/yC
9OjDt1AL4CPE14PGKAW1CIiXfeKJJ0qud9ZZZ5ljV+j44EdZfvnlgwEDBjjb
d8011wR9+/YN3n77bedt8kGv3n///ZG3B+rEkfvnW0d++OGHQfPmzYPtt9++
7LrMqxCb8vzzz5dcz/aoofdKtWPHHq7xX9XGW2+9Fey4444mRoD7bocddvBt
UiSsni81DyfSgfg4Vz1v4XnBvN6PP/7otP5VV10VrLnmmqEWl2dSLuRYRc3t
/frrr822+++/f9l1x48f71XPE5dBfClgL3OrPnJhweaxP/XUU172X2uQiyI9
7w9it1dYYYWgQ4cORddB43KOXn311T/87eijjy76tyyy0047BUsssYSJISoF
z8+ll1462GSTTUrmC9j3PL6IfKyfhJxZV4jLadmyZaj8znzQgDxT48D3IZeg
GmCO2eXdyTuDsWeXLl1KrsfcK+clC3mNaOGs6nnyHojTI27N3idnnHGGb7Mi
YftulsoxEunA/RxGzxPrwXNg7733dt6GmpLUKgizMHcYhpNOOimyr5r3L9u6
xLz+61//8qrnP/jgAxOjwViKcQ/vI18QI8KxoNaFiA9xrdLz/iBeotx809VX
X11Qs3NP4qMlZrQa5ivjQvw6Gp0aVi6g/TkuM2bMKLoOf8OPn6/nrW8e37Kr
bmRumfXj1v+Iq+exw1ecTT5odK5BV1/YZpttZmJUSs0rEFeaFT1v44CzqOd5
n/NuB1unBF2fRW688UZjP/EDorIMGTLEHHvXZ9qzzz5blefKxn5E0fPEEbEt
OUXlwBdFTSyfOhp4vvqO+znwwAPN+7nUO1y4s88++0jPe4Drd/r06Qt8kcR5
n3feeWYuLp9XXnnF+Kx5DuTywAMPmG2pH+sK/jhiNdCz+MAHDx4cbLjhhsbP
7UuTELvCsbCxfNzj+M7L5WhbLTV69OiS66E382M8Jk6caLYlR9MVO0/Kcx97
iVWIQhw9z3tj8803NzH/L7zwQqTPSBL8ZhwTVz2/1157mfU5v8UgLp98Z/zH
1Q61Nct9nyxAnAo+U+YLs4g9D+h6UVluuukmc+zLxUhamANifZ/5/IVAx0fV
83fffbfZljhQFzbddNNQ7+00oF4mNhND6gtyoZXDnhzEbkvPVx7yGYcOHWp0
Otczc4PEF0+ZMuUP66LnyXfNx+bvHHTQQU77ZE6LeHO2Qd8SO0dfPGCecLfd
dov3pSJyyimnmGOx6qqrmnlb5sw5FuXq4d58881OOXDoefp45GJjbRgTlIN5
AMZBxBfjS+C4MVdMHFQUoup58sh4/tlxTzX4t+bOnRs0a9bMWc9b3VUq7xI9
T75zFnj55ZerpvZcHJZddlkzd5JVbN77rFmzfJtSd9jnsGuNFHI0iLlnfog8
eVcNnDZx6lVabexa54r42nbt2nntxWzr+fi8Z6hrRL0PkQznnHOOOadhY81E
fIgvWWqppcrGlxTT8/vuu6+znidmD83BZ7EN/eCY97TQ5xqfgQu33XabeRaE
WchnKgd5kNRbcoX4cb7LSiutVDKevZCeZw6AbYcPH+60L567PH9L5Tnkc/rp
p5vvTp8e6rSdcMIJxmbOOfvl7yz87aKLLjLrFpt3RDeTF833ZPyD7cwRlIJ4
LD477BImN4D3F3MF5La58I9//MPYTg+BYnkPWdLz9n7Kctw2cXyMU8nFySrc
E+RxZGFOp9Yg5s411gR4xu+5557m//GrVIv2iKPniTniOej67LS9mH3WuWVe
nr4BPufkmBPEtymSQfE2/sBH7tJfvZieJ1bEVc+TJ0FtaWJ62IZ6VRb8JNQS
dNXzxPOjvcMs+N9LQf1D7m3if1yxep4FvVuMQnqe7xtGz3/22Weh6+Tieyh0
LPBno2cL/a1QvBUw9rIx54zFyKEu9+4gnsrWcg+zhKm9g00LL7yws3/e6nmW
YjnPWdLzQM6Hr7mtJLBzJsTvZRXuiY022si3GXUJ+a2M58Poed4/zFEyP1ot
/Q9t3k6U/kroeeIgXbExSr70PHXJeA/57ufFO79QrQoRDfqJSs/7wcbL2JiX
YqDnC2ntMHreQtwIvrjcWHmeKXwO/l9foOGw4ZZbbnHexlXPr7jiin+oxxVW
zzMnwfr33Xefs33FiBM/z9iL80fcjQtoZvIuwixh5oDJqaLeT9J6vnv37s42
+IZ7Kst6nvlBcpSzHKuCng/zHBTJgr+dOV4XmIsktpI+HL7qJFqoK0C9YvxN
5JURU8nYhN8Ri4zudQFfdxhfz5w5c0xsKfF6PrDx/tTo9AUxAxyDLNYSqFZs
bor0fOXZZZddTNxqOdDzxNbk06dPn9B6nt43+Xk4Nv7RZ8wA849h+/JYPY++
LfXcLeS3+8tf/hJKz9MHFc2TRP/MOHp+2rRpxu4TTzwxth1JwPiCuaOwep5j
WUrPu/r6qgFit13ntqoR6jytscYavs2IDNcgzw56wwk/XHbZZZmaU7MQ80pe
GfOvFuaK+R1Lfg2KQvBOIAcurK+nbdu2wQ033BDa5iTgvcdzuFC+XqVgHoQY
uXI9w4U7xPRKz1ceaj4TR40mB7QNPV0KQe+5QrUD7D0ZJh+W8TAxVrmQ38nn
PPbYYyXtSBPmKnN769FHvBxWz6+77rol18MXkQ/HzFXP469mLsRqNn6Ok8cU
R8/bGM9yfbQqhY2TCqvnGU8Vg/cj9YeywqRJk0yfrCzCfcb5yHIMKzknfAcf
zy3xG9S54jngon9rDfzL9OoOWzOaHC5ftSIZezGv6hN6Wrn0eBfu0HdBer7y
2PcotQ+Bmov0vi5GoXcV41s+w+YWlYOaMazPv7ngr8fHDcQzMh9QadBDdlzC
fAH+nnJYPV8uP77QsbPzUi56Hs3KuswhAFqTOLWoxNHzxEQR94hfqRqIqufL
XbNZ0maMPxibl8tPrkaIXeV8cM9lFWzH10n+t/AD/g3iVbI0Dk8K4u7pMxgW
6pX5mNOw/bzoc+4LcnDpZeVSJ0O4Iz3vB6vniSHjvi4VX0ANIvpP5MeWo3n4
DGLBXSAmkPXzY1qY89pmm22Cd9991/gMfICeR+uRS8D8gUsfcHvtkodQDMZJ
HLt77rnnd7+3/T9ccuisnuc8ffTRRyZOKo52iKrnmTsp10u40hAHyrlzfZ9R
64djWWq8Rhwq5yxLPcDxM9mxeZYgjox8Zp91NuJC7XyXurMiXTgHzPfXG127
do3Uf4LcAeJt0/Zd8K5ijt9CDbOodXySgj52DRs2NL0RRTx4B5Pfx8KYmnOL
RuFnYhOqJd+8lmFujrhj4m1YSsWQkZdDnEy+Dw2fCHEq1G/Jjf8rBnXa8cXn
a1H0IT5f8uJ8+X2p7cKYgpowtmdlOQYNGrSgln4x+E4cu/waxxxvaiCzlKsT
g/+1RYsWph84NubXygkLsSZR4mVsbUTqWvqG+oC8v/fYYw/j6+H6wefOHAvP
kWJwrfMcL5UDRb1/1smSr4/5Go6Fz3rSLuTe37YuCfXAswr3LvVqszT2y4U5
nWOPPdYs/fv3N89iOz7h/+lzEaeXdCXhOUztgVztWOuQt4Umx+cTBfrr4ZdK
E3KtqEtp31v49ag3EKYucdJQO9u1D7woDbFu5HAxTqO/N75KtCK/Y3HN6Rbx
QIOXq20D+GWJfS9E2N58hcBPwHWQRK5nVHgHFPuOheBZxLujS5cuJevnol/I
IS3E8ccf71RfCNDfPIM+//xzZxuThv1jL71LfENdBuqWW7h20OhcR9SMKATn
gv5p5WrX8FlZi11h3oZxtetY1Af0M2bcZfsuc644Hy+99JJny6Lz9NNPm1ib
rEK9fOrDMvfKPBe+B+ZsGRcyX8rYlt9lJdeXPCPysOoFavUw/ooK723ma9ME
Tcc1xLVEbVrm8997771U91kK5t7pXRemLrIQ9QDPffz8Bx98sG9TKgr+OJ5R
cXxXjKfwAxP/mAWoUYm9LnMx1Qhzf9S1KTWfkmWIR40y714piPFbcsklzVzT
7bffbnogVEOP4TgQH5iV+7cUjI15njHeyoV4BNv/LwuQj0F9gnro64Xfk7nJ
Yv4iF6iLQQy9HWOnBb3W6QHPuNB3zjI1HaopZlSIaoJ3M+9oFz9zrUDMIrE5
cRkxYoTRNT7nJlwhdj6/1miWoD4QMQW1CvFByyyzTMleCL5hzp1YKXJy8ANn
GXu86YGQdWzNYOL5ciEmit9nZQ7C5oZnuV+yKzzLkqjPQqweczP1MgbiniU2
RAhRGPph0OutHnIfGL9Q2zKJPCLidohnP/300xOwLD2IYcG3zdxpFrnmmmvM
XHyW8y5doK8MeR0ifTjW5LvXAvRWQrcz1srF1uIkzjorjBkzpibmTMpBzlcS
vZAYsxE7Wg912DleHTt29G2GEFUNMWnkGjLn71IbJqvgU8RPnWSOGPV+6KeD
5qwWmB/lHW57LvGep+9PFnNbqM/OOSNeu9YhpogcRpE+1OXKwryaC507dza6
nRq8uVAjt1zOfz7M06KbwixJ+obxkbj0D8k6fM+k8t+Jt6oHXxy5bvUwbhHV
BRov7DPRd+0lngfk58SpjV7NkPtG7lEauTzkMVLb/dZbb038s6NAPgTvcepc
zJw509QnyGKeGb1eGZeQL5o21G0Ke8+ylMqnDguflbVc3qzisz5HkqClyYth
sbnkjOPPOuusYNFFFzX1eMNco8Ru8OwIs/jqUypEVKjjseWWW5r50HqIVRLR
If8o7DOxGuoI1jK849K8b/EbVEssLjlLRx99dLDaaquZGpBZ1PJATZtKzRcR
y0NftLD3bZbqYoragz6CXIfkKhNXTM9Q6uhSzy9Kb7+3337b5GiGWVx8ps8+
+2zwwAMPhF6oSc93KrZQ24eajeRmUxOdbfgdfxs7duwfPo+abvRSjGJL2IX4
xlK2F1vIyyIWjP+/8sorTR4q/09cFZ/L96W+C/Mx/J510/oO+PiifAcW4qYK
/cuC74vjw7ni3KVhe6nrn9oD9hle7P2Ij4djnXutMddN7emrr77a9EGhblwa
tttznvRCX137nahza58Z9913X2K2U3M6SZvpG0bd1Pzfc+y5P4ihjmqri3+X
uIawz0QXLchcKDZwPSV9HfGZaVw/ufc21w/7yd83+Vz0nY1qO/1a07CZe55n
DfUD+Jl7LI17l4VaYFHt5FrHD5f/e3or2ePDPZG7P66fpK4hYo3C2MtzkHcQ
72pyK+3vqQFa7LPOP/9843Pku/BM5TkUxkaXsRy1eMPety6+T64fFuzgPPH8
4diTd0Fvg6jH3b7P07xn+Zf8RPaHhuBdkPS1j05J83uw2HuYhesnjH3M7VUr
3NdoEvJL6HuHNqnG2AvqHYYdK7O0a9fO5MKHXTgejGvsz+QPEWcexYaoC3nI
YWymFn3+78jzoJat/Zl8YeriVOo7UP8uyvHPX5j34Xi0bNnSnBu+q91HWueF
vMBiUOuTXnjYU0x74U8qdo5at26d6nHPPeflFvonkhNY7BpiWWeddcznMo/H
z9SRWnXVVc3/E4ubpO3Yk8Q1k7tssskmC44L14td7D65J/hbWFt99ja3/e7t
98r9N+7C+Y76zCHn3H6OfYbaY83PzZs3/8O1muT1Q03cMNcG8Sf2uqa2T6F7
Kc17tdDCMcw9vsXuy/yF560vm+1CHXLXY09NPfIN2I7+url/s/7x3Ps0qe8V
tWdLEvD+SuO48z6K+5zkHctn4d+1z3bOj31P5O7PvhPsv0ktHJ+wdlNXim25
Zuj9XsjO3CXOdVTNdaHoh42NjIWTgJjEnj17hlqmTp1a9nOJb6IPYtgl6tgk
P9aaeNaoNkRdwvYBL9RLi++R28eNeWZ+rtR3SCoujTljjgc1NvlOfNfcfaRh
ezkfDtcE9oTBniPOQ5rHPUxvTntsc+3Lh7/zuTZniPvKHp+kj38aNU3JNbHH
BXvtknu8OJdhbXXxx1EPEZ0YZhk1apTzd7L25/4bd3F9bha6XnLvTfsMtcea
n/NtTPp5FDYmg+vYXteFroFKPi/tYo9r/r8u58OXzXYJ80zkXud8sV1+Phjn
hN/n36dJ2FjuviXeJuw9y+KSa5jWsz+JnBv7nLe50xx7ez9xrnL3Z9e1/ya1
RNFsue8nez3l25m7xLmOfNfcLgb3D/5b9DyxAElA7g29isMsLnpeCCGyCP2K
iCkIs0SJdRRCJAMakLy+sPdttWq9qHAcarnGVS3BWMbOIbjUciVG9oUXXqiA
ZdUH49QDDjjAtxl1AXNFU6ZM8W2GEAZyd8gLEkKIeoJ47PPOOy/VfRDTUWvj
IB/YXNg2bdo45aQSN5R2L9Fqhdyn3XbbzbcZdQE1Y4jDEvUL+Qm+NDTPQuoN
br/99qbWNc9IcuNF+hAHcfbZZ5ucuFqBnGt6yYeJIyA3gusvv4a0Ky+//LLp
eUu+XxJgO3nq5G+GieUT2YU4NPJd0u6/SOw7+c21ALUPkugLFIWRI0eadxX5
BC4QG1aPtfn4zuRU5PfbEulAn5cmTZqYegGislA723ffRc47+YndunWLtD1a
MG6PTuIkyZmjBzPPSGJmRLqgGYcMGRIMHjw4dF5KNUNcK7VB6B1LnVsXbM5k
VJ1D3RG2p6ZuEmC3ncufO3duIp8pqhtq7qDnbSx9WlADjzzuWqgB36VLF5OT
y7xGJTn00EODxo0bm/uT3lj0mmCZNWtWwfV5rtSrf5o6ZdSQVi+iyjFw4ECT
iyEqB/5w6jiRI++TBx980DyXompyeipSUy0JqIkqPZ8++OXR8tttt13q+iEp
6FuI/3z8+PGmvjN1NT777LOi6/P9eIe6+OltnZpyep6xQqFc2cMOOyxRPU8d
Ren5+oF7kNo2lehVQIw+/lJqgWcd8kEbNGiQWD6qK/jan3nmmd8txIkWw/ZX
qEeo16SeV5WFvnjUEKyFMXtWoOY372v6MPiEdwl1p6P6aJPU8/aYSM+nC8eZ
OpaV6P2ZFMyr4we3fdTp11QqdxAfN3XyiFkph63PXE7PM2fMcXv33Xd/93ti
fJLU88TYSM/XD8RWUeu7UuCjZyyfdagxRHxBtcPYifqw9QZxiNRiVb5GZcGH
Rc3wWhizl+Ott97ybYJhwIABRm8kUfcsDvgCiUOMSpJ6/vDDD5eeTxnrC2RO
zhXmkvGFVQO8G6jNTYxMOcj1pwdIuT5kfDeXsXX79u3NvvOfITw32X6vvfYq
/wUcsHqeOEiftdtFZeC6camZmxQ87xdddFET7ynShxxF5p7rDXKz+vbt69uM
uoTc62p5ZycB/dqIRzz33HPNeOXyyy83NZOIuevfv7+XumDogGuvvdYszIew
oDn23XdfM5attC19+vQx+qRjx46RPydJPW/7c0jPpwc+aI6xa+20zz//3Lz7
u3fvnrJl7nTo0MFJz5MbwnflfVoK+qSyXrncOt5P9FXNZ/bs2Wb7pHK+iIfa
eOONTR85Udtwf9HvsNL5a8SsEbMv0of+kXfeeadvMyoK+oqYyHqt6eMb+iq3
atXK5CZmnYkTJxodv/nmm5s4WmJujz76aPM3+orz7n344YcrbteMGTOM9sUX
gw3Dhg0ztc9ZKtknGh/tNttsY47FeuutZ/phRiVJPY8e4rhw/kTyUGuAWHFi
RlxzRblPOCc+e/PmYt8TLnrezkXQ/7VUjyjizcrpeY5dsRhZ4pY4pknWcODZ
JT1f+xD7zT1Z6XxB8qW23nrriu6zHmGsz7OB/J96gphE372h651FFlkkePLJ
J32bERs0JvPyxCSyDB8+fMHf7r//fnOducTV8qwlJjbMwr7Lgf7FBlefPFoq
rB2l8myJ9XnxxRdNrA99y13iBBgP2c/m/8k1JJ6Z/vD49/fff38Thzx69Ohg
6NChZj3qAIbB5hVeffXVobYTbnBvc3ypWefKQQcdZLZBy7IUq+FQKWwfFxc9
D9R9Zn1qshbDxnkWyyEhRpd5PT4H30AhGGPQMyYf5t+4NyzMj3BvMFdo++QW
gnmAXXfdtejfRW1AHYrc66NSkNO5xBJLBF988UXF911P8O7edtttfZtRcYhB
4HlJ/rXwA7nIWa8TSv4YNXzxzXE9UdM8Nx8DHc/vqaNUDt7jPG/DLC5xctRb
x2/oWlsE7R3WDmr2FeOll14y/z700EPmWJDPVw7ilQrtBx1DbcBCf7vxxhud
vp/F5joq3iYdxo0bZ44vNSpLQbw5vczJmaMuw9JLL23mkjinlajBUQruZeLK
XfU8Y0u+M7q6GOh5nhOF4BlAbXo7T2Hn+fLhPpg8efLvfsccCMecGhzMwTEv
x7w734Fxf6kxN3oe20VtQ62ZcvdjGjAux5ejudB04ZmZdU0VBfwVnTp1MjXB
ssKrr75q7Lb3xGuvvRYce+yxJr7Td92SKOBzrZWxpNWq+c/KXXbZxbxfKx2v
biFegPl/NL1vTjzxRHOMZs6cGfkzkoy3QXNJz6cHceQcX2LQXCCOhPUZZ7lA
TgbPwzAL92cpP3U+xL1Q24Y8V5deS/R44juUiv8vpueJ0dlhhx3MPJatvURe
TiHy9fybb75p9DoxPGzHnBhxPRbGR6VqXkjP1z7cX7yLwtTzw+/JnBlx9/g+
mW/mOmPMSWxHGFq0aGHmWEV6EMtaCzEPYVl99dUzFc/Fc/rII480dqPh8eOg
FckdpxcwY9/8umbVDvVF8MVlaUxVDOvrJS/Awvcilo25dV/gp8OupDRwHNAq
nO849aSS1PM2jll6Ph3Iywqj54k3Y316FLgwZ86cYMcddzR+fdeFZ6ZrLD+E
jbexen7VVVctuk4xPc/4BJ8NEBPB5xSrR5Wv58844wwz3iDmjO3222+/BX/j
OUStHOn5+oa5Lq4NVz1/xRVXLMgxmjp1qvl/rjPqTNPjiHnSMO9ucq5rqQZG
tcC8NP1leHbEqTWRVcgFIQ43Sz20qPfGu4X47J49e5qaKTbnCj3PPZe13F5b
+8KX7zpJyCdDu+fW1Od9y/ejhhLPvbvvvrvidlFTABtszMsTTzxRcRuA44J/
Bv0VB/nns0NYPY/vnJyaaoqxJW+cPNGk9TzPi1KstNJKJfU3NhXyj6Lj2T/v
BAt9sPgdfROLgZ4vFSMksg99TbkO6EdUDu7BAw880Mz7sA25RrnPXfQ8vw/T
bxzd0rJly0i2i+JwLri3mUeJM/edVd555x1zLWalRiexZ+edd96Cvl/M/ebm
iTFmzrKef+6553ybEgvy2pjnwl+Ry2WXXbbgvDB3ctxxx1XcNrQUPnHGsNS7
YRzoA84xx2LMmDGxPkd6PjtQ08hVz6ObqX1EDGQ1YeNtwup54pSLgZ7P9Z/n
w7xDs2bNSt6rxbQ+NWnxVeXmhTGGxybi3YqBni8W2yNqA2KuXGuA4Jtnbpc8
JrZhbjUXYnyj6Hl6oFS6tk49wDktVVOrlrnuuuvMtYgOzhL2uUz98FyoS5BF
P/eUKVOM3dRjzjLkj/I9iM/Nxc5VkgtLTZf333+/4rahpTbbbDPjb8EGXzFZ
6HiORaGaHGFIUs9zvqqpNmKtYX14Lnqe9xHrjhw50vxM3kcla6oWg3ck9f3C
6vlSNejRM5MmTSr6d3JY+YxS9ZoeffTRP/yOeB38PXvuuefvfm/PAzV3qDXP
GCUfYpx4HovaZdNNNzVzpGHyR2wNsNx65jZHvG3btqHqidi+C7rORJKMHTs2
k37hk0466Q/3FnEcjHl55+TGemQB/MV8H/oMZRlyhJjvyn9H4+9q2LChmU8h
X9aXbcTq9urVy2uejO1xH9eHwJxasRp+LpBLTowhWp546i222MJoNX7XuXNn
9btPEOYUXfX8rbfeata19wn+YhtL7hOeqdSGCqvnS9WnJc6dWgbFwI+60EIL
mViHYhAvmw/Pm0K5Mjyb+D06jvunUC8M5qzR+qI2seNS6qmGgesefZGbC25r
L+X7r8rBPDXbXXTRRaG2E6IUvXv3zqSeJ38X/0vuc9f6hm39kizpEavn0Xq1
Cn5G3zVR2b/PdzX+HGJ+mCfwnfts/ZP2eGAPfmB+x+LbvlqCnI1ysScWq+dt
DQ3XGjdpY3OtXPW8jTGi3nYxqA9CnZFi/aSo3UkPz2KQE4Of4OKLL/7d7+1Y
wubKWOhbTT4smo4YnvxrnD5v1AYnHkLUJvRt5NoIo+fREvjh83NYiRvls6h9
wzPTNb/c6vmsxUWI6qZbt26Z0/PoQmK06TOSi63RgU+GOWtqxmQFq+fD+gxE
tkDblKqlLWoTtDk9JvALFuudZGFui2uEnJoePXp4HwMzT8CzFX82duEvp9Ye
vyv23mBcyNgFLV7q+zIfSd5vIf87z3A0VKn6stxHjAeoaZkL+TuFjjW1cHh3
EKdZqG+kzW0plX8rsk2Udy1zmYV6p1j9RN8Icmxzc69LYfU8MTxCJEWrVq0y
p+enT59ubM7vB0oNS35PrbcRI0YYf31WsM+Yxo0b+zZFpAj9ozjPheb5RW1j
c/Xzfcb5oIWJI5wwYYJ3LQ/08yCfnWcUCznT5FngN2EuoRD2eVaunwsxPB98
8EHBv1EDq1x9WXyihXz7xMwUqm/BO4HPKzYfwFwVsfrkP4rahBjFsHqe8Svb
5Pe2oWY2v6duErXbXPNbrZ6vlZ4zojpo06ZN5vS8rTuYf29Z/xG14c4991xP
1kWD3HjqMTB37Luvu0gPan7jHxT1BzHb9MagV2mtM3r0aBO3QmxDVIYPH+40
/hEiDNSPD6vnie/les6vH0sdeT6Lmqth/Ie25yL6S3GNIimI4+W68t1LPAzE
2zCPmh8HjS8LvxY541nMZyJXk3Phqy66SBZ8j9QdtLVgia2k5nCpWh2itsFf
TT32MH2csgaahzgb/C5x2HLLLU3MzLfffpuQZUL8L3aG961rTQKe5YWuQ+Js
0Bz8GwbqL2EDSxa1iqhObLxNvq9bVJ6uXbuac3HTTTf5NkUkAJqN3FfijfHH
7L777qb3vKhf8EXQH76W8ycOOeQQkzdYqBakK/hriJ0vVetSiCjYeJu1117b
Wx1Yeh3TKx076LEgRBJkMX6+VrH9DH30WhLpQJ198jro90leB3pO1Dcffvih
mbcht66W5tr5LsQF06+1WEx8MegXQi1JW5OM/FbqgxeLcxciKlHi59PAxjr7
qt8saguendQWkJ6vDqTnhagPmLshn7+WYq8Yn9ADK0oOr+2vQx+E2bNnG98p
418hkoa5Mel5UWvYvBDp+epAel6I+gHdW0ux4XH6ozFvdemllwYdOnQwMTbU
thEiDbi+pOdFrSE9X11IzwshhBDpIT0vahHp+epCel4IIYRID+l5UYtIz1cX
0vNCCCFEekjPi1pEer66sHq+d+/evk0RQgghao5q0/Pjxo3zaoeoDayeb9q0
qamhJvxi9XyXLl18myKEEELUHFbPH3TQQV7tsHr+xBNP9GqHqA2snl988cV9
myKC/+n5fv36+TZFCCGEqDmY/+Y9e8QRR3i1w+p5ejYIERf6kErPVw+KnxdC
CCHSgz7d1aTnFT8vkkD++epCel4IIYRIDxtvIz0vagmr5xdeeGHTk0/4RXpe
CCGESA+r5zfffHOvdkjPiySxer5Ro0bB9OnTfZtT90jPCyGEEOlh9Xz37t29
2iE9L5LE6vmFFlooeOONN3ybU/e0b99eel4IIYRICavnN9poI282UE+wWbNm
0vMiMVR/Phm++uqr4PPPPw+mTZsWjBo1Kjj33HMjfc4KK6wgPS+EEEKkRDXU
n3/rrbcWaC/peZEEtaLnH3/88eCDDz7wtv+jjjoq2HbbbYO2bduaYzl48OBI
nyM9L4QQQqSH9LyoRayeb9KkSTBnzpzQ2+OPfvvttyPv/8EHHww23njjyNsD
4xC+w4orrui9JxZ93rDlzDPPjLS91fOXX355wpYJIYQQwur5nj17xvqcd955
x2igKOTq+ddffz2WHULArFmzjJaP4p9nLNCgQYNg6NChkfd/4403Bl27do28
PTCeWGyxxcy44L///W+sz4rLK6+8koief+KJJ5I1TAghhBDBhRdemIh/fpll
lgnWWmutSNvm6vmff/45lh1CWFq1ahVJzxMjznYTJ06MvO8k9Dwwt0AMu29e
ffVV6XkhhBCiShk/fnxsPU89wIYNGwbHHHNMpO2l50UaRNXz1Hpafvnlg+++
+y7yvuPqeXJQyT+Nqp+TJol4G54RzJsIIYQQIlmS0PMXX3yx+YwpU6ZE2t7q
+VVXXTX45ZdfItshRC62RqKLnn/ppZeMX/7ss882sTaMBQYOHBjsvPPOkepd
xtHzTz/9dNCtW7cFOajVoIGT0PONGzdO2CohhBBCwMyZMyPp+S+++MLoHxar
Ow444ACjf9AyYbB6njoaQiRF7969nfX8a6+9Ftx0003BySefbLYZM2ZMMHfu
XLNEGWNG1fMff/xx0LdvX5P/yr/Ez3/yySehPydpXnjhBXNchg0bFnrbL7/8
MlhiiSWk54UQQoiU4F0bRc/PmzcvuPbaa4N7773XbL/jjjsu0D/ff/99qM96
6qmnpOdF4vTp0yd0vA0xLmzz/vvvO62Pbl9nnXXM0qNHj2C33XYL+vXrF3To
0CFo3rx5sP/++5u/4evfZ599gs6dOwe9evUq+nnUc3zxxReDn376yfi0O3Xq
VNaG0aNHL7DBdcGeMFj/PMcnLDNmzDDbbrHFFqG3FUIIIUR5vvnmm6BFixaR
422eeeYZ866+8sorI9twySWXqDa1SBxqI3JdUTvSla222srkdbvWk6Gm0wkn
nPCH5a9//avpeVzob8T0lIM6T9g+cuTIsutOnjy54H5KLTfffLPT97M8++yz
keNtrJ5nvkEIIYQQ6bDpppua+jTz588Pve3pp59u3tXE7UTF6nni8IVIiuuv
v95cV6eeeqrT+tSRWXzxxU3cWFzi5sPavJbbb789ti1JcM8998TW8+ecc04K
lgkhhBAC8CXyvo0Sp7vDDjuYPNYffvgh8v6tno+aTytEIeiJECZGhFqKrE8c
WVzi6vlDDjnE2EI8fTVA7c6oep5cY7a94IILUrBMCCGEEECdSd63L7/8cqjt
iNVp3bp1sNdee8Xa//nnn29qivDeFyIprJ7feuutndY/6aSTzHU4e/Zs8zM+
6ajE0fPk36633nrBuuuua+LoqwFilqLqee7vKM8XIYQQQrhz1llnmfftDTfc
EGo7G1Nre7jzvn733XdD75/etC1btgy9nRDlWH311Z31PLmrzDUBNSPxkUcl
jp7/6KOPzH110EEHRd5/0sTV89S3YfwvhBBCiHSwtejC6nly6tjuzTffNHVy
6MMTpZclel61bUQaEAvfsWNHp5qT6Hnix/DPU+uSazoqcfS8va8uuuiiyPtP
AnKC3377bbMMGTLE2NSlS5cFv/vxxx+dPod4vu222y5la4UQQghBbb2xY8eG
2sbqDupT9u/f39TZiwIxO6ecckqkbYUoBbHwXKMu9WoeeuihYI011ggGDBhg
eh7HYdKkSaaWfRTwyxP3E9eGuNBjgrH2iBEjTI4LC7nF/I6F7+gCtTsPP/zw
lK0VQgghBH5J/JNhIC5g/fXXNz2k7rrrrkj7pa99s2bNggkTJkTaXohS2FzM
askrdWHttdcOllpqKd9mJMYiiywS3Hnnnb7NEEIIIWqe448/3ku/l+effz5o
2rRpMGfOnIrvW9Q+//nPf4Jll102uP/++32b4gT5J02aNAn22GMP36YkAj78
Vq1axYpdEkIIIYQbjzzyiKlB/91331V0v6eddpqJyRUiLcjrGDZsmG8znHj0
0UfNfALx97UAMTrbbLONbzOEEEKIuoBY2SWXXDJ47LHHKrrffv36mTqBQqQF
dZjatWvnlBNbad54441g1qxZC34ePHiw6df86aef+jMqQcgJHjdunG8zhBBC
iLoBXe3aeycJqK1N7Pwrr7xSsX2K+oSc68mTJ/s24w+0bds2WHHFFU18/7x5
84Kll146ci5KtfHhhx8GK6ywgvlXCCGEEJWB/pjEGqMrKsEDDzwQdOrUyan2
iBBxGDlyZNCnTx/fZvwBako1atTIxKSwMKauxnmEKFDfJ06PXCGEEEKE5+ef
fw422GADU4eyElBzfvTo0RXZl6hviGuhp1HUmqppQrwNvWizVIOnHDNmzAiW
W2654PHHH/dtihBCCFF3XHHFFcFKK60UzJ8/P9X9MGZgP3Pnzk11P0JYqMe6
5557+jajLhg0aFDN1OgRQgghssYPP/wQrLLKKsG9996b6n6osX3BBRekug8h
cpk2bVrQrVs332bUBSeccEIwdepU32YIIYQQdcull17q3PsxKn379g2+/vrr
VPfhk/8DVMbe9Q==
     "], {{0, 98.25}, {567., 0}}, {0, 255},
     ColorFunction->RGBColor,
     ImageResolution->{96, 96}],
    BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
    Selectable->False],
   DefaultBaseStyle->"ImageGraphics",
   ImageSizeRaw->{567., 98.25},
   PlotRange->{{0, 567.}, {0, 98.25}}]], "Input",ExpressionUUID->
  "451485aa-8fce-b94d-81a0-d2c8bb380069"],
 "\n\nLa probabilit\[AGrave] che il guesser vinca (cio\[EGrave] indovini \
tutte le \|01d461 lettere prima di commettere \|01d458 errori) \[EGrave] data \
da:\n",
 Cell[BoxData[
  GraphicsBox[
   TagBox[RasterBox[CompressedData["
1:eJztnQnYVmMax4cYW0xiyJZtCmmkhmzJliVSZEgL7VIqkUS2QhFKiIQoW9YS
MpYSxlJjqWhSmqJskSVkbTjj91zX883b27ec5+zn+/6/6zr0vd973vN85z3L
/9zPff/vnbuc3fqMdf/whz/03/D3/7TuPPCwc8/tfOFJNX7/4eS+/Xv26Nu9
W/O+53Xv0f3c/btU+/3Fgb8v9/7+/vV+/78nhBBCCCGEEEIIIYQQQgghhBBC
CCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQjgwf/58b/Xq1WkPo8rx22+/ee+8
807awxBCCCGESJXly5d7m266qff999+nPZQqB88A2223nffhhx+mPRQhhBBC
iNQ46aSTvI4dO5pYnUieM8880zvnnHPSHoYQQgghRCo89dRT3q677ur99NNP
aQ+lyvL55597NWvW9GbNmpX2UIQQQgghEueYY47xxowZk/YwfEH8dujQoV7/
/v29Dh06eIceeqi3YMGCtIcVCePGjfNatmyZ9jCEEEIIIRJl8eLF3jbbbOOt
WrUq7aH45q233vJmz57t1apVy6N9+IoVK9IeUqmgk9m/fvniiy/M3/TJJ5/E
OCohhBBCiGxx/vnne+3atUt7GM4sWbLEW2eddbxtt93W+/XXX9MeTgnkgZKL
26BBA2+99dbzevXq5bR+p06dvNGjR8c0OiGEEEKI7LHTTjt5Y8eOTXSb+Eo1
a9YsVEz2lVdeMbHRU089NcKRhQefAmKiPXv2NOO77777nNYfP36817RpU9WV
CSGEEKJKgG5ad911nfIvv/zyS+/ggw/2evToEXi7zz33nNewYcPA68OwYcOM
3rv11ltDfU5ckAsaRI++//77Zj3pUSGEEEJUBZ544glvyy239L755hvf6zz/
/PNGL91www2BtxuFHmVOvFq1at68efNCfU5c2P3kqkfxf91qq628Rx99NKaR
CSGEEEJkh/POO8+rX7++0zqXXnqpt/766zvV6RQThR5FR9eoUSPUZ8QJej2I
HoVGjRp5ffr0iWFUQgghhBDZYv/99/elR+kf9N1335mF99PHifr2yZMne8uW
LXPeblg9+vbbb5s8gxYtWpS8NnfuXO/www/36tata8aWNhdeeGFgPUp9WVi9
LoQQQgiRdfC+p0elHz06bdo0kzOK3kNjHXjggd6QIUPM8tFHHzlvO6wenThx
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
37vu97ihFw+xRsZGrJRnDxeo5cHLPihB9GhWYH8R261M4KPFdzFnzpy0h1Iu
aNHTTz89kW2hPamvL+Syyy4rybUl7+WZZ55JZCzlYeO4eKMmrQuZL0nq+xAi
CjhHeI5i4dzBAwevNPx7yVEfMGCAyckqz+MaLUqsKWn/OQt/AzEHajCyPKdV
GoU9aniWddHy1FLTFzEIxJ/s905fG2owmb9m4d8333xz4HqULDNlyhST40++
Gf1CW7VqZeZRea1JkyaZ6ctI/qM9LpirdZkHZX5u6623DrztvOpR6+Ff2fLl
7Hw/1+csQ1wbb6GgecMudOzY0dT3FUI8grjpDjvsYM7ztCBmy/WE50LyTpgH
O+KII8xrLEn5HZMD7icPTIisgJZjvpu8Kzvfwb0aeB639RV4apQFPsSuWioO
GjRoYHyR8wT7jB7M9v5Pz6AkWLBggfnObY05C31W0GNoVFtnFXTeVIQDzwXi
32nkCZMLmEc9amNR9MSpTORFj4I0UDbg3k3+RN7iM0JY9tlnH3PdI9/egl7l
vkgNb2l5OeSNbbDBBpH4YIfliSeeMLlzb731VtpDccL6ZbMwf79kyZLEtm39
SNDyhfNJ9C4JktcqooMYjz0uyOdISmcVbjfLehTdgx+aBd3WsGFD0zuyMpEn
Pcp1I2lffLE2bdq0MXNvQuQRelUQE+O699FHH63xO2p1eR2PjWKYp6d+IKm6
yvJgnoh+HXvvvXfaQ3GCcZMLZTVAkl6D119/vdlmhw4d1njd1qu2aNEisbGI
NeH5gJwCe1wceuihieSgWT3Ks10WzuvSoI4RrytyGagjfv31182zXFjf1SyS
Jz1KXhe+9ORyinTg2o03K7EiIfLIwoULzTWPGH9xrujf/vY34zFdnE+Ibt1o
o4283XbbLcmhlkv37t3N34GvfJ4grsA1xNawWF/xuOnSpYvZJj1kCrFxUz1j
pwvzbvTNtprU+tvEidWjYWr0k4Ac54033tg74IADzDxx1rwnoyJPehTwEuDZ
4Icffkh7KFUS4kdZmK8UIih2zhh/4UKYO8ZXrrQeD/QPYh3qn8qC+ylaq3Ch
xyVz/8Wvs9Bnl9xG/s19ES9pF/BlLsyBzRO2PpQFD8ck2Hnnnc32/vWvf63x
eq9evUyNdtZreqsC5Hfb44JnQ5f+2UHIix4F4qRJ5rekQd70KFCPF/dxKtaG
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
     "], {{0, 89.25}, {507., 0}}, {0, 255},
     ColorFunction->RGBColor,
     ImageResolution->{96, 96}],
    BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
    Selectable->False],
   DefaultBaseStyle->"ImageGraphics",
   ImageSizeRaw->{507., 89.25},
   PlotRange->{{0, 507.}, {0, 89.25}}]], "Input",ExpressionUUID->
  "ecaf099a-8eb1-aa4a-8df4-a43c1691d819"],
 "\n\nL\[CloseCurlyQuote]obiettivo del setter \[EGrave] scegliere una parola \
tale che la probabilit\[AGrave] che il giocatore vinca sia minima. In termini \
probabilistici, vuole minimizzare la probabilit\[AGrave] che il guesser \
vinca, cio\[EGrave], scegliere una parola tale che la probabilit\[AGrave] \
\|01d443(\|01d464\|01d461) di indovinare tutte le lettere sia la pi\[UGrave] \
bassa possibile.\n\nLa scoperta interessante \[EGrave] che, per valori fissi \
di \|01d45b e \|01d458, la funzione \|01d443(\|01d464\|01d461) ha una \
simmetria rispetto a un valore di \|01d461 pari a (n - k + 1)/2 (questo \
\[EGrave] il punto in cui il gioco \[EGrave] pi\[UGrave] difficile per il \
giocatore).\n\nAd esempio, se \|01d45b = 26 e \|01d458 = 7, i valori di \
\|01d443(\|01d464\|01d461) formano una curva simmetrica per t = 10. Quindi il \
poser pu\[OGrave] scegliere la parola con \|01d461 lettere distinte intorno a \
questo valore centrale per massimizzare le probabilit\[AGrave] che il \
giocatore perda. \nQuesto vuol dire che:\n- Una parola con 10 lettere \
distinte \[EGrave] la pi\[UGrave] difficile da indovinare.\n- Se scegli una \
parola con 9 o 11 lettere distinte, la probabilit\[AGrave] di vittoria del \
giocatore \[EGrave] uguale (simmetria).\n- Se scegli una parola con 5 o 15 \
lettere distinte, la probabilit\[AGrave] sar\[AGrave] pi\[UGrave] alta, cio\
\[EGrave] il gioco sar\[AGrave] pi\[UGrave] facile.\n\n\n",
 Cell[BoxData[
  GraphicsBox[
   TagBox[RasterBox[CompressedData["
1:eJzsnQe4FMXSvy8KCiZUVIIiIoooIhjBiAEFzIBiRkFBUQERlWDWi3JVzKKC
OQNmETDiZw6f4TNcI+acc9b537f/T+3t7e2emd09u3POUu/zjHJmZndmemdq
fl1V3dV+yKj+wxb6xz/+Mabpf/7Tf/DYrY48cvD4AUv/54/dR44ZfvDIoQf1
HXnU0IOHHtljyML/WTmx0T/+cdx/9m/8n39HiqIoiqIoiqIoiqIoiqIoiqIo
iqIoiqIoiqIoiqIoiqIoiqIoiqIoiqIoiqIoiqIoiqIoiqIoiqIoiqIoiqIo
iqIoiqIoiqIoiqIoiqIoiqIoDZA///wz+umnnwrW//LLLxmcTTr+/vvv6Icf
fqjz5ddff807zm+//WbaB/7666+C7dWAY1biWut6kfvl559/LuneoX2zvoZi
l99//917LWzjHg1BG2V97uUu2AzuTa5F/s3zEoJ7Iutzjvsd5Z7l36Xeww3t
PrbvQ67bvZ9pgz/++KOm72P7+kPtY9/X9fk+jvt9ZZHnlH//+OOPefcs7zp5
59XH+9j+jbg2+T3E1tq/jewrWiGOLO5jaftqM2XKlGiJJZaI+vTpk7e0atWq
YF19WXr37h1RNriul5VXXjnvOJ06dYp69Ohh/t2zZ8+offv2Vb/Wdu3aVeRa
63pZaaWVzPm2aNEiatu2bdHXSftmfQ3FLl26dPFeS6NGjcw9GrrWli1bZn7u
5S5LLbWUeR64lubNm0errLKKeV5C18yzlfU5+5bGjRtHnTt3zt2za621lrkm
1xakXbbYYovMryntYt+H3bp1i7p27VrwDmB96FpXWGGFzK+hrhauM9Q+3BNy
zdwnWZ9rKb+vLDyna6yxhvl306ZN8+7ZTTbZJOrYsaP5/+abb575+cf9Rssv
v7w599atW0fbbbdd7t/uvqIV4p5Zvqva10I7Z8EJJ5xgjj9gwIBoyJAhRS07
77yzuS9822jvffbZx7z/99133+B38Czx3tx///2jtddeO1pyySUTF941xZ5r
fVs23HDDaODAgd5tPKe8S7GnofatteXwww+P5syZE82cOdP8PXLkSPM3y9ln
nx2deeaZ0ejRo6Ozzjoruummm8w+06dPj0aNGmX+PWPGDPMZ7mf5Tvvf9Wm5
7LLLcteWdhk/fnx0yCGHRLfffnvB95122mnRMccck/l1hZaddtopOuKII2Kv
7+CDD44mTJiQ+3vo0KG532/q1KmZX0PaZcSIEeb8uR+5Z7l33X0mT55s9pF7
t6Eul19+efD35LdkH37XO+64w/z7n//8p9k2duzY3Hdcc801uXv3sMMOi847
77zMrytuufDCCxOf1SuuuCK65JJLopNPPjmaNWuWed6zPu9SlhtvvNF7fdhg
bLG9Dtub9fmWumBfhg0bZq4D/xf3bFq7zL1rv2cmTZoU3XzzzbHH472etd57
9dVXMzm+oiiKoijKggD9nqz0Hr431XuKoiiKoiiVJUu9h+9S9Z6iKIqiKEpl
Qe8R0/3yyy+rfmyN5yqKoiiKolQe9N6KK64Yff/991U/tuo9RVEURVGUypNl
PPeqq64yeo/xRIqiKIqiKEplePjhh6NmzZpFb731VtWP/dJLLxm9d8opp1T9
2IqiKIqiKAsKr7/+utFc//d//1f1Y6veUxRFURRFqTz1Qe8xR6SiKIqiKIpS
GeqD3lP/nqIoiqIoSuWoD3rvjDPOqPqxFUVRFEVRFhTqg97T+VgURVEURVEq
h+o9RVEURVGU2qY+6L2LLrqo6sdWFEVRFEVZUKgPeu/GG2+s+rEVRVEURVEW
FOqD3tN4rqIoiqIoSuXIUu+de+65qvcURVEURVEqTJZ6b+rUqar3FOU/fPnl
l9Gff/5ZteN99tln0U8//VS14ymKUptgt7Bf1eK3336LPvroo6odr5a48847
Ve8pSkb88ssv0aWXXhptvvnm0Q8//FC1415++eXRuuuuG73wwgtVO6aiKLXF
e++9F/Xt2ze6+OKLq3ZMtN6OO+4YjR49Ovr999+rdtxa4IknnshM702aNEn1
nrLAgtYbMGBAdOCBB0affvpp1Y9/zz33RCuttJLJq1AURSmGefPmRaussko0
Z86cqh+b2MQuu+xi+skffPBB1Y/fUGEulKzHazzzzDNVP7ai1CXvv/9+NH/+
/NyS1O+0tV6WfVRsdaNGjaJp06Zldg6KomQHcQXbdpHrkYRovaeeeqoKZ+gH
zderV6+oc+fO0ddff53ZeTQk/vnPf2au96ZPn171YytKqRDD6NGjR7Trrrua
/6+33npR27Zto7Fjx0bDhg2LVlxxxWjttdeOJk+e7NVyP//8s9F6+Na+//77
DK7gv/z111/RQQcdFC2//PIa21WUBYBTTz012mKLLUwcFtvVvn17Y8uwX5tt
tpmxS/369Yuef/557+fReksuuWR01llnVfnMC0FDLL300tHw4cM1tpuCLPXe
jBkzNJ6rNEhefvllo9u22WYbcw/vscceuW0//vhjtPPOO5v1Rx55ZMFn8aWx
rT7YS3jyySfN+Wy00UZZn4qiKBUGXxh+vEcffdQ89/j30U3CfffdFy222GKm
D/jmm2/mffbXX3+NVltttahly5bRd999V+1T97LDDjuY65g1a1bWp1LvyVLv
nXDCCTWv94jb9enTx/SnlNqCuMdyyy1n7mE3B44cBdZ36dIlr99JrsnKK69s
tn388cfVPmUvjHfr0KGDsftZ5OIo2XD44YebMTvvvvtu1qeiZMBJJ51k7FDz
5s0Ltu20005m2w033JC3Ht8g64kJ1Beuuuoqc074JtXHF4/Mgad6rzLwfuca
ifsptQXPDL8tC/Ma2YjeW3TRRaMPP/wwt/6yyy4z67t27VqvbNOYMWPMeXXv
3j3rU1GqAH4a4ngrrLBC9MUXX2R9OkoG7LbbbuaZ33PPPQu2id479NBDc+vE
t8f6m266qZqnGgv2lZgu53X33XdnfTr1mizn36OOWq3rvbPPPttcI7lcSm2B
zeO39b0zRe9tuOGGeeu32247s753797VPNVEpI/crFkzE49WahuJ5fne9Urt
8/fff5txDtwD+PlcRO/ddddduXWS97HQQgtFjzzySDVPN5FVV13VnNtxxx2X
9anUa8TOZ6H30EC1rvd4r3ONzH2h1BaMuRBfncu4cePMttNPPz23Dl8vec6+
+C+gs3gWZKwZfzPutxrccsstOV/l7Nmzq3JMJTt4L/Jbk8+jLHiQfyzP+803
35y3jb4rdopcFTtHT2IASy21lPc7Gcf2xhtv5P4mT6Bac7pjgzm3DTbYoCrH
a6hk6d+r1XguOQ+nnHJKdPzxx0dLLLGEuUbGrpPLdfLJJ2d9ekod0alTJ/Pb
HnXUUXnrmcu4SZMmxvbY8wQ8/vjjORvr03sTJ04029q0aWPuFeJt5EWj+xgr
h01jvb2MHz/efLZnz565dZtssokZd1sM2GU5tyOOOKKE1lDqOw899JCxSyzk
a/Jbc39xz+y+++5Zn55SRZgTQ8ZqfPvtt7n12CvGbaHpzj///LzPkIce0nvo
QsZ3LLzwwjk7xJiPM844w2wnLuzaLsYGMx6Ec7HXX3nllUVfD2OLJT5h588o
+dx2222Z6b0zzzyzJvXeO++8E7344ou5fNj+/fubv1n0XqwN6Cctssgi5vdl
DirG5Tz22GMmJwZ7ePDBB5txEDZJeo95sMQfLAvPiMD85Nhn2YZvRvQkfkDm
glljjTXM/Vcs999/f+57Bw8eXPTnlfoPc3pjg8SXu/rqq+fskjsOU6ltmPeT
ewANB9gP6vwwFwvjyYjdusTpPSD2i8YTO9KiRYtcbgjfv+aaa+a2tW7dOnrt
tdfMNvIC6YuQg0fMj3kPioXxkPLdpdi/BYXzzjsvM73HfBS1qPcEyd3T+QVr
D8l/YiGHmbw8/Gr4rEPz2CXpPWCeBPqost+oUaPyttP3lm1777133jb8f1Om
TCnpemz/nuq92obcK59fWllwkDxitBt2i3FaaEDGk4XmWUnSe8A8eGJHiG3Z
Y78Z+y/biH/QzxBuv/12M4dpKVoPxL+nei+eW2+9VeO5FYLng/GZ2neuPeTe
7dixo8mFoY+aRBq9B/gGZb/FF188Z3+Zm7lVq1Z59hS/IuCfww6XWrecuWHk
exlHpdQu5JnwO+PnUxZM5FnHJ5G2Hlkavff222/n+fjs8RPi35GFuV2ELbfc
0uQ8l8ohhxxivpMxKG5cRfkvxOiz0nsyvrEW9R5+bN7Vcc+G0nCRsRrrrLNO
6s+Qg9e4ceNEvUdNa/JgxC5OnTrVrCe2S81ImfOPhfFWgK9vwoQJJV+PjNvS
8Rq1j/iIa9HuKsnYYzVmzpyZ+nMDBw5M1Huw44475r6fcbO8C8kRXGuttUye
qGwj/5m4AnM9E98tZz5SGZ+r4zXiefrppzPTexITO+ecc6p+7EojvhzNg649
yIMSzVVsTEziKEnzlTJ3qNjFjTfeOPrzzz9Nbh42kRxo2cY4jW+++SZadtll
S/btgT0fC3mESm0i9y65e2l80krtceKJJ+bsRzE1MuiH8hnyluNiVg8++GCe
H4+6F9QUotYQuo96k7KNWh749WTcWamI3jv22GPL+p5aJ0v/nszHkmXN5Uoh
16a5e7WH1H0u5d6VWmqbbrpp7H733ntvno9vv/32i/baay+zjTkPyH+RbYwH
Kse3B+hW+S6ldtHcPUX8dDJWIy32fMtx84v98ccf0dZbb52zT/iTiYNIPd4h
Q4bk9WXx+5Xj2/voo49y8y1rDfB4spyPRd6btRhXoBY1/aC33nrL/E3ODP5M
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
999/n4st/fLLL7nj/vzzz7m/ZTvX/9133+XOj7az/y514RzqG3///be5XkH+
/euvv0bffvut+T/txL//+usv83/ZHnettRDHE7h+uUf5v9w78qwoDRueS7mv
QX5T7EJ9vo85T57ftLCv3LNy/+o9XP+R3wf7+9NPP+W9r1gnvyH3MO8q+51m
v8PqG5wzOSDkRfB/nw4QLSL3rn3f+rSKm1NSabKO5+JjJBdDURRFURRFqQxZ
6z3icPVRyyuKoiiKotQKWes9Yve1NG5MURRFURSlvpG13mOcwfvvv1/1YyuK
oiiKoiwoZK33GHelKIqiKIqiVI4s9d5dd91l5vz46KOPqn5sRVEURVGUBYV7
7rnH6L1p06ZV/dgvvfSS1tdQFEVRFEWpMK+//rrRXMxFWm1U7ymKoiiKolSe
LPUe89mr3lMURVEURaksWeq9F154QfWeoiiKoihKhdF4rqIoiqIoSm2jek9R
FEVRFKW2Ub2nKIqiKIpS26jeUxQFHn300ejjjz9Ovf+bb74ZPf/88xU8I0VR
FKWuyFLvzZkzpyb13jvvvBPNnDkzGjlypJlTWqkbHnnkkWjUqFHR3nvvHd12
221lfdcDDzwQHXLIIdEBBxxgfquvvvoqdv9XXnklOvnkk6M+ffqYmjBDhw41
63zwXVOnTo0GDhxoFuY05zlL4s4774z222+/6PDDDzfn9Ntvv8Xuzzzl5513
njnGWWedFb333nve/c4+++zcubAcddRR0RFHHJG3vnv37tGiiy5qvvPBBx/M
23+fffaJ/vWvf0Xjxo0z58a6XXbZJWrUqFF07bXXFhyPzw8fPjzq1q1b1KtX
r+j4448Ptu+///1v065yrMsvvzz67rvvEttKiefee+819xD3ad++faPmzZun
qlvJ78Tn+M2mTJlShTNdMPj6669zNgF78Nprr5X8XXfffXfUs2fPaIMNNog2
2WST6Iwzzoh+//334P4ffvhhtMcee0Rt27Y1+x955JGJ98Kff/5p7oMzzzwz
Gj9+fOpze+ihh6LTTz/d3DtJfcH7778/Ovjgg6PBgwdHs2fPTvX9c+fONXMF
c19///33sft++eWXRtfYtizpOJ9++ml04YUXmn1p14cffjjxnGhf2mrMmDHR
9OnTU11HVmSp97j/a0nvzZs3L9p9992jDTfc0FwXC9eolAe257DDDotWXXXV
6Oabb47mz58f7bjjjlHHjh2jTz75pKjv+vnnn6Ntttkm9/vIsvjii5vfz8e5
555r3pdrrrlmdNNNN0V//fWXeR+y7sknn8zb93/+539MTegtttgi+uGHH8y+
V111VbTYYotFkydP9n4/NgxbvNtuu5llkUUWMefUsmXL4LNx++23R+3atTO2
lf4F57jQQgtF119/fd5+f//9d7TSSisVXK9vufjii81nDjrooFT777zzzub7
7bbdf//9zbYddtjB2HvagHfTeuutV6D5pLbPsccea9rp22+/NTqUdn3iiSdi
f0clHubR593De4s27tSpU95v5cIzhe1Cn8vvS39VKR9sAu1/9NFHm/7N1Vdf
bewBWqpYhg0blquHxe+JP3611VaLdtppp+iPP/4o2P/WW281dmHSpElmfxZ+
Z2yCT/OhG9nev3//3H2w9dZbJ54X99sKK6xg+oz0C7nG5ZZbznsP/fjjj6Zf
u+6660azZs0ybbL55psb/You9jF69GhzXksuuaQ5p5VXXjlW79HnpI232mor
o62xL59//rmxbdtuu230yy+/FHyGtl1//fWNDeZ85PpDbfv000+bc0JDy76l
/KbVROO5dQ/PFH4grg0fplI6tOXEiROjhRde2GgcAbvUtWvXaPXVV0+t+X76
6SejEelTokX4bnxq66yzjvmtll9++QJNct9995lt+L/QI8KLL75o1uM7EbBV
aDR0KTrHZsaMGWb/xx9/PG89PkJspH0N9DHxO7I/NhT7aIMPDk2I3kILC+ef
f775zA033JDXfqzDF9ejRw9j+7FR9rLRRhuZdhQ9IPcu+/N/tKu9P8flnF9+
+eW84+A3YH80m60t6CeznvMT6NuzDn1o78u/hwwZYvSv+vnKB9tKO9NXSQPt
j/+3Iby7GgJiE9APtk2g31psG+PXa9KkiXlX28/Mc889FzVu3NjoFXs9fqdV
VlnF+B/QO4L0AXnGQn0A1tNPlWc0Dmwo+6211lrRZ599lltPH9Rnj9CAaDG7
f03bcK5xmg9kDjdsdgj8ei1atIiWXXbZ6Isvvii4rl133TU65phj8tafcsop
RtdKe/D/Z555xthFjoc/MQT74j9lP/wB9Zks9d6ll15ak3oP0AGq98oHnxHt
yHPngl+MbQceeGCq78LfTjzYBRu1zDLLmO+iPyzQf8SHRp+S3DYbtB82E80p
EAfgO/C5+WB/rgPdKRAf5TPYFhe5h9wYhPjQ0Ewu2Mw2bdpE7777rvlb9N4H
H3zgPScgri2+PUDvxdVXRHej+Wzwc4oddm0sMRH0pm1j8f+xP/bbRfqB9MXj
fFJKMsXqPcAPpXqvbiAWSltec801BdvwC6FJ0Gtp2H777YO17sUvS/9UuOCC
C8w6fHsuxBrYRh8tBD66JL2HjaSf7Pb/4JZbbjGft20udol1m266acF30UZs
i4sfc+1Jek9sEX10H7QHfVgb9CF5Or/++mveevrhTZs2jVq1auX1CQp77rmn
6r0ETjjhBNV7Siz49mhH/P8uaC620VdM8vGhG9AYrhYRRowYYb5r7NixuXVX
XnmlWYctTQNxS/Z/6623vNvJl2M7/xdE76EVXa644oqC2tb49rCtrLd1o7DX
XnuZbfjU5LrRrCGwb67tw08Qum/F/+badunfkkeYBDEoYrb4WkMQc6lV21BN
VO9lB34qdAJtydgmF/qfrh4KQTwB3x7+fjd2AOSX8F08uwJxBtYRT3YhzsA2
fHwh0ui9CRMmmH3oM7rQV8ePaffpuFb2x4fs8sYbb5httFnIx5dG74l/mriF
r7+IzfXpPT7jyzMWW+TGWWxU7yWjek+Jg1gleV+0IzEDH9ttt53Zftlll8V+
FxoDHx6xUh+MR3D1nvSn8UOngTyaOL0nNpZ+vUDuCvbH13fkmtgfP6aAH07y
43xInzpk62zYTmzb9u0l4fPtYZuxl82aNUuVhy52PU7vyfvr1FNPTX1uSiGq
97LjjjvuMO1InpoPclTZjt3w9d1seA7Yl9xjH8R6RSvRhyO3jNwN1vnGfYnf
35djIiTpPb63c+fOZh/GvyWBXhIb6eY9C4zxirP3afTeU089lbs2+r1uvgjv
FDs3COhTE7/2QZu3bt1a/XtlonpPiQO7Jc9tkt6Ly68QiCHgmz/xxBMLtjEe
hO8RO4BdIFYrMUe0J7nF2D7yP9BIblxFbBl6xofoPfLikrQY+Ta9e/c29s+2
14xlS6P3WOycHR88+744eQh+D87H9e2RJ8TxiCMDeXfYT9qJsb2MISFXWhC9
Z+cMuojeY+yuUjqq97KDcUhp9F5SvgXgP4uLNYjeE7+/aE3yKJL0Hj44H0l6
j34e24lJy3fie+R5xw6RY23bIMaHyDGT9B5t5yON3gN7vAV9eOLOMu6Pd3Oc
drPhdyGewtiyOBqa3sO+VhvVe0occm8SxyCO6UP0HtooCZ579kXz2fcc+oTY
hx1HEE3CwhwDaDT0H3PBiO9/qaWWMnPECOT7sp4YtA/Reyyh68E+YmP23Xdf
k3/izuMixyC/2Iet995+++1gW2Cbif0Qj0kLc+D43l3MCSN6jzxExuXxezBn
C3nkbKPtRPMRe1966aXN+lDukui9JLuuxKN6Lzt4hkOxTrD1npsf7NKlS5fY
3DZb75HDR64s/2a8qT2mS7D1XiiHL0nvMdeY6D1it4MGDTLPO/Zavpt5mUTz
YStZh/1kTIUP0Xu+/B1Iq/eIy3Ltch6cIzbeF0f2wXjcxx57zPThGV/iG59r
09D0XhbzpqreU+Jgbre0/j1itUlgk/ADMgbMztMQ395FF12UW2frPcadoaNs
8DuJ5pN57/D/sY4xE/ZYXuHGG29M1HunnXZaLg6Dz92NjzLXS1r/XpztwQeA
bU47vzLvhy233NKbdy56Dx1Nrgu5RvZxRKPiXxXbL3mL+P98fkjeHar3ykf1
XnaQr5DWv2fn9PqQPmZSPJcFnSZaM008F63iI0nvyXhL5rJizhLe5+RH4zvD
1jEume2HHnqo2V/GiKTx762xxhre7Wn1HvqMnGy0p60/0X2MY0mKr0hsh3xJ
8rjdcRwuDU3vaTy3blG9Vz51rfd8YHf4LPrCxtZ73Kcu+ASZA4rtJ510Um69
xFvJ0aMPi10hrsFxZN6XOL0HxI/Jq2M/xr4xXlWoK71Hv5u5qdJC+3NsOy4r
iN5joU/swjriSmwntwaI+8hcB/gixJ7yf353mWdL9V55qN7LjrrUe9iBtHqP
50f6S2n0HjELH2n1HouvH0g8gG3EQ8lTrpbeY74F/KHM20Afn749/XP65nJ8
xpUlaT7alL4++/M+j9N8qveSUb2nxEE8Mq3eC+mfOETr+WKatt7zzRkC5AFK
rNIG201/HI2DfcZ24Ve09Wuc3hPoF4vmk7FhxEnT6r1QThB2i7532voJ2EXe
CfThfdjx3BCMH2EfezwMmo93Ce8DtCTf3759ezNWGVuteq98VO9lh/T90ug9
6QeFkPy9NHrPzt9Lo/dKzd8Tvcez65v3AD8f9x37MB5O5klJo/doOx9p9B7z
JZPn6I6Bof8t4//StDkwvg/7zf7MDxVC9V4yqveUOOp6vIZNnNaDNHpPbI+r
9wTmx+O8ZbyuzDvMXPvYQvJqsEmhfiZ+PYlFYM+hLsZrYMeJGT/77LPe7S74
9Pg+Ys0+0ug93/hngVxq2olF5szH98j++CGV0lG9lx2VGK+RpPd4rovVe6Ha
lGn1nozX8CF5hMzBXo3xGuhO+tqhMccyFzPfwXzQQPvE+e6kX09sNzTOQ/Ve
Mqr3lDiIgzI/VEjvYbOkNlpoLL0PxhQQi/XVOiTvhLmy8Kfha4rTe2JT6TMK
6C07f82mX79+Zn/myAP0E3/H1Q6TcQ0y3wyx4zi9xzVJPNmnI1lHLTrqc6SF
vEa+0ze/M/zv//5vot5Dt7GP6GvyG/nNfPNdMWaG+Q9CcSIlPar3skPqhYb0
noxfwH9E3DEOiQ2E9J48ozJXEmOiZKyUT+9J7IT+ZIgkvSfz3cfpPeKmovfQ
WozlCuk9+qeS8xKqc5uk95iHhu0y37wPyR2WHB7mWeb5CGk513fqQ/VeMqr3
lCRkHmS7Fpcg8y2TL+zLK/NB3h3z6oXqYDOmC/0CjC/l+31zIYOMIRW/FzqR
uZ99WsxXw0OujfxhH+QcMy8x+8i8+WhP7Dj2zjdmTOZbDuUDoaHZXozek7n7
Q3rvm2++ydXOpD6cD8bIEN+W8biXX3558Npl3B9aN+14EsWP6r3sYBwXeaj0
LX21AWW+5TRjRvFb8Tzgm/LVjZXxGehCQWIfvueWOVPYFsrdgzTzseBPxP6G
ntPNNtvMfMfMmTPN33F1xySmQr8xVEsxSe9hu7EzcXpPfKUy76ho0NCYYenX
Ux8p5AdUvZeM6j0lCfqh1M5lPiUXGQ+LLrPBh4VNdPUQNoTxo/fee6/ZzkK/
Gl8eOgj7RS0K0XtoQuwZY0hdiMUyRzsaTmwd+pM5XcgLdu2f+PLoS0o/Unxx
ofmOJV6C/bP7lVKLzJ0HD7BJtFcoPiQ2Na3ew75JznJI74HErq677rqCbZwL
bWKPD2GOG/anJokN7Sp1StDDSnmo3ssW8kxoS2yOCzmt2Bd8UjY8c+zv5mNQ
p5HvQn/YYOfQXMwLYOsR+lZ8v28+GObGpN/oHtsmTX0NybO154QXsFmMyaIv
KPNckTPHOQ0YMKBgf6knFJebkyZ/D/vBmFof2BfOh/xlmUOB9wc2M6T3mJeA
Y8o4Yx+q95KpVb2H3pAaLKG8MyU9o0ePNnGH+fPn59bRxugw/F9urjD+M9re
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
9AXfSq6RszyMybShOZwtSr1nfNkHLSiHzXGeyRah937913+90+3ipv42lmv5
Dku9N7ZOmPujNUfr7LPP7t7/0Ic+tPm+Uu9ZowURR7ZddNFFi463NoHXzfUY
Q3vJuZar0jeHlk03Vo22Tb33n/nia6H39F8bSe/RdfIPYi0kvhO5sLe73e26
e6GeU5WMY30p94jxYItS75mvNYTn3nFsRItS78kNFsOc6t+z3sEQ7OkznvGM
Ja/Lw4t4dN8aWqH3SttjjGweW5nDzObpp/lC6cshzIczJndfGv+28vG1rXls
Ze6PXO7Ue1sWU/Qev4r95lVH38l3bO6Ze0S8LvwzyXRifpNYbItS7xlL9WHu
RBw35t+zmfsQec9T/HuHH3744HUYz6qPUBMx5r56DaXekycMtuZpT3taZ6dK
XUeTbbPNNt34cmhtVeNU/j/vf8xjHtPMUYFrlutYzkehS2/pei/qXGxuvXdL
qadmvpvrFGPLeW7zEXpvSjx3qt6bEs9dTb1He7FhLf9j6L0p8dza9phXX47b
Qy/ps8fwzFnDgC8gYkDlvclmsc+1/zBynlPvbTlM0XtDxBwnfetYjlmymNB7
U+K561Xv0QV8vq18kNB7U+K5ofcC92XANxLrXvX5LwP5BeJl1m+isWjEev0p
8BW6rjKvm068pes9vvrUe5uOUpPk+vTzEfPXpug9+SBDWEtzqt6TK2c9lal6
r5zTWyMHUWy/lc8c62lN0XsvetGLer+Dr5y/T3xkHntDi4bmO+aYYxZeNwfP
Wjc1mb+35bFSvVdqknKN8GSc0MpT9N7Q/Hh2Tgxgit6Tn0GX82tN1Xt9nwlz
cvvGs+zAVL3XWn8AtB77KTbxmc98pvc8WsjJDs1HEwdlzl6J2ki3dL23Vuvv
bSS9x8fcl0Pgfg4/8pgPKlnMRpivYR1ktfRaLGe+Rg2tJ7dnil+vRfQ58g7c
w67Vd7pXrTtabrG2BB1nnf++tSFS760fpug9/XK5bluJuK7c5DEfVLKULX2+
Bp8/W1COBUuWM1+jRN/I70frjfn1+og19YznwY6Lp9DP7FC5WVMq+mHt01f/
YyPrvRizp95bHnL5zdHo8/H4/eVBTfFBJYthh6boPVqlXNu9Rcz9GNN7Ygps
g7wQcYw+vceGRj2gvnx2MRBryZx22mnN/daAiXXZx/Reaw15Wo+9K+tyBOEv
sHaLnOa+2pQ0XthkcRLXYh1Ym7kt5nTY+Be1s+PkQNJ7Bx98cPMzU++tH8b0
nn7W89WnI/hIzFka80ElS4lcqTG9NzQnLIi19Pp+p1ib3bgM1lcKDdLSe+Ki
9lmPpW++lt877EIL64lO0Xv8b3VdxdB6bEyt9eQymzPnvOQRmBfSR9Q0Mq6G
dRDCnrGdYctizBKv+7tvDbWNrPcyf29lhA9KLnsLdaviueLPSaajrxGnpDNa
ekX9M227zz77jH4WPeVzPOettfrUBvdZpQ0wr85rrfn+sXZA39paiPXf+/Qe
oo5Qq87stdde29kRNTDq7/D9+pHW3AyxjaiBEdfQWnMVMV9L27RiziVhKzKe
u+UwpvdivW/rK7awjq79xi1lTa5knJhLb63glv80coTH5vcj5sb3rZMY63SW
63+G76usQxnE2sZ9c0kQ+bp9es94m90wRm7lpkffaL34GrZbPl1rboYxKt8o
beD9ck76CL0Xa0b5PDraVt6v/NTWz4h4rvUQ+ua1pd5bfTaa3utbDyTma7Tu
+WScaL9yXffA2sN9ftPWvK3I4WvFftXksa+cz3X99dd3tc5a6ylEnST9ZR98
YGN6L3L41PeoiTnsde4e+/3oRz+6115dcMEFC3ov6tL26b3w74/NMQY/Yeq9
LYupeq9vPRDr4075zZM2kcPXihFE29Z+U9qpfrZpK3HP1viST16cgHYr59Sw
mT7f3IWamGuv/2pBt1hfeUjvIXL4WvWPwv5ZD6DE/Aq2pG8eLg1H7xmji2P3
6T1+S2Ne39Faj7mGfgu9N8RG1ntRBzT13vK47rrruvFN7Rvxu7tv5NmK92au
8/IwRuPjszZ6CR+d+W/8+OWa1uydNea1eb0GjnvNeLTOo/R+6+n8zu/8zpL1
ZeXFiOuWNSDZGT5Fcc0+3x6saTam94wzfbfcuHr+o1gH3165bh+tZ/4Hv6A6
6c7D5v8vfOELuzm/bGTovfDflXWBA2NgsQ33qPjJGDk/d8tjTO9ZT1t/Wvtn
PF9R857GGIs3Jm3EdPj46rnu4j6ePXatjjdY25i/rs4v4/ei62Itu0B+HRvZ
esbZFf7Fcn1PNo59POSQQ3rPu87z6OPmm2/u8gHUGyjxHewfn1q5LjytJ75r
XUB6iu3iCxG3ZbtsriXay+fa34pJx5wUtnBKDWL38S1d76V/b+W4BmM1PprY
5LKL4dIQ+tVk+XzqU5/qbASfmrgu+2HMSifVbeu5DztlfFljfXG2VPxWH6cf
Y2PYgtYzwO5ZO8+az8awck38bdxerinQIup/D9U/Az8iTWmdZHbZd5rPRteV
fmO2NdbxHttC78nLVtPcfDV+UJ+hbgJbr7+Rgzi0tpo2cj+bk2IdNp+t3b0W
a0CDPyLufTY6YoCuie52PXW/pt+K99Aj3mMOjL+9Z2wOTtJGvx/tSjtEDixf
nnbl0y37T78Df0tpv/THxkbWRHLPJMvHvW9MJS9EXFd+mrmifOqttuXH85uV
z1egv7YeqXxk7xXj8Gy3cnjBD0EvySH33NOf+iZr4PWt+QnPPd2lD2vVxi0x
H5ZNZefYLuNncRk6zNy3wPez41PsV+g9n+cazXkr7082xv3JLg+tVe06tBO/
jLGzzxbL8VoZ75VrHZ8dfkC/mfb2zIiZlFqOnjWOd3ys42wz5na819djbZrU
e6uDObpiZvo3G9tqXfJkdaCtrM9iHGieFdvSqlUnD5j/iW6go1rccMMNncZj
9+TrGSeOPZtyceTb+G2n1hswllXXY6y2L773ve91GpatcU7qW9UxaW0Q99fY
Vq5PADrY6+w822mNwdIW96E9tWNrK/Os+Qd9Ph0d+60PU55TPQeRfve6dRji
PexRHJ/zQZeH/ln7vec971loV/1V+Vv85Cc/WfQevw1/Xux3324U27weMN9K
XME4y1jRs9FnF8z9s6ZDn50Ra6DZ/U405JR1ET3r1mn3HnXHp+D+8T1ToB+c
N9vFhtGjdb1HWnOq/WJvS8w/KW1D2LixNW3Z1b7vKOe+GBN7jU81nplo49jK
MZLz85q5JHE83Vse38qbXGsynpskSZIkSbKxSf9ekiRJkiTJxib1XpIkSZIk
ycYm9V6SJEmSJMnGJvVekiRJkiTJxib1XpIkSZIkycYm9V6SJEmSJMnGJvVe
kiRJkiTJxib1XpIkSZIkycYm9d6mQR2ben3xZGWoZ2Od9bpOw+bCuvRDtXtW
A8/D3/3d322yz1c/ThuW9TTHsJ7/ajynavlajz7ZvKjjMM99qzaeehBqDnz3
u9/dhGd2y0JtMM9eXTdnXtTTVifhVa96VVfDaUp9jcD3q7G4KVDDx+dvyjpi
6mn4DnV8/DtWu+jb3/52d5xtal3A//t//293/FC9uS2V1HurBz2izpeauWqQ
qyujZteUulVJP9r1sssu62p/q0X0pCc9aXbQQQf11ksb4xOf+MTs8MMP72qz
qXc4Vh9N/TU1yPyu6jbuv//+3fnMg/7Tdw7tf/jDH97VilPz7FGPelRXZ6wF
raZWj5qZUYPt1FNPHfx+NXKPOOKI2V3veteFGrjed+211zaP14e89a1v7Wpv
br311l2ddjVu1YpkD0v0X/aV23Of+9zZXnvt1dVvjdfUcFXHLWCr1S/6zd/8
zdnBBx88e8pTntL9q8bxWJ2kZBi/nXtD297znvfsah+rqzsEnac29A477NC9
7+STT57d5z736epQt+rVJ9OIetja1LP96Ec/unsu1PqalwsvvLCrS6u+rOff
88ke1fXxAjU+3QdsXdSoHqqX3Ydae2qEtqDz/viP/7ir4/sHf/AH3XX6e17d
p753Xw1F9kD9M9e+0047dfV51axnY1o6Tr0ztZ932223ro6ce1nNYva7z1/A
rr3oRS/q3qOddtlll87m17UpA3ZYbfcjjzyya1v29Z3vfGezzud6IfXe6qB+
Lk2gvrR7Ri1mfebRRx89u/Od7zy5ZmGylNe+9rVdu15xxRXd39pVfULtOo/m
U6ucvmMv1Hv1vKptrS52X53Ij33sY11dbmPpQO1L72F7p/Av//Ivs3vf+96d
HWzBlt761rfuxgoBP5g+mjat4as55ZRTZsccc8xsu+22654j/XsfrtV3X331
1d3zxkax/963/fbbL9F82vclL3lJV1fc8bY3v/nNC1qRTiw1n/OfUgP9N37j
N7q+D7Qe23vb2962G6uHvqMdn/nMZ3a6IzXf8uEj9ruddNJJXdvrj4b4x3/8
x9nd73732R3ucIfu/g59R1N4v9rwyfKgM4x1oiasZ+DJT35yV+N7Hs33yU9+
sht3lbbIc7jPPvvMHvzgBzc1n9/VfaAWLhvqtzR+ngefsc0223RjuBq2bc89
95zd4x73WNB3+r4HPOABna9jquajP9jZE044obmflnLuz3nOc7q+FuyDe9b1
l34+es541lZrO3bygQ984JLYGz+2/pufxjNjjMM2+k7X/ld/9VeLjqfp+Bxo
PbZYP7/tttt2x6t9LI6yHkm9t3I8P89//vO76zGWKtGXeV3/mcwP36jn7YlP
fOKi1z3fu+++ezcGmxo350vyW9RjyNNPP312m9vcZvaBD3xg0evsyr3uda/Z
r/7qry7RHuw1rcL3N4ZjQyfViJXe5S536WzWv//7vy/a94hHPKLzrQ35ZWgm
n/2+972vuV/sRr/y1Kc+ddHr7tnQAnxqJV/60pe61+nCkh//+MezBz3oQd2+
Sy+9dOH1P/3TP+3a77DDDuvGw/5lA8uNVrzgggsW3iNW6HMOPfTQJefstzWO
55tIVsa3vvWtSXqP38lxfCwl+oVf+qVf6nw3yfx8+MMf7tqv1jFisvTBvvvu
O9l3SlP98i//8hL/kTEhHXjUUUcNajljynn1nnOjJb2Pz67Gddn3Z3/2Z4te
/+xnP9u9bnw9hrip8bDj3/CGNyzZ77PZ2r333ntJ/JZ/z/vKvAO+PK+VuriE
vaV/Sx772MfOXvrSly6KjdOttJvPqu2n5+WQQw5Z9BpdLEbjeGPl9UjqvZXD
x+Ra3Ht1rMs9YDzhHkzmhx9P2/LD1Zx11lm9dqiGb49W4TOrx3zGYrvuums3
HmSHg9AkL37xi5d8nhiwfez1EMaTtJBjzzjjjOZ++1rx2CFNFEzRe/bzR9aw
nV7n0yk5//zze6/b72Cf8W9A77XG/gG96tkoNfPLXvay7nPEpVoccMABnU5M
VsYUvedepkn4Nlraw+9b94/JNGgC7S/ProZPyD4xwDHCtycW3IIO9Fml/aqZ
V+857rjjjlvwz9exBn5KY2G6lZ+vxNj1IQ95SPedQ/lMbNCzn/3she+o24nN
0H/a18o9EWsV/5EvH9BujjeOb8EWnXPOOQt/G9/yRbbyIENL8zmU18gXSaPW
Y3S+B9+tn1mPpN5bOfz1ruWNb3zjWp/KhkLf4zmjl1r55l/+8pcXctHGiLiU
Pq0FfWF/2a/xr3mt9vtB7EQ82bizLw9YTp4ckxjztfQe/6F911xzzZJ9Plcc
iI+vz4c5Re+Jo+63337N/Xx7td4Tu2DjzjvvvCXH83nWeu8LX/jC4L3/+te/
fpFvD/KOhsb/fJJiyMnKmKL3jj322O6YvvysZHno2+hoMYhW7n/kQbA9Y8j3
G4qr86nbbwzcx7x6z7iPfZHD2dJ7MfaTP9hCvsnQmA70h/svckVqvRfjarGc
sbkZgRxv75EPXI9f+GPudKc7LcrJkzvTl8+D0NJlbHrnnXfuxsr8CDX0ptj5
eiT13soY0yTJ8uHHd4/QPC3ENeynTeSoDSGPuM9nBXrFfuM8iLPScl4zr7QF
TdJnY83vEgvgSxQnaOm96667bsEGi5W2iPw8cxhajOk9iEu09CL72crL0R/0
zcuUs+ic+3KYa7RD7dtD+DX1h+eee+6ifcbxNHzk6STLZ4rei1ha2dfKNZOr
kPM0lg+fvXYVD20R41X2zVyZIWgUx5qz0CLy22idPubRe5/+9Kc7HUfjsIkt
vSfHxutymVrwC9tPL7agF30G28AX2NJ7EZvlZwzEzNybfW1m7nL4C9m28h5+
3ete1+nr0i9nLo0xsfyR2l8Heo+2i9xjXH755d3v10K/IKdxPZJ6b2W450pN
Yv63uUP8Nve97327+Yh9cyCTYWgYbSvfokXoPRv7NET46sb0nrmMoN39zW//
N3/zN833hN4TTyhhI/n1Yg5vn97jF/M6e2KOW4vQey1fG6bovRYRq+GjnDpO
ESviHzU/eipiNexvDX9HzBek+cTt2XGxFXNL5D0lK2dM72nzyEs3p+z9739/
l2sfOQhyxoyVUvfND7+WNpTT2iL0nm1ojSljtZgL0De3NvQeO9en56bqPXOm
5GuG9urTexETMf+1Reg9vrsasQu5MGF7+vRe5D7TC7SCeETcr+aRG0vWcyHp
x/CH2ny2GI15lNqp1oniGdE2tF/J5z//+c5XJ4Y3BTGdOr95PZF6b2WEJqH3
5Leby23NChogctvdl6n55ifi5PI3WpR6byiHj73kL+qLzSL0HrvK9vLx+5tt
0Se2CL1X5/CZm1POz7HGSkvvGQt43T3TF68NvdeXwzev3hPfZYfFmM2J6PMr
ltB5roc2pMvKce4QfHviHn3t9/3vf39B80Vb0371PJFk+YzpvRtvvHGh/f3G
tMmVV17Z+XfdJ/Kz7NNPpuabj5jn0LcOU6n3hnL4+NLjuL7nPPSerc6lC6bo
Pfv4CMOP6Dc3Bq71nrUN5IF4vW8NldB7dQ6fuAJd+tGPfrT721iXnWjpvfvf
//7d6/SbcSA77d40ljbujDF6S/OZAxdtEpv5k60YbPgq6cuSyDsZWweCfqUV
9TPzjr03J6n3VkboPWMA90w5J96zI8/Jfvfzel6XZz1i/aQp8VybuWl9hA92
in/Pxjbx+8ffY/HcUo+KUdD55Xx8c7taeu8P//APF75jLJ7bmtuLefWenGT5
dDGelhczth4XTSC33NoH8pD1B1PWazZ3ry/WA/2dNjRGj/wdm2vu82cm8zGP
3qNL6r7Qb0SD208HJtOJvLexeO6QZkKp98biuSvVe+KnxqeB+Gbo1lLvsW/x
fWPx3NovKV+P3Qrk1Bl7Duk9/We9dg3dGD4V82XLz+NzYePM97Uv7mGbNVTq
+9wYVkyhzCGRT6Rft+bGmE/UOMlny7U2Jl6vazWvpd7Tj2/KWgKbg1Lv8eXW
6MfF/h3Tl4OVtAkbNkXvecb6WI7esxbeVL1nDAhrIEfOXknkD9d6z3oBU/Ve
n49gufFcfj4+aO91f05Zg5UttCaC91gPekjz8QmKhVuXoYVcdRrPvEOYX+c3
CN3HPqfmWznz6L2Pf/zjzWMinud5TKZjffipem9o/jM/OB0xRe+xSS3/Fcb0
npwYfrdyXgL/nrykWu+JR0S/Nqb3PMthQ42HjePLfF7Pft98jdB7ffZP/kHo
wciJ4fdjk0v/is+VYzPWDwR+G/EGfoSpfm1aJvyBtOZ61Hxrqfdo+qmxofVK
Gc/tI3IJhnxQyVLG2nZq/h6fVuiUMb0nthr1p6bqPbqJjbRWgjX+auQMO04+
jzHqN7/5ze71yN+bovdWO38PNJ9z9n62cArOP87ZejF9sCtseGtOnfygHXfc
sZv/1/r8aFfx4766Ack05tF7fWvC0yL2j609lCwm8vem6L2xGpGber6GZ5Ku
cz+UsJ1+d++zDrf89PDRRP7emN6L/D0xT/dhnS9M+4WmVFOorJkZeo9eaMFu
Rtv4fLZaTk7rXvY95uw61li0r65daL0pfr0a/YD81/U6Psp47sqYovfMP0y9
Nz9T9R47NpYfudz5GlP0nrmm8RyxbeKe5RZ21nxf8dDoN+fRe335v2N6z9zh
oTog1iHw/liTxVxe80vohBbsvzwa7+lbS4XGM9+tT0PK25EX1jdu5if1m/uO
sVp3yTBjes9cJH3fkN6L9bdT783HVL1nvtbYuCbmUI/pvb76FBjSe+rZ2Ffb
rqgtZjOX33MpHoqpeo9mg7Glc6i/o8zl4DPkD4w1XMwRHtJ7iDWt6D3Hydvr
g45kg/t8BH4Ttklcu26n0KnyB+nePiJu4nddb6yl3it9sFsqfNFjek+/6Ji+
eUxJm7G2jblQodGGiDzKPr0X6zrLqYOYiLmofXqPLjIGFGfhk7J+i/U9bdb6
E4OxGS+HPVLPwjoCdB6MN/mw+vRe9MXGq/U63sGY3rPPOfZBC5Z6L9YEG1oX
f2ztvPAZ0Y0t5A/qv4YILW3dg2T5zLMeS9+YKXSL9dSS6cTacX16j3azP9aA
GsLaiI6VV9yCv7wVDy0Z0nvsUtgv+j7sl3yMGHOaZ2++asQnYr37Pr2nxoT9
UWuAvY7vcJ7xHeIEEa+WI2q+FnuKWI/F3NoWfIHmklsvX06hddyH9B6s9+Az
61wy/gPPQisvyzWLQ4PdZ9Nba7dAHqDPt07YemMt9R4fwJaO39x1DMUU1Sr1
rNU1+JJhxBsjFt5q2/DJDeXuBeyUY9VIbBFzucpnXb5dn421PrJ9kbs3RIy9
W+stR52JVmzTXOKh3BWM6T1zw4fW/oz182Nemnlv/u6rB0R3xlznvvz9aLc+
vaefG9J78s2tA0KDLqemfPJfTNF76pg4plXjBWqW2t+Xi5m04b82F4m/KvRL
SdiFKbVL6CLPg7yUWmfEus5+477cPSynnhp/vrVZvK9ejyVy02mtGtcurlnm
7vVh3BtzW2q9ah1I192nFdQE975YQ1TMWTv0rc3MB0hb8hGUeYq0nlh4S+tB
bmvEyiP20PcdETMxl2S9kXpv5VinMfK4aowh+Gj6dEYyjPtS25ofWsLmmRvB
1tSagE9IzLH0V7Bb5riKSdTjOvW+2CXPZxljjDzi1nPLX8hujK37BzGLPr0n
vsDvb032Gmuw8O0N1egd03t8Mn31R8ypYLuMQ+M6aC3j+b7ak8bmvo9eq9dQ
DqI+Up/e067apM+2hpZ+5jOf2dyfTGeK3hNLlD/lPq9/UzrF/WnOZp8/I+nH
HD3tX6/Jbr6D+BbfX7kWkzlQ1jtsrX9jzSmfVee/8Zd7fWzO1XL0Hk0UsdZa
78F40Xiy/m5+N+8RJx5DfDS+o+WfFHPhw+N3rDnooIM6mx5tEjqzNX5G5JGV
+dC0nvpDdC37pp1t/k8/ysk29yb0nlomfHx9+SjhL+/zxa4lqfdWDj8UHwy7
WPZh7KP7nSbpy4dKhtG2/A7alo8ukM/GftU6h5aIuhhlzS+Ir8jdqGsZuxdp
8pau+tjHPtaNYct6i2yZ531sjhfY8qjp3ZdbI07CZpXzt52rc2rVDy9h71r9
SUC/WQ+G/45Njs28Ns8fWy3/sIRdNb/MGoTle7STtqXV+tagRvgD+vQerrji
im4tmNruaFsaW87PUC3QpB9z4OI3Cx+4+1V/zQ61+lS/Bzslnz00n3ERnede
yHkzy4MmkO/mmSn7AFqATYvcjkDOT19Or9/FGJAvLH5Da4bwhbORLR3HjrgP
aBbPus/17DuXKXPyPYMR/2zlAbO3xtbyo2M+rGtmb+TBTXmG+fAiZtwaP8v5
ksdn3OpY0KFsI9tczyt338rFsR5e+OD49V7zmtd0Y1t2OGrlhtaLNh/aQu+x
Udpc31O2ufULQpPLVVyPc1FT760O+lW2lW209o+NP4mPIrXeyqD52ChrgOiP
zLdnQ1v9lmeM/TEebK1/Y/6X3AtzZ9RgEwtmS4b8dHSmuufWdjfuNg/B8UOx
E2NW52pNRmsb26zR5DV5fDVio7Sb440dxLH1BS0bLoZMExlnsrM+W8zDa3ye
dW6z9uODpvviXGxiyX3riLKDanWWxzt/69SUawu24FOkC/VFQ9AY2l680PMi
/3unnXbq2iG13vKRP+T34iei2W3ud69pY7GG1nxQfnJ+XZrCfWrdMn18X+5o
Mg36501velOnK9gtdkQ+WitXwVwmsQbPcWsdPfpF/MLn+I3oi766Yuo1sg+e
+7gP1H6K+8C/fTXB+C18Po0Tzz/t77W61izNxwfnuzzHjhPrGltvVu6Iz/O8
x3foM71Wr4vP1vLZ2Rd21Xf01S6n+cyvjXtZTpX8O/660Howxi9t3NCm/cpr
5svhS2R3bcZU/OTGuetR6yH13uriGVVPwDbWLybzQftoV3MlhjD2G6pHqf8S
MzR/zPpvU9dXMn/f9w/pvJXivH3HUMzF9TuGjqtfs631uk/ad0rdDvCBx3nb
0o+UbFTYGff4WF1oz06ZW7al4Jxd3y2prgDdV9qv9arzgtR7SZIkSZIkG5u1
1Hvyr4bygJIkSZIkSZKVs1Z6z7wkeaBrHXtKkiRJkiTZ6KyV3jMPKeO5SZIk
SZIkm5610nvWekq9lyRJkiRJsulZK71nfZzUe0mSJEmSJJue1HtJkiRJkiQb
G3pvqPbvpsL6h6n3kiRJkiRJNj30nvosm5v07yVJkiRJslLUHe6rFZL8F6n3
Vo66XlddddXCpr6eOi1qJcRratC43s0dN98oqIGj5pgaUe5Zbbxc1KFU68tn
qXP07W9/e/Q96lCqk6M++JS6k9aYVxPId7z5zW+eXXvttZPO7XOf+1xX/1zd
3lbNq5KbbrqpqynkO9RGHauDrgaHe/G5z31uV8PolFNOGa1n4Rzcu89+9rO7
NZTUJP7mN7/ZPLZs13naFurPqfl25plnTmrfZBruW+3qvu2ri6bWfGm/9Jt+
t7//+7/v6mp57eKLL57tvffes0suuWQzX8HGgB4Je6Cuj3pfy8VzZb5j1CKc
YlvUf1RTTw1Zv2dZm6eFWhHvfOc7u/NV33vM3v7gBz/o6nA7Xs2yv/7rvx49
J/eZmo7qkNd1hMvzCHsS23nnndfZ4tNPP33htZ133nl29NFHL3m/+1idU/XX
1BE8/vjjZ9///veb36VOr/qB8Zns3pgNhj5dTXbv+dSnPjVY22mt0XeqOTzl
ulaTjaL39LHqtZZ1ldU/VL9VTdPydfX2kvlhS9Sf9sxeffXVnabYZZddutqR
88IOqfOorrG+TM3rHXfcsXteW6gRxE6qi6zmuP5zr7326uo89vWf7Jg6sOVv
b21x5x+16Gt8tvO4053u1Nkkz+Wv/MqvdLazhXrru+222+wd73hHZ4vV991j
jz2adWfZ9nPPPXe29dZbdzaJvadH1RPfdtttezWfOqzqgqtTro/xHjXK1XlX
U7hEjWj10e93v/t12s2x0bb6mD4c+9jHPnZ2u9vdrvv3Xe96V9e+/p91W5eP
Oqnqhvp93X/WOlX7qQX9X9+r6h/f/va3n93qVrdaeH3ffffdIut8rTV/9Vd/
1d3Txx57bKfNPHfbbbddV4t6HugRdXX1nWo7qs/GPnh26nqzgXEgfw57JYcq
fkuf0adL1PCt+y59Gl1Wo7ak+rxqA/t8Nsjx7p9XvOIVzc9Xc8y4Ue1ZddG1
ycMe9rCuPjpdXHLBBRcsOo++7e53v3vXPiV0tftfTVvjFTbpec97XmfP6joP
xtl+EzXCtW1p6/raFmqFa5vyXLSd2uDrkZyvsTLUr55yP7oHsgb8/PDrqVVN
25Tjsuuvv75r13k0H63FxtAkZX1X+ke/1tJ8bByd9NnPfnbhNfqI3lQXvNYk
6vHe+c537mwNfxofiVri+k7n27KBZ511Vvf9xp/l+uNHHHFE1/fWPjLjbZ9V
1i1nd4075OLW95lxt+P5DUvowJNOOqlrkxr20Hf/2q/9WncNgdqfPmufffZZ
eE27PvCBD+xsaz1ujLb9+Mc/vuQ79Dd08TbbbNP1S1HHnL/cd6i9nqwMcQZt
qR/u4973vvckG9bng0n6oV9oETqt1DL8SFtttdVcmo8t8jvUcUva3rNaj8E8
R3RXWcedb/73fu/3us9pxfXYLeO297znPd350gXGxnEPGMOV0DvGC5H/T4Ma
u26//fbdc+/zaqy9yx6ylQGtpp3YwLKd2GTfy66xE7vvvnunXctN32o8W0Jv
+X5jlPL63cM+T7yi/O4ddtihe0Zqe3722Wd3bfud73xnyXVoR+NStss5s3X8
rqGP16OfL+ZrhK3dXGwkvee+0peKr+mLf/7zny/a9PF8Nsn8GP95fvj9S2gV
/lLPFZ/fFIyrfZZxWwkf7eMe97huLPelL31p4XVxLjaZDaphx3wWv1dgTOie
5jes4Y9zPK1Z+vhoOX489rGuo/7KV76yew+fVwldxW9W+wrZe/fi05/+9IV4
jX/Zb6+Xui1g/9nLErbbeJudM9Yv8Z3Gy74/uPzyy7vzNGav0bZ8o7vuuuuS
OuqHHXZY9z56t8R5su177rnnks9L5oPfdYreizj9+eef341TSvvFh8R/PJYv
kCzlVa96Vdf+7373uxe9rr8VH/ccfeMb3xj9HJqEffI76nNKjLH4+Dzn5T7j
Rd/9ve99b9Hxxoa+2z7j5sB4mj+fz72EDXnWs57VHS8PJOAvZiPcGzWhq37r
t35r0etiNWwq+1Ijfuw98kwCeo+dd118y/W1uzY2t9SI9J3xODvJt1pCg4ln
ioUH+gPfe8455yw5J7aQLXId5ZxWMWVarz4fbcuX7vPk8aw3Ip7rd9icnHji
id3vzh5tyfi9PWt9+P35p9K3Nz/h2/PsyGer8czZ9/jHP370s+gU+sHxYrI1
cjzqcV+Mp/nAamh7+9jYGBPypbRySMAnSNN5T3kv/P7v/373mnFkjeP0E2Xs
IXx7fdcsj8D+8LOx1eLIXhMHr2HD6DFj1IAvs2/8D/GYchwc4/9rrrmmebxr
sP+EE05YeE1/4PmnNVpjTXlirfNN5mOq3jO26eNpT3tacwyTDBO+Pe3f8g/J
QbOPf26M0CR9OUH8XvUzGM9lKyck7J3czkDMU/5si7B3xqYBvec1vrGaf/mX
f+nuK7qrhG+v75rdg/YZG4Z+owFp5j7sr317Ma5/whOe0HwP3ej8ArF2x5cx
nxK+Bvv5ZANt26ddom3FudcbxnTOTZ7h5uTVr351971T8jrXM/rTIf+SeyR9
e8uDn8c9Qk+31gsy5rXf+EvOxRAR1zL2aumLsDX280OxCWKZXvvKV76y5Hi+
DnqotLF0odhtH/JGSr0nditnpNaAQxhTtnx+gZwt+0u7/eQnP7l7TX5Mzc03
39z5SMvx3vOf//zueGOyKcjdcfwXv/jF5n656faz/8GLXvSi7jX2P9l0TNF7
fCB13lTgN6X30rc3P8ZQ2l6+RKv9tK39/OXGUEMYkzlWvm6L8OWVPnafL19X
jLXG+LJ+Zvnb++LL/Ly13tP3eX5LzRgYX4vhmeMVuEbX6nNac7K0UYzJI9br
tdb5gz9SHkl97/Ld9encFvJvHF/n/wXmCdpf+jHl+LTiJZD3vF71nhiQcxOT
2ZxsFL03hPu7lU+VTEOuiHtErkcLuizySsw/GyLir3e9612b+0OThL4L/Wf7
2te+1nyP2Kz95shCvyluKlenfo+xsLkY7ofIeY+YBx9mxF/FdOWe9K0tIKbj
PfJrWuib7We7A2OOuBb9QuSVsKP3vOc9u3F9SWjKGAPGPDq+T/E+Y/2SqXrP
dwWR51JqabbItetbktVhit4bwm+bvr3lYbyk7UvNU+K5iudybL4k2zFF702J
dYDNYadKzI0QnzXvos49E2PoGzO2iPF16RMzpozr7ZtTHHZhyliTlq19exCT
9hmR780fYwzLftFi9dzoqXqvbNvDDz+8y42kd2stH1r6tNNOG72Gzc1azde4
Jeg9OVvmyyfLI/zi+pwWpd4T5xwi4gh9Pv5S74kdxziIv6+cQ1ESes+8O7AX
MS/30EMPXXSs+KTXyzkI1hPwmvEonefc2BCviXXKqyuvS0w45n305fyE3pOn
XObwHXzwwQvX5zuMs+kv63SUiNP6bsfRXnSjmLXc5OhzjG0/85nPLLzHONbr
9WfVbUsLxzpFEdumi/kUrKcQc0H5c/UrOT935axE71122WWdJkjf3vKIec99
OR6l3qvzzErE4MIu3Hjjjc1jQu+JhdY5ZSXWN6F7+AvrPL1yjFvrrdAJ5Ryx
PuSDsBniWmUshcaL+G9fPCb0nrYbgpZzra6nRD5i2BG2RZ6g/D72i13xuhhz
qTvCp9gXMwm9xy5GHDj8By1fZeQg1XmT64HUe5sGvj25G9ddd91an8oWC/0T
+qJFqfesmTKENVgcJ6baotR77FTMr2A7+p6N0HtiCgE/o1yaMueYb48OFLst
c0TEfr2fPbLejDwVucbshLGhOCsbE5ov4kM2Y/EWofdsZT/N7kZ7lpvvpcEC
Giv2ib+aSyEHFfoRceL4TeLZjX7LOLmljdnDPt+puSXiJOy0Z4bGiHwaayOk
5lsZK9F7xlmlfyaZj8j3cD+3KPVeX94crBUSx43592xlblqJ/NlYO4ReqbWS
caFcW3rIHNuAb48dcj1D8zrFVa2j4Nj73//+S3LEzjjjjFF9G3rPeHQIc9la
Nl9/G99B04o1Ry6QGHPkqrjGmD8W+cX8sK3YMR1Yt612YL99TqmbzflwnHyV
9Yhxeuq91Ud/PHbPJsOEPpkSz52q96bEc0u9NyWeW+o9sC/leqbhW6zXSwi9
Z2vFb+UDhm1iZ0q9NxbPLfWec6GrrNciRm7jc4jj9AGxXkqp9/QhNWxmXHfk
Kvr8mNuibys1nzx1mrJP78k/r/1HfouIW/fp2mQay9V7cg34T8bW4076Cb03
JZ67OfSecZtc45i/JT+51nxxXMCWPelJT+p8Y2NzOtkBNpk+4sPzHeakBKXe
G4vnDvWdxsPGzq0cnlLviQ/VGG/HmpSRq8j+RA6Ltik1nzVt4ndstW3ZVtpS
LNlaVZt7vZOphLZNvbd6xJzH1rzOZDqhuabovT5ffCDWOFXvXXrppV3Ox1S9
N6Q1janFLtm3ek370Ht9+drWxeBHc4y1neSBRkxiTO+xOb4vtJ64RmmDvB7z
m0v7Wuo9cYwW1hmwX6w78NleZ+fNEWY/rfkg5yXyl1t6ry9vWMzJfnGYZPks
V++5j/R9yfKJ+bFT9N5QTRl6JPTTmN6zXspY7QzPami+Mqe2Rj9mrhddOG9s
kk6Kcw4tG/NTpug967/0YU4uP2JrjlGp9/pqmMi/ifhB4FqNy419bea9sYls
e+TjDWlpWk878VGUGnC9EbncqfdWj/CZlmtcJPOzpc3XqAmt1xe7CL1XrgVV
E2vi02aYd75G9CmtuWSl5os1+Eq91zdn3xjZfjHqGrbO3Dpz48Ro9VXWp3e8
tcbkOE5pW7mD9rfWgk6msxy9Jz5lzvt6zDffkljP8zVK7dWyTzRh5O4ud622
yOsVV8Bqzddgd40nW5R6r69uGh+n/a11Vfn2jE/ZL2ujspGxhqJza60TUWq9
9erXCzJ/b/WRI8BeZp7zyog4xpje4wPjCxvCusFT9B4NIx7pGQ6//5jea2lN
Wk/+U2teRay1F2tqDek9c9BKvRfrGYzpvYhl8Gu21jYN+BVLfx69RmMN6b2o
f1HqPbHqPhtijorjxdQxpW1jva/UeytjOXov/LfW6kmWT9S1GdN78n37/EaB
9eCH9J5aP/bHus70Ej97329Ix8RzX6+pHlrP2qC11nOe/GvWGBDvNw+sj3qM
bU5azNMa03ut9VbBxgyNsY0nY75tn96zHkGt94wv+/yB0batOE5ovVNPPXWJ
1rN2/9A8nLUg9d7qIr9JvhU/TLIyaA9tyb/e0nPWBnEP8YGNYc6E+AJ705p3
r06Gz6KXAmNlr7VqgYUeMSenjitYv8L4s7WuiLWezZ1FrMdinaq+urphH2MN
lMjp67N3kY8dtku9ObGJPkLveV/k8hx55JHda311b6Mfi3nJ2paNbelK/YI1
aBxf1lYKu95qW8SYeiwvMxlmOXov1i/rW18smYZn0LifHmjNO7LmsHZu1aWt
Mb5zbCunFuH3D5sTseS6/llQ6r2yphD4tuSAtPwVbC77YF6Z97JPfYTeK2sv
Rk2dWmOiXAO1r9Zz2IU++wf21THlnJOSWPsz6l+oP27+c6ttrSUQayK0xvXa
WY5xK4YuFt66zrVkLfWeuh5jfuwtDf2b9ky9tzpEDl9rHdDwfY3l7gWRw9ey
A3KS7ZO7F0QOX8sOWPeppUdoODk0fWvI+e7Qe2xErKPaWtvda3yXfFyRQ0yT
yeHzvjq2EOv/sa9hq+lLr/URPtTf/u3fXniNT9JralO2kFvDPoYGjXVU2cW6
1m8Zyy3ncUT/1Re3ibUsxuL0yTDL0XuxznjqvZUzVHsm1u1o5e7V87fYCuuG
8KnX2jHmcbGHoTtinmif3ot59vLgSvi+ynqMNcaA9B57ZA5un94zfnXP+Y6y
5mTEka1fVxO5ZUO5e2EXhvSeObmO6autLq/Y+DQ0JTurv2617VAs13n2aT2v
Gf+m3vtPNqp/L/qx1HurA7vCx1fm1kJcwTiQb69+3uT60x51PJLekAdj3FUS
tc749srP8n9xFPGIsuY2+PjZyrImLK0X42z76Cyb/7MXdJ48udB7cI70W6sG
S9QKr/NAIy+orLOGl7/85UvicGF36hq14H9wbdZPKOtoRs6KeFDtf7P+l+9Q
J70kakOVfZc1tiJnu7Z79LD+rtW24jDW8ecjHcs9T4aZV++5D8Lvk3pv5XgW
+fjq2tJ8WcZych3Ke1zMM9aDq+sJyrfghxdPLWGL2MJyzpe5XXLvWnqPjyVq
/chVCyLOac1lsVq2iw3wjKofa7Of3oPYsnFea6waOQE0YbnWnmu1Nmlr7Sax
4SHfHsZypuM75A6yPfV6hVGPvYw1IOLl5Tl5b9SntAZiSeh47cR+aitt6t+y
rVLv/Sep95KpyB+n+azdwb9Fp5i3SQPW68DD636D2sZCvhjNJ8dSXJc/im+L
rWmtHSdWS5/RTPz+9J1xoxhsGQcp1xAZ20q9B2Nmmk/dx5hTy6bzofm31jz+
pmm1ibw5f7Nf7A17Vh9PP8mZ5t9k6+WZyMVnx8WjS59mIJbOpupf+Ar0C3JU
fActWH+Hvsa6K9Z5caz3srf6NOP2lm6Tw2PtQW1L8zmGb9G5spd9Nb6SYeSs
i+Hb9Ldx3/HXvuQlL+n66762Tb23+sjvoPmMx/iP2CA5fTRD1NoJynkUnrsa
4y/+13jOrEtu7NXKPaP5+NE8X3E/RL1Fz3EZ54jckilb6D3Pq3UDfFb5+a7N
ccZrrXWVXTObK0ZBd2gT9XtoubFaLgcccED32X35ywHbrl3YeuuXais51c61
ZVNpVt9v3VTH+q3YPvrT+tHl8T5nalul3vtPNqre48d2z/flmybLgy+dltG2
/HBD61gbi/GX9a0dxjfIBvgs9U/65gyUsGviJd5TjokDY1KvT9lqvxyseeyc
w2aayzGWLy9+KwfI8Wp1jM0P4ntzrDxs59GXM10S89Vs1kIeg21kU7Sr9/TV
KAroDnNR4rr1JZu7lvdGg03V9sYnAR1d3oNDWvqFL3xhl6OZrB7sA53hHjfW
rPMeSmgOY9W+nF7Q5a3aYC3ovvK3r/P1YEw41X61xtjGneUxY/XMYR0LbaFN
6pqOfbin2eKpsD9xTnJXxmDjrMti7QTvaa2twu5OaadWXeG1JvVekiRJkiTJ
xibnayRJkiRJkmxs0r+XJEmSJEmysVlLvWfeYt+6FUmSJEmSJMnqsJZ6z9y8
JEmSJEmSZNOS+XtJkiRJkiQbm/TvJUmSJEmSbGzWUu9Zm7peWz9JkiRJkiRZ
XdZS76k9ot5PkiRJkiRJsunIeO7qYk109WJiS1YPNW206f/7f/9vxZ9l3XSf
pbbYFNQLU3fskksuWVSncgz1KVprtLdQ98M5Da2rX6PuiPfUtbz7WG4bOqcp
baXGR9z7rr0PbVg+J471WlyPTf0PtVTU0EuWhzb90Y9+1N23Y/VX4Hcof5cp
70mm4fnRplPtQR+eXfUs1BSLOoRjlL/pVPviOHVZvvOd70y2F86FHVsu7jd1
g1u1Ld2balu4bjU+huxLCfuhFu48dns5aK/1Xu879d7q4Ld2TWqSqlN5xBFH
dPVE1cP+3ve+t9ant0XjGVLz7PGPf3x3zzzykY/s6g0tp74nG6H2mBqPfh91
HN/2trf1ahn2R+01tcfV2HnTm97U/V992FZfqN75u9/97tkZZ5zR1eBW61J9
8CHUzHzSk57U1cJ03zin5z73uZ2t7YMuUnNtr7326p7fBz7wgV29t1atNmhD
dcrUtHS8+1QNYvXPWvgc1/HKV76yuw51KIdqlGsL9Ti1qc91Hfvtt19Xa5je
qI+NmvCx7b777l394ai9GZt2SeYn6uxtu+22XTv6V12tPtz/6n35HdQu9vup
Ka3+al1zPpkPbXvllVd2db3Vhn74wx/e1exaTi6T+rL3uc99Zk9/+tNn73jH
O7qar8961rN6tYza42qW3f72t+9qbod9UbOtb4xIE6pruNNOO3V1wtX5vcc9
7jH7wAc+0Dz+k5/8ZGcr1FD0/KsFrqZlC+OOJz/5yd3xaripnVtuJ554YlfT
u6z3x1443wc84AFdHWJ1bd3T2oHubaHN1QRki/QXrnv//fefveIVr5hLj375
y1/ubGAf2lD/oG/SL7BXQ2271qyV3tO3bRS957el8W5961t3937JRRddNLv3
ve89aGuTYfRD7lE2AtpbDVjP1zyaz3P+iEc8Yrbzzjt39SyhHqOa2GqGtjTf
29/+9i7voKzPrXal/pPNrjXfP//zP3e23e8etepPO+203nNSZ/m2t71tZyfK
MbS69ne+851nN91005L3/OAHP+g0JH3Ehj/mMY+Z3eY2t+m+y7UZj5fQeq95
zWs6m3/ggQd2dtn/Hb/VVls17bjvcB1vectbZrvsskt3rHqXfdCe2ok9DfRB
odHLepp/+7d/O6nW+Pbbb79EKybzoea0ttxjjz0Gj6PLHXfWWWctel3NZX09
v0qyPLSt5+wv//Ivu7/pvH333bfb5tF87A6tc8wxxyy85rny23qua83Hz3C3
u92t00/1Ohih52uM8+g8mi3sLV73utd1/Rv9U8MPz1bwbbiHvL8PY+2hZ36H
HXZYUtebnaVvY61e58jusTe/8iu/0t2jJdqE7mS3SpvFZ/jQhz509vrXv36S
31o/Y/xz0EEHNffT0sbb2oXd40dkr/RLrbZdD6yV3uMz2Ch679Of/nTXhp65
Fvrjk046aTOf1cZAXfEdd9xxSduybeb70NJTx1Knnnpq9zt99KMfXfS62tZe
f+Mb37jodTaSPWndp/yL3nP55Zf3ft/LXvayQb3nvPm5aDQ6sYavy7iojqXQ
uuxfqU/5P9km33fssccuOt7401i4rHPONvHdOJ59GuKAAw4Y1Hs//vGPZ9tt
t13Xf9Xwd9KtL3rRixZeo/fYajabH/TFL37x7BOf+MSijW9K/5GsDPnRY3rP
+GDrrbee3ete92r6Po477rjZE5/4xE15mhuWq6++umvb+l6++eabO18V/9PU
mDlfG21RxzovuOCC7jemOcp44ktf+tLudRqrxnH2feELX1h4jT0J///555+/
6PgLL7ywe/15z3te7/nRWVP0nvGtay91HntAn9Vaj2Y1ri3HkQE/mvceddRR
i14PO3/22WcveQ/N7btKW9gHG+tzWtpNTJ4f3H4+yxK2q27b9cJa6T2/30bR
eyeffHLXhvqvFmJz9T2ZTCPa9txzz12yL+5dMYAx9GP0kPFj+PYC2pEeusMd
7rAoHirO6/NbWp3fzT73cF8seEzviaXaz9/WwjjU/j/90z9deI2fRZy0pXHf
9a53LdjbOCd23Ri/Zd/4RvkF+R5qO1sypvdizF77hoKnPvWpXduKJ4Peo9P7
cO4Pe9jD0re3CkzRe8Y/jnnIQx7S3E+T69uS+YkxlZyNmmc84xndPrGAMa67
7rrOt8dv1YIm8lmlv9D4q+/z2QXj5Y985CMLr4lNOb71HfKVxHjLOEfNVL1H
h7K5vi82ceoW4sJhZ2vEg43HjYtLxKu955prrml+ppj6l770pd5zBL84bd3S
vmDr7JNfXOt1MSFrC8tDXG+sld4zVtkoei/82GKFdS6u50reBn94Mh9y7fj2
PHf8VzX0h3a/733vO/pZH/zgB7tj5c60iDHZmWee2f1Nc0SOWeiUErEFOsr+
VswVY3pPPqD955xzTnM/35hxsGclcpPFV8s4S03EdUPv8SO4tj6MXR1/xRVX
9B4zpvfoz74+DWyr/XEe8oPkQfZBf6Rvb3WYoveMpRwj7vc//sf/WLKfb1a/
lsyHeB/fntzXn/zkJ0v2e+61+xOe8ITRz+JXc6y8jBbhlyvHxXL7vPaqV71q
yTwCMQP7xIhhv9wLr8kLXA5T9d7xxx8/+TPl9NEJLRvKxsmPFqMtkbvqPMRg
Wsh1HrpGMWuakQ+gT+95VuyLGP2WQuq9laOfC7/0YYcdtkjz8ZuIdem7k/mI
OLlcsxZioPbTOF/5ylcGP8vv4lixwxZiufaHH6PMMWtpTYQ97ZvHsFK9B/eO
YyLeK4Zh/P3Vr361ORdMW/ADhN5jz8WLxUhb89lC79V5pyUr1Xt/93d/1+2/
5z3v2fsdgVgVbZK+vdVhit7jJ+GPcNw+++yzSPPJaTDmGnu+kqXwy2vT2v8U
0BUxl6bMb21BMw5pMfl49tNsgXkGYcPMXSjtBTviuQ70WWFLQ5s6Xixkao7h
FL0nl7GVA7gcxDp8X51/fMIJJ3Svu6frmCp/pjhPK38GbBW/jX/5M1t6z/hV
TJjmW6/zMvpIvbdy9K1icvFsyeG86qqrOj+FcULfHMhkmPe9731de/LZtwi9
Z6MNh/AMO87Yr0XovdAk5saGLTZ3oUXovb75W1P1nrkZfYTeo+/gvoprrnMH
6S12SH5fwGbHfLYyzxv0n9w6dnGIqXpPHlGL0Hu+a6xfk3NT5x8my2eK3oPc
AXF9x+oPxe3Ew/z2nsNkfuSZaM/a/xSE3rMN1RWlxcxdcpznv0XoPXnOoevo
tpgzFvlGxq7slTkI8m4DedKOkVvn/WKR4lJec1+4D/qe72Cqf8810Ezsns+1
me81z7pL8voe9KAHdePVOudUvyBWHfZb/FhfrB82N69P62hnufYXX3xx93ef
3qMZvX7IIYd0f5vzp01dBx1gfuHUtWI2N6n3VgeaL3xI5SY+uF5/+/WOnEdt
2JoHgFLvDeXw8RnFuhR9Niv0Hl+iHD7xd3+Lx4jLtAi9Jz7QYkzvsan0mf61
b42A0HvnnXfewmuxBku9Vkn46upcPPmHLT9p5CdaR2iIMb0nxmS/3PMWofds
Q34ivgQx8r5cnmR+puo9lP6g2DyDm3rdso1KjDHphhal3hvK4fvc5z63cJw1
QFuE3rOVtoTmM7+6/l3rNXZiHrexIb8kLcVW8vuLJXtdXs2Q5puq9+hHz/nR
Rx/dbdZL8dnO03oFQ/A9mzvELlsTo89Pp23rNZ9sQ3NzX/7yly+aVxZ5gLXe
s/5N6D0503InPSd8q5FHSU+vx34/9d7KMR4yR2e33Xbr1jpyH4ZPxSZffT3+
9usdeS1T4rnRL/VhrkIcNxbPDU0Sem9KPHe5eg9snWPEV2o7JDck8vFKvSc3
wBy00u9o7Eo7WoOv/hz3J39NGbOVF8PfZk2rMZ/bmN7zO4ht8A2Y61wT6+mM
6T1jcP1MsnpM1Xs0tnvBWmvsVazXYzN3ppXXlwwT+V9j8dzwC/RR6r2xeG6p
9/Q5cvfYKf2SZ6vUPuYVBKH3bI6tcX72WaelL94xRe+Jw4gt17z5zW/u3mte
V9/afWC32AnzYOhG+soc6BrnKO/FeFksvLyf6cV6zh675fcqayTw9Q3pPfaT
vS3nwtHXYkRjfdJakXpv5bh/3XflfSpvKu4XWxljS6YRcyim6D3r5/UhbhG6
aUzvsSH0nZyQqXqvb03gKXpPnqB5kY4T3+WbE0vmc5ODTcPVeq9Gn24tA2sc
TamBoT+g4cR6pjz3Y3oP9GZoPtpVfMi6WNbyiHmCQ3pPHox5NzmvaXWZoveM
A+RMlL4Va7TQEBHjpfn0tcl0IpY6Re+Zh9WHZ4nOmqL3PIPhW+B/EpMt9Yh1
VdwL8b0x9yv0Xti/GvNz+TMc09JrmKL3+mCT+Enm6SvN+QrNV+bp0Xq0hXnl
UUtEzCb8reGbi3GxOW3m8YlDlIQ+7tN7bF3LjxPzn9ju1agFtZqk3lsZkQPl
OarRh8mZ0L70RsyFSqYR+XtT9N7U/L0xvRf5e5tjvkYgH1qcQ5/qXvJs0HfG
mpFH37q/EFqv5ddrITZHv03x6wVT9B7YWbFjus11sKHm/Ybm6OtLQGs4Zqim
SDI/U/QePW5N2xb6h9B8mcc3H5G/N0XvDeXvYd75GsZa7Gbrc/mg2BjHm8uF
0Hs0TB/G1EPx6ZXoPcS6Tt4/dX5jXEeckxw87a09atjZUvPxA+i/+QFb8XS+
bsfJe1HvI2LHZTy3hXiKdnRMvdbrWuN5po83d82vjaL3rNVh7NWH/jXGRe6b
ZDpT9Z5xVN9aS8FUvRf9ojFf+ATH9B5b2WKq3usj5ifbWnkq+nJrJYsbtOp8
1ITWMweztqd9eTCYqvf6MA4vtXQLNpRvImtOry5jes+4RgzNv31EHlPf+hZJ
m6l6j50Zm6ug/uEUvRfrGJkL0adHwM8etlN+snykMb3Hz7USvRe1JvvqB9dj
bHnXrmGo34y5uLF2JD+f9uyLOdN81mD1HppYvNv/jXnk1pRbrL/neLo4tPSY
3oOacetV76V/b/nQJEN6DxHXjXk/yTSMTYf0XtisGKMOEXMW+vRezA3x/Af8
bV5rrUVMD+onjbvLeW4lU/SeeWnyZVpx2LBle++995J5/+IE6iFcdtllS94n
FsfelBhzmjvWWteO/fUdfYzpPecu77pvTT25y95v3fEW7Dof5ZQ5Bcl8jOk9
efv2D+k9MXnHuB+T6cR4rU/vxXiWthiD3XJsq2YEjPvsjzWR+KaG9EjU16D3
6LRYj0XeecRAa8LfZc5DizG9Z969/X3rsVgzyn5zOeQO/PVf/3X3N63QR9jI
WEeLzTWeHcIcXe8x14Lm47e00aLq8dqs1yrHwXHmccjviXwHsZcx/17EgofW
NV0LUu+tDPeuMVHfM6Jf5gdyDNubTIfPSj0xNqmukQg5L2O5e4E582yZOGYN
veL5NJ4r563FGs2tNVzMkxvK3cMUvRfrdtb+9dBz9tW53O41uY0trQdjSnPF
A/ZHP9G3hrHcGdq1jyn11LQt3V3ns8iJET/Qtq28aoRdT723+ozpPWMqc9f7
1gxHzPsemzuZLIZm8QxbM70VV4346FDuXiD/jF9BnKL25auTo38xvzXyxcyZ
52dordEZn+e7zVGAz4znvGVX7JcL6Dn3vLYY03s0GVtQ58kFxoPeH/Vq5R3y
rfXpPRqVtittpDq+bKr4a4tYw991jOWzRP2TOn/PsyLHwbm1fJWhpYds6lqR
em9leA7E/7Vji1iL2XyiZH6iNkO9Rp12F2eS31braOtwqgfAz1XCv8Uu1n1b
6I26TiId5B5ls+vn2ufz7dGRfUzRe7EWfG3zYz6cumPl+gq0nnElWy4GY+0E
m//zQ6q7JO859F5oPTkF9fHWg3G8WPZK9F55TKnL+STDhg/VD491YVLvrT5T
8vfME+K7aa0dq282x9EaQOst93xLgM9I+9f1IOkOa8TRaOVcUa+bz97ygUU9
1x/+8IeLXo91ncu1Wsyn5p/qyxmPeEdZH43dpClb83NvuOGG7vihWj1T9F5f
HUW2mi429ijH3PpNOrOlq6KmL9sW+SnqHmnTvrGluSbeM1QHOIjc6VZ9jVg7
opVvTHPa16r5u9ak3ls5agG4Fv1W+Pn00XLK2Er1+ur538k06DrrBPPBl/Of
6Qp+v9r3JQ8t1tqr843kqai/o28LP5Q+Tu4LG9XKYfU8iy+wgcaM7A7/meNb
eSWOkYtjsx6d8/D5/ha3rOc4snPGiaEJ9an8KNaXch1iC0FovchxGdpC79F6
U46v9Z7+wjnzHcS6EvKpjbnZ1rrvN8fTmDnsrOuMfsh4eyg/OOqep95bHdgj
v7stco38vtrZvauPL/tPv5W54Gof6C/h+TCWsTakWOFQvDfpJ9pW/KCcJyuW
6Hmp433hH6A12IsSuWfyzGxRf8Y67PJi5VPUOSHWcaGFrOsUfj79UNiElr+f
DnSvlLaN/96a6taNrvsx9jnsXcRj+fAi/6685ve+973d+LbMFWZ/ze2P+Epd
g1s/6jyNJ+OetpmfJs+Hfqz9jTQ2v19pc9zP1g7U5tpLPs4QbG3kZ7f8r6Gn
+RzKnGM50q7F2n/rsaZW6r3VwfNnrUb3pTHQ/vvv3/Vz1vZOrbcy2DHrdFjn
Ti6FfknubKsetWePDeBvb60bQPOJF1iHnm059NBDOy1H1/Qh91deH5+a75VL
owZVC34sudXskeNs+kyviSW3ctiM5WlDWs4zQdv6nPo72EWfM2WLOptTj3e/
BmyW8zBOjmuQe+M4r9Fl1jqooSX4FrUvn6jjtW1oiD74cB07Ja6VjCNvzG8m
t9+4yMZnFL+lreyHQZfwR3gu2C+/od9EXmtqvZWhbY095cjqbz0T/EPu+xo6
RNzAWi6t54bmo3fYIb+TfJK++WSg+eTy2hzPBtFtQzEHYzd20fE238VWtvox
Gs99Qg/GveX4sHfGCmX8xfmwEXQS3cpvTB/K2+nzyYF/kRYt72Hn2bcWuHmU
bKg+2bmzrc7HWgpDc2PoINfsOQjbyBZ6zZqnJWLirsE6WL7Dxoep7daj1kPq
vWRLge7Td43VX9SXiU0M4Zn3WUM6b3Nj3Ouc+uavbSlo21x7KEkWQ/d5vsf6
Wppvo6/Prw1iLLIp1wZhh3zHpsxFoPviWtarzgtS7yVJkiRJkmxs6D3r1fTN
udlUpN5LkiRJkiTZPNB7ctg3t/849V6SJEmSJMnmIeO5SZIkSZIkGxt6z5zt
co2vzUHqvSRJkiRJks0DvRdrbG9OUu8lSZIkSZJsHug9699syjnRLVLvJUmS
JEmSbB7Sv5ckSZIkSbKxSb2XJEmSJMmWinWO561jpTZ0q2b0Rib13uqhroDa
fWp/qUGvNmqyOqjTaI1IbXvxxRd3NR2XC7vw8Y9/vPsstTqi5vEQ8h3OOeec
bpua+8CeXHvttbO3v/3tk2tm/OQnP+lqaKoV9A//8A+Dx6ojctFFF3XXoWZR
1MgcwjHqEKvDNIZ6JuoS+fzYWjWgSlyn+k6O/chHPtK1wRhqUVqjXttOOT6Z
jnv1K1/5yuzNb37zaI0BtWbU6vLbqZ/aVzMwmR82hi3Qtupjr6TGpnq4asqq
06pu4/nnn7+oJm0LNfFe//rXdzXG9PlqM/ZR9mNveMMbJvVj6rypreY9zo8d
G8P95T5zz/XVOfrCF76wyP6ouXjppZfOLrvssq4+t9fU5FXP3GtwTPketl6d
ddccr6kvp45uXc9cPc74TjUu/Ttk76NdHac+cNQ1Xq+k3ls5tIj6qurbq1t6
4403dvfkgx/84K7uXllPOZkftvHII4/sahOee+653bN7t7vdbUlt7Sl85jOf
6X4XNSzZXXUs1eX99re/3TzeupSeZ7Wz2T5a0/+POeaY3v5TzUa/+9Zbb92t
dbTLLrt09nAI+vVpT3taVzvzN3/zN7taptbFPOGEE5bUQYfzUMv2T/7kT7rr
8B41T1vf4/58xCMe0V2nGpLO6ba3ve3g+RgvqwXtfM4777zunlaj7vDDD+/O
szWfX+33hz/84V39Yufue9QnP+KII5qa+pJLLunaiR1wrO0DH/jA4Hkl09AH
als2Sbv6HfvGSH4bz5f67/Fbqy3vd1Srekuv77fW0AR0ls39raa62uqhT6bi
mWPzbn3rW3f1qXfdddeF52afffbpxk019MwLX/jC7hg1a9kKz6mcfX1/ibGg
/ss98+pXv7q7D9Qof8hDHjI77LDDmv0Y28QGsT/uF7rLd935znfuxrkt3E/q
9zqeTtImbIB7sLYT7E1c49Bm/Moe06rbbbfdpPeo911iTTo2j91m46677rrZ
Kaec0rXHNddcs6Rd9R3aURtpK9erX1Kjd72Sem/l8LG4f9z3JeyrMcTRRx+9
Rme25UOrPPGJT5xtv/32i+puG0tutdVWnfabyne/+93uWS59W/ScsZ663i3N
xx7RLKVtcJz+k44Z8pl8+MMf7u4L9cmHMH5Ul/sOd7jD7P3vf/9CjCHeb/xe
Yrx6q1vdanbyyScvvGZ8v+eee3aauDXWN37mdwvbP6T3tLma59rXd5U4t2c9
61mdpi35/Oc/37XhD3/4w+5v7fqhD31odt/73rf7vmc84xm93+c50X857hvf
+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
AyL8j7T3eiT13srxLOlr1YrRx+v3nvKUp3T5X8ZwQ3WkknHki4hTGn+KIxjP
8rmJE9RrhpXry6n7VcKuev7ptLCl1iPyOTRUK+bCLrNpxpzmGhhj8tXSQ601
np2PZ91mrQTnwd7Lc5FjLP+krm/EV8imOIfQfMac8kpoxTrOxubK53O/hb2m
WelGPuZ6Pp6/3Ze2qI0bdt15ig/VdSPVgnKNNLD3qaHEn0rr0boxTy0QP3K+
4n9x/X4ja7tp7wsvvHDR8fS6c3Wc9e35LJ2T54U/kI9hc68RtVFg0+M3iJx8
7avfdw9q3/L3c9/TdDSA35q/SdyND9c9Ir8vWT6eb3NePEvamv6hy+ieum2N
neL5VKMQ+pPQemMb/Vgi58VYzFr/YQPEJPjrat8UO+G5M/ZynHGjemn6MTHK
WiMYg8pVc3zcbza2kp0Q82z5uFwz26UNjFnZgre97W2dNtRWfVgfwOc6H/Zx
CjSpdumrCxx4HsR1zYeT0+P61Wyn8+Qy1HXsaFVtImbrWDrROou+i60fq++5
VqTeWx1oPutbmLfOL0xXWLMo/XqrA62lbfn5+Ls+9KEPNduWDaILxRJa9xbN
J6ag76PJ6ZO++RgBLSSXl0+L1qHZ+upY0j32WytP3pqNLfBabK01P52rWhps
pfMy1lXTp3UsXLsxtH7a8bRVX90L96Z7kr+GLfId7Gp5Tq11z+VXO4fyOD6/
WusFMT+9PN61l+tTBV6zn52PdvI7lO/NetPLgz7QfvqraFu5XWXb1mMIOsSY
QZ/nXpFbJscq/Xqrg/5V23oGPa99bUv7PPe5z+00Rswn9bzF7zi2teyFz6H7
4rc3lmvVuQbNJ08j+jH5Jn22NmB3zB8r7y/zQPvq3oKtUK9FW2gTY5CWnag5
77zz5ponrt9wPlNrP4vXmH8c10Ef9eXGaEPt+kd/9EddW/H5advW+jfrhdR7
SZIkSZIkG5vUe0mSJEmSJBubtdJ74kri8GX9niRJkiRJkmT1WSu9J0feuhFJ
kiRJkiTJpmWt9J756eZ/9a0JkSRJkiRJkqwOsW72WuTvzTOvOkmSJEmSJFke
sfb95tZ71trPeG6SJEmSJMmmZ630nnUZU+8lSZIkSZJsetbSv6eeTF0TKkmS
JEmSJFld1krv5fzcJJmGumJ9tTNWC3VJvvCFL/TuV+fN3K7NibWahuoTJ0mS
JNNJvTeO+jL8kWPoM9UffPCDH9zVTlVvNGuArg7q4qiBtueee3a1PU877bRJ
9XdaqEN24IEHdvUr1S278sorB49XS0iNWfUgH/3oR3f/75tnpJ6R++XSSy/t
6vc+4hGPmB155JG9n21+uuPUV3KNNerzqL1Z17rE6aef3tXxcR1q0LaeYbV9
fH65qQ9p/csLLrhg4TX1LNWgq1EPTW0n9c21u1qZarD2QROqB+V5edzjHtfV
Gm7VU//xj3/cfa/Pb63BeeONN3Z1d9UBS5IkSVbOWuk9ddG33377yXXtNjf6
PzXsbVGLegh9NS2y7777zn760592NQ/V01N/WU3VZPlcdtllneY59dRTO+3w
s5/9bPbIRz5ytvfee8+l+dQIpe/UD1fXRX1H9V632267rl5ki5tuumn2a7/2
a13dcN+lZuIf/uEfznbZZZfmM6NW5Vvf+tZO9++2227dfeP/fdBzcX+5V+Ke
i019cNdd1nBU+1Qdb/cbv5/rUN/3dre73eyKK65Y9Pl04pQ667/0S7+0aGyi
tudznvOc7nU1g7/xjW90r7uXb3WrWzU1nxqa22yzTXcu6oV7JuhRY59a88U6
ULatt956yXV7Te3OrN+aJEmyOqyV3nvmM585u+9977tu7bn+iW47+eSTR/Ue
v94znvGMrm8sY176aDpBP/7Nb35zc5z2hoNmuMc97jH7rd/6rU6vBbTXDjvs
0OmeqZx//vnd76hOd8k73/nO2VZbbdXV4i7h1+MH3GmnnWb/+I//uPC6e5Yv
jOYbGq9YY9L38UX2Ueq91lZrPfDN2Xf99dcvep2P77a3vW1Xqzz48Ic/3B3r
Gugo/9Jf5XanO92p+8wSNdK9j67+13/914XXaW2v77rrrouOd9/zAfLpif0G
4rG0utfr44euO7VekiTJ6rJWeu9BD3rQFhHP/chHPjKq9/Rp9rfiYTfccEO3
j15J5kfMUvudddZZS/aJq/I1OWYMWtH9tu222y7RaLQ9TUn3lPli8tl899Oe
9rQlnycOaR8938dUvefeoKPo0be97W0LG41Zaz3H8fmJq5a6CjfffHOnW42j
4n30ntiqOLPr9G8JLbf77rsvik/zF97tbnfrvuc73/nOouN9Lm34pCc9adHr
r3jFK7prFSOuEYev9TS9d6973au7nosvvnjRdbuO1HpJkiSrS+bvDTNF78nT
s/+///f/vmSfuBY/FL9L+vjmg56hw2iFL33pS0v2f+xjH+vaXb7kGOKcjjXO
aPH4xz++2y8WGdA0XmvFLmkSMUe/bZ+Pb6re23///UfPPzjllFO6z5Qj1+Ku
d71rtz98fOKvT3nKU3o/74tf/GIXny6R3+cz5AVO4Z//+Z873557/Otf//qS
/e9973u7z5P7GNB797nPfSZ9fpIkSbJyUu8NM6b3QpPYT3+0kKsYsblkOn/5
l3/ZtRs/Uws6w/4pWvrZz352dyxt3uKNb3xjt/+AAw7o/jafgL/Pa1/72tea
77nf/e7X7eefajFF71100UVdjZupyCv1mXLlWvBFlmMP8zWMOVq4d/fYY48l
c2APPvjg7jPkIU4htDSt2cJ8DPvFdeO7PvvZzzbHR0mSJMmmIfXeMGN6T5ww
9o/pvaOOOmpTnuqGI/xMY3rP9ulPf3rws8yTnaL37nnPe3Z/mzcbnz2m9/rm
Y0z1751zzjldPiLt5x6xvf3tb2+uTSkXdIreO+yww3q/MzB3tvbtiaOaB+Mz
zGVxDieeeGLnizOv5QlPeMISfepzpug9W8wz5t8TAzb/5aMf/ejCdYvbf/e7
3x099yRJkmQ+Uu8NM6b3/uIv/mJhfmOZ018Sem/Kmi7JfyFnP+YMtCj1Xt/8
2jjO2h6O+8AHPtA8JvRe+KDe//73d3+bk/G///f/br4n9J75qy2m6j161rxW
1+le2Wuvvbr38RvLvwvMFb7NbW7T7fvWt77V/LzQe7/6q7+6JPevhG/PMXWc
nC8w2pTmlNsn/+7cc8/t5iSZUy9n8k/+5E8W3hO+00MPPbT5XaXei3g5vWc+
sfaWv+i6zW2PuSX1nJokSZJkZaTeG0a/GH2VHP2a8EFN8e/pK5Pp8CVN9e8N
+U7l18VxY/698EG97nWvm+zfsy5fiyl6j4ajo8SPQ5/xsdGbtN2tb33r2Wc+
85nu9U984hML5zTm37MN6T1rENJXNaXeu/e9771kjeUY39B8xkLYb7/9Jvv3
QifyG/JB0tbmt8O/1iGkfeVs9sXJkyRJkvlJvTeOvk0bRf9Wknpv03FL0HtD
WLPI+x/60Id2447V0nv0pLmxrTnPpd4Tb63xmU9+8pMXxYyXo/eGiHbjWxTv
TZIkSVZO6r1xQu+Zy1hT9o9jeu+II47Y1Ke6oXj3u989We8N1cigUazTN0Xv
iXHyM5n/MVXvvepVr2ruX6nek5MY5yB+S6fxfU3Re4ccckg3V6OFeTD8hq1a
ZeX9LH+vxSWXXLIQd0WsmTNF7335y18evW5zfON4tUqSJEmSlZN6b5zQey1y
vsam45YwX+Pqq69etI50CX1nvUCfEWvXrcZ8Dfvufve7N/dN0XvWIS/13nLm
axg7teqsgd42P2SobZMkSZL5SL03Tui9lm9C32RNtz69Jw5nfTj7xeOS6ajv
NaT3+Lzsp4kiB6yPl7zkJYN6L+aGvPSlL+3+pkVooj69Z781ie2PWmM1Y3ov
5gJZY7gFXRX+vDgH9TCG9J418+ynlVu4H/n2nv70pzf38wlak2ZI76lpa7+1
YWDOx5Dei3V1wndqHWv5ea985Subx1sTOtq27xySJEmS+Ui9N86Qfw+xBm6r
/wof1BRNkixGe9HKtMFXv/rVJfv5vKbGyUOT9NU5Uee11vR/8Ad/0L3Wmitq
noV96lz05cmN6T1rofTlhSLWKVbvN/LYrInntRe84AXN98T83T6fYdRJ69N7
cB875uijj27uj3MI35u6c+Z23OEOd1gyvwNvetObuuOPO+647m9zqf1tHZoW
V111Vbff3N3WmjRJkiTJ/KTeGyf0nrylFr/4xS+69T7E92qiZqs1zJL54d/R
fieddNKSfQcddFCnb+o6snK+6vVZ+K2sF0KTiNWWyGPzG9OCpXb7/ve/P7vj
He/YxeNrXvOa13TnVdbjqJmq9/rqc5gHYn+57jENbB6D+rW1prvsssu649XR
7cvdi1y7Ib3Hv6bW7p577rlkn+90XrRYed6xfs2ZZ5655D0Pe9jDunaPNWRC
7914443N73/sYx/b+5snSZIkyyP13jih91r57QFfkzhZOW9A7MzatXRg+vaW
h3Z73OMe12mcUl/QDvx+9RxSMXOv+72sbVeilrE50nRYiRhuqUdKzMWg+a69
9tqF16Le7oEHHji45ol1VpyHWHIL98qjHvWoJdpMHJdm817focZtifWJ3Wv1
eiU+S12z+viSqBE3pPcQNTNe+MIXLnqdr1M9E9qyhI/P+oH8sdaODvhV6xrH
XrMWZd12dObxxx/fHc/fyjeeJEmSrA6p99pcfvnlXZ/2lre8ZSHXXH+mD7dO
xo9+9KNFx+uzab7ddtut8+Xpk9VFlS+WMamVQb+IrdJ81gA+++yzu7XjrCdS
awa/m9+KJhFzreELFIPl6/P7HnnkkZ2f8Lrrrmt+t89/wxve0OXyWaPlwgsv
7NYfOeGEExbpmoA+s46werzWkzFPVp1dr1kDpdZZnjtzSdxXscnZE8M9+eST
O99xC3FZmlOM1HWoTWtd5LHaFPSb9hmrZeZ+dm60tnw+5+V+fupTn9qsZQx6
zXwRzzW/tjkwfKY0Yv078Z3W1+2azUfpa9skSZJk+aTea0MPyJHS1+sj1Z1X
7yq2H/zgB8338elZH9cxQ/7AZD7oDz4k7WqtYHNX+46T/zW07gefIS3os+i8
IR9dQHOaj+M9P/vZzwaPE/MsfXbxms39UeNanG/cW+Yat45rvc88V+8Ro+6L
4Zb8/d//fecXnHLN8Jlx7kN+w/J49Uic06WXXtr7O8HvIKYb102rT/mOJEmS
ZH5S7yVJkiRJkmxsUu8lSZIkSZJsbFLvJUmSJEmSbGzoPXP65NxsTlLvJUmS
JEmSbB7oPbWLNjep95IkSZIkSTYPqfeSJEmSJEk2Nqn3kiRJkiRJNjap95Ik
SZIkSTY2qfeSJEmSJEk2Nqn3kiRJkiRJNjbqY6beS5IkSZIk2bj83u/93prp
vT333HOzf2+SJEmSJMktjZNPPnnN9N5rXvOazf69SZIkSZIktzQe+MAHrpne
O+CAAzb79yZJkiRJktzSWEu9l/l7SZIkSZIkm57Ue0mSJEmSJBubtdR7D3jA
Azb79yZJkiRJktzSWEu9l/M1kiRJkiRJNj1rqfee9axnzX7+85+v6fZv//Zv
vX/7P37xi18sbMF//Md/TPr8K6+8cva3f/u3a36dK9n+/M//fHb++ecv2r75
zW8u/P/jH//4mp/jamw/+9nPllyn7aqrrpr0+o9+9KPZhz70oe7/l156afeZ
jlnr62ptn/zkJ5vXtNzt4osvXvNrGts+//nPT76em266aeF96/U37Nvch/P+
ftddd93CvftP//RPa34NU7dPfOITk67vfe9738LzfdFFF82++tWvdnbNZ9xw
ww2z97///bOf/OQn3b9eu/7662ff+9731vz6Wts111wzeK3/63/9r9l73/ve
7v9f//rXZ9/61rdmn/rUp9b8vOfdfvjDH47+rpdccsnC8R/84Ae3qHu33OiE
6E8uvPDC2de+9rXunr3iiisWrpX9+ulPf9odt1x7e//733/N9N5/+2//bc03
awButdVWC3/Tv+X/f/d3f3e28847d9td7nKX7m/bYx7zmDU/99xWd/Mbr/U5
5JZbbrnlltum2tZC75100kmzI488cl1sNN/97ne/7v/074EHHtj933ySO97x
jou2bbfddrbHHnt0/671ea/Wts8++8wOP/zw7v977733bL/99uv+v9dee3XX
fNhhh81e8IIXzI4//vjZq1/96m7jH7Kpx+fYj33sY7PnP//5a34tK9n+6I/+
aOG66u3MM8+cnX766Yte++M//uPZcccd172+1uc+72a82Het5e/7tre9rTv+
mGOO6f5+61vf2v39rne9a+GzTj311Nk555yz5tfU2owr4/9vectbeq/Z9trX
vrYbT5evHXXUUWt+DfNuL37xi0d/W74Q9/Rpp502O+uss7p/1/q8592s58X+
uJ4TTzyx+/3q+9Z96pr9P/4tt/V875bbgx/84M4Wu5/PPvvs7hr58MpjtMEp
p5zS/V/MxTHW113rc59323fffbtr3XXXXTsb6zrOOOOMhf1sbtzDa32uQ1tp
e8Y2fadr0o+yta94xSu614899tjZ5Zdfvqrn5bOTJEmSJEmSJEmSJEmSJEmS
JEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmS
JEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmS
JEmSJEnG+P/MwTwT
     "], {{0, 291.75}, {477., 0}}, {0, 255},
     ColorFunction->RGBColor,
     ImageResolution->{96, 96}],
    BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
    Selectable->False],
   DefaultBaseStyle->"ImageGraphics",
   ImageSizeRaw->{477., 291.75},
   PlotRange->{{0, 477.}, {0, 291.75}}]], "Input",ExpressionUUID->
  "2c1b02b0-ba1a-2b42-8376-a03494831259"],
 "\n\n"
}], "Text",
 CellChangeTimes->{{3.9538098191543446`*^9, 3.9538098480294933`*^9}, {
   3.953809887256834*^9, 3.953809949396124*^9}, {3.953809983289524*^9, 
   3.9538100984189625`*^9}, {3.9538101388435555`*^9, 3.953810198409048*^9}, {
   3.9538102993396473`*^9, 3.9538104963125477`*^9}, {3.953810715021736*^9, 
   3.9538107534971104`*^9}, {3.9538107970170536`*^9, 
   3.9538107991785564`*^9}, {3.953810859365364*^9, 3.953810980866707*^9}, {
   3.95381102258086*^9, 3.9538110239249516`*^9}, 3.9538110622603416`*^9, {
   3.95381111104331*^9, 3.9538111467266064`*^9}, {3.953811202687256*^9, 
   3.9538112246978264`*^9}, {3.953811258732477*^9, 3.9538112690738754`*^9}, {
   3.953811410400303*^9, 3.9538114273391438`*^9}, {3.953811474534048*^9, 
   3.953811475784296*^9}, {3.953811654842924*^9, 3.953811674379883*^9}, {
   3.9538117046444855`*^9, 3.9538117052859993`*^9}, {3.9538117362435474`*^9, 
   3.9538117707539215`*^9}, {3.9538118450549507`*^9, 3.953811846063797*^9}, {
   3.9538119333402348`*^9, 3.953811957263008*^9}, 3.953812049024456*^9, {
   3.95381208269417*^9, 3.9538120883355694`*^9}, {3.9538121355531044`*^9, 
   3.953812191906233*^9}, 3.953812229392124*^9, {3.953812337663248*^9, 
   3.9538124000309315`*^9}, {3.953812439286625*^9, 3.9538124544346695`*^9}, {
   3.9538126302508125`*^9, 3.953812770768837*^9}, {3.953812809475485*^9, 
   3.953812831516098*^9}, {3.9538129236027164`*^9, 3.953812965652714*^9}, {
   3.9538130596523285`*^9, 3.9538131584481773`*^9}, {3.953813199771902*^9, 
   3.953813214146641*^9}, {3.953813353428673*^9, 
   3.9538133542911224`*^9}},ExpressionUUID->"ccc5045f-8e11-954c-9e15-\
fe2b9f163f03"]
}, Open  ]],

Cell[CellGroupData[{

Cell["III.2 Limiti e contraddizioni", "Subsection",
 CellChangeTimes->{{3.9538134978771095`*^9, 3.953813521558071*^9}, {
  3.9538135659493446`*^9, 
  3.953813579521612*^9}},ExpressionUUID->"74a6b7e9-6aa1-9047-a887-\
3c7ed2e676df"],

Cell["", "Text",
 CellChangeTimes->{{3.9538135779198055`*^9, 
  3.9538135812145176`*^9}},ExpressionUUID->"5a63c567-02c8-d84a-828e-\
116cfa832986"],

Cell["\<\
Chi ha giocato all\[CloseCurlyQuote]impiccato nella vita reale sa che il \
modello matematico presentato \[EGrave] poco realistico. Perch\[EAcute]? \
Perch\[EAcute] ignora totalmente l\[CloseCurlyQuote]esperienza, l\
\[CloseCurlyQuote]intuito e le strategie del giocatore.
Con i parametri:
- \|01d45b = 26 (numero delle lettere dell\[CloseCurlyQuote]alfabato)
- \|01d458 = 7 (7 errori massimi concessi)

Il modello suggerisce che la parola pi\[UGrave] difficile da indovinare abbia \
10 lettere distinte. Secondo il calcolo, se il guesser sceglie lettere a \
caso, ha solo 0.15% di probabilit\[AGrave] di vincere. Ma nella \
realt\[AGrave] i giocatori vincono molto pi\[UGrave] spesso! Nessuno \
giocherebbe a un gioco cos\[IGrave] frustrante dove si perde il 99.85% delle \
volte.

Limite del modello:
- le parole da 10 lettere distinte sono rare
- il modello non tiene conto dell\[CloseCurlyQuote]intelligenza del giocatore \
(i guesser non indovinano a caso, usano la conoscenza della lingua come la \
frequenza delle lettere, la probabilit\[AGrave] condizionata es. se c\
\[CloseCurlyQuote]\[EGrave] una \[OpenCurlyDoubleQuote]q\
\[CloseCurlyDoubleQuote], \[EGrave] probabile che sia seguita da \
\[OpenCurlyDoubleQuote]u\[CloseCurlyDoubleQuote])


L\[CloseCurlyQuote]intuizione potrebbe suggerire che parole pi\[UGrave] corte \
siano pi\[UGrave] difficili. Perch\[EAcute]? Perch\[EAcute] \[EGrave] pi\
\[UGrave] difficile riconoscere uno schema o un pattern con poche lettere \
disponibili. Esempio: anche se sai che una parola ha 3 lettere, non \[EGrave] \
detto che tu riesca a trovare la parola giusta in tempo (potrebbe essere \
\[OpenCurlyDoubleQuote]sia\[CloseCurlyDoubleQuote], \
\[OpenCurlyDoubleQuote]mia\[CloseCurlyDoubleQuote], \
\[OpenCurlyDoubleQuote]zia\[CloseCurlyDoubleQuote] ecc.). 

Il modello dell\[CloseCurlyQuote]urna \[EGrave] interessante e utile per \
analisi teoriche, ma non rappresenta fedelmente l\[CloseCurlyQuote]esperienza \
reale del gioco, dove:
- contano intuizione, strategia, e conoscenza linguistica,
- le parole usate sono spesso pi\[UGrave] brevi o pi\[UGrave] comuni,
- i guesser sono pi\[UGrave] intelligenti di un pescatore casuale di lettere!


\
\>", "Text",
 CellChangeTimes->{{3.9538135749310646`*^9, 3.9538137245457573`*^9}, {
  3.953813779077057*^9, 3.953813965142599*^9}, {3.9538140251245174`*^9, 
  3.9538140448072395`*^9}, {3.9538140754286385`*^9, 3.9538141005627537`*^9}, {
  3.9538141345353928`*^9, 
  3.9538141495042686`*^9}},ExpressionUUID->"c16fd781-928c-a74d-8c31-\
aaafb64517c4"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["IV Guida all\[CloseCurlyQuote]interfaccia", "Section",
 CellChangeTimes->{
  3.9538884301123066`*^9},ExpressionUUID->"32843ab8-cabf-2f4d-8dc5-\
10170d264a80"],

Cell["\<\
Questa guida \[EGrave] pensata per aiutare gli utenti alla prima esperienza \
con l\[CloseCurlyQuote]applicativo a comprendere in modo chiaro le sue \
funzionalit\[AGrave] e a giocare con maggiore consapevolezza. L\
\[CloseCurlyQuote]applicazione \[EGrave] un gioco interattivo basato sull\
\[CloseCurlyQuote]indovinare una parola misteriosa, lettera per lettera. L\
\[CloseCurlyQuote]interfaccia utente \[EGrave] strutturata in modo semplice e \
intuitivo, ed \[EGrave] composta dalle seguenti sezioni principali:

Schermata iniziale (questa sezione consente all\[CloseCurlyQuote]utente di \
configurare i parametri di gioco prima dell\[CloseCurlyQuote]inizio della \
partita):
- Selezione della difficolt\[AGrave]: la difficolt\[AGrave] influisce sulla \
lunghezza o complessit\[AGrave] delle parole da indovinare.
- Seed (opzionale): il seed \[EGrave] un valore facoltativo che pu\[OGrave] \
essere inserito per rendere la partita riproducibile: inserendo lo stesso \
seed, il gioco generer\[AGrave] la stessa parola, ci\[OGrave] \[EGrave] utile \
per sessioni di test o sfide tra utenti.
- Inizia partita: una volta configurati i parametri, \
l\[CloseCurlyQuote]utente pu\[OGrave] premere il pulsante \
\[OpenCurlyDoubleQuote]Inizia partita\[CloseCurlyDoubleQuote] per avviare una \
nuova sessione di gioco con le impostazioni selezionate.


Schermata di gioco (questa sezione consente all\[CloseCurlyQuote]utente di \
svolgere la partita):
- Punteggio: indica il punteggio corrente dell\[CloseCurlyQuote]utente, \
calcolato in base tentativi falliti e riusciti.
- Parola da indovinare: viene mostrata la parola da indovinare sotto forma di \
sequenza di lettere, alcune delle quali potrebbero essere gi\[AGrave] state \
rivelate grazie alle scelte corrette effettuate dall\[CloseCurlyQuote]utente. \
Le lettere non ancora indovinate restano nascoste.
- Suggerimento: fornisce un suggerimento utile per aiutare \
l\[CloseCurlyQuote]utente a indovinare la parola, ovvero le occorrenze di un \
carattere.
- Pulisci: consente di azzerare la sessione (punteggio, lettere indovinate, \
errori).
- Mostra soluzione: rivela l\[CloseCurlyQuote]intera parola corretta.
- Errori: mostra il numero totale di errori commessi rispetto al massimo \
consentito (ad esempio, 3/6 significa che l\[CloseCurlyQuote]utente ha \
commesso 3 errori su un massimo di 6).
- Stato del gioco (impiccato): nella parte centrale \
dell\[CloseCurlyQuote]interfaccia \[EGrave] visualizzata una rappresentazione \
grafica dell\[CloseCurlyQuote]impiccato, che si evolve progressivamente a \
ogni errore. Il disegno serve come feedback visivo per indicare quanto l\
\[CloseCurlyQuote]utente sia vicino a perdere la partita.
- Tastiera interattiva: una tastiera virtuale consente \
all\[CloseCurlyQuote]utente di selezionare le lettere (lettere verdi: lettere \
gi\[AGrave] indovinate correttamente, lettere rosse: lettere selezionate ma \
errate, lettere bianche: lettere non ancora selezionate).
- Nuova partita: consente di generare una nuova partita e di tornare quindi \
alla schermata initiale.

Schermata di classifica (questa sezione consente di salvare il punteggio dell\
\[CloseCurlyQuote]utente nella classifica):
- Classifica: riporta i nomi utenti con i relativi punteggi per partita (nel \
caso in cui l\[CloseCurlyQuote]utente abbia deciso di salvare il proprio \
punteggio).
- Inserimento nome utente: permette all\[CloseCurlyQuote]utente di inserire \
il proprio nome e di salvare in classifica il risultato ottenuto nella \
partita appena conclusa.


L\[CloseCurlyQuote]obiettivo dell\[CloseCurlyQuote]utente \[EGrave] \
indovinare l\[CloseCurlyQuote]intera parola prima di raggiungere il numero \
massimo di errori consentiti. Ogni tentativo errato aggiunge una parte al \
disegno dell\[CloseCurlyQuote]impiccato. Il gioco termina con la vittoria \
dell\[CloseCurlyQuote]utente se la parola viene completata o con la sconfitta \
se si raggiunge il numero massimo di errori consentito.\
\>", "Text",
 CellChangeTimes->{
  3.9538884564367447`*^9, {3.953888925400326*^9, 3.9538889638276024`*^9}, {
   3.9538891885424232`*^9, 3.953889325336075*^9}, {3.9538902374686527`*^9, 
   3.953890238739376*^9}},ExpressionUUID->"f98f5437-c9ea-a84a-a977-\
2b7b22a225d0"]
}, Open  ]],

Cell[CellGroupData[{

Cell["V Avviare il gioco", "Section",
 CellChangeTimes->{{3.95388980043042*^9, 
  3.9538898049355545`*^9}},ExpressionUUID->"7de85d76-2e4b-0b48-bae7-\
885405b2100d"],

Cell["\<\
Per poter avviare correttamente il gioco, nella parte alta dello schermo \
cliccare \[OpenCurlyDoubleQuote]Evaluation\[CloseCurlyDoubleQuote] e quindi \
\[OpenCurlyDoubleQuote]Evaluate Notebook\[CloseCurlyDoubleQuote]. Questo \
permetter\[AGrave] di avviare una nuova partita. 

Segnaliamo agli utenti che il caricamento delle funzionalit\[AGrave] del \
gioco potrebbe richiedere un po\[CloseCurlyQuote] di tempo: bisgona quindi \
attendete il corretto caricamento.
Qualora l\[CloseCurlyQuote]utente decidesse di terminare la partita, potr\
\[AGrave] cliccare la X nella parte superiore destra dello schermo.\
\>", "Text",
 CellChangeTimes->{{3.953889971418089*^9, 
  3.9538900143678665`*^9}},ExpressionUUID->"797a909f-9942-6841-a48f-\
26a7069f8ec1"]
}, Open  ]],

Cell[CellGroupData[{

Cell["VI Gioco", "Section",
 CellChangeTimes->{{3.9529514299157486`*^9, 3.952951452633795*^9}, {
  3.9538885026560383`*^9, 3.953888503018879*^9}, {3.9538898077030296`*^9, 
  3.9538898082081985`*^9}},ExpressionUUID->"eaebc9a6-c66b-9c4d-97a5-\
af5c8a4e5c8c"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"SetDirectory", "[", 
   RowBox[{"NotebookDirectory", "[", "]"}], "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Get", "[", "\"\<hangman.m\>\"", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"GeneraInterfaccia", "[", "]"}]}], "Input",
 CellChangeTimes->{{3.9529515925503464`*^9, 3.952951593525772*^9}, 
   3.953961409826809*^9, {3.9539615345330563`*^9, 3.953961553547783*^9}},
 CellLabel->
  "In[115]:=",ExpressionUUID->"ef1e26f2-3d2e-da4c-b9f1-24f1de8d921a"],

Cell[BoxData[
 DynamicModuleBox[{HangmanGame`Private`seed$$, HangmanGame`Private`fase$$ = 
  "selezione", HangmanGame`Private`gamemode$$ = 1, 
  HangmanGame`Private`parola$$, HangmanGame`Private`stato$$, 
  HangmanGame`Private`errori$$, HangmanGame`Private`score$$, 
  HangmanGame`Private`letteraUtente$$ = "", HangmanGame`Private`messaggio$$ = 
  "", HangmanGame`Private`maxErrori$$ = 6, 
  HangmanGame`Private`classificaMostrata$$ = False}, 
  DynamicBox[ToBoxes[
    Switch[HangmanGame`Private`fase$$, "selezione", 
     Column[{
       Style["\|01f3afSeleziona la difficolt\[AGrave]", Bold, 16], 
       RadioButtonBar[
        Dynamic[HangmanGame`Private`gamemode$$], {
        1 -> "Facile", 2 -> "Media", 3 -> "Difficile"}], 
       Row[{"Seed (opzionale): ", 
         InputField[
          Dynamic[HangmanGame`Private`seed$$], Number]}], 
       Button["Inizia partita", If[
          Not[
           NumberQ[HangmanGame`Private`seed$$]], HangmanGame`Private`seed$$ = 
          Automatic]; {
          HangmanGame`Private`parola$$, HangmanGame`Private`stato$$, 
           HangmanGame`Private`errori$$, HangmanGame`Private`score$$} = 
         HangmanGame`GeneraEsercizio[
          HangmanGame`Private`gamemode$$, HangmanGame`Private`seed$$]; 
        HangmanGame`Private`fase$$ = "gioco"; 
        HangmanGame`Private`letteraUtente$$ = ""; 
        HangmanGame`Private`messaggio$$ = ""; 
        HangmanGame`Private`classificaMostrata$$ = False; Null, ImageSize -> 
        Medium]}, Spacings -> 2], "gioco", 
     Column[{
       Style["Gioco dell'impiccato", Bold, 20], 
       Dynamic[
        Row[{"Punteggio: ", 
          Style[HangmanGame`Private`score$$, Blue, Bold]}]], 
       Dynamic[
        Row[
         Riffle[
          Map[If[# === "_", 
            Style[" _ ", Gray], 
            Style[#]]& , HangmanGame`Private`stato$$], " "]]], 
       Row[{
         Button[
         "\|01f4a1Suggerimento", {
           HangmanGame`Private`stato$$, HangmanGame`Private`errori$$, 
            HangmanGame`Private`score$$} = 
          HangmanGame`Suggerimento[
           HangmanGame`Private`parola$$, HangmanGame`Private`stato$$, 
            HangmanGame`Private`errori$$, HangmanGame`Private`score$$, 
            HangmanGame`Private`gamemode$$]], 
         Spacer[20], 
         Button[
         "\|01f9fdPulisci", {
           HangmanGame`Private`stato$$, HangmanGame`Private`errori$$, 
            HangmanGame`Private`score$$} = 
          HangmanGame`Pulisci[HangmanGame`Private`parola$$]], 
         Spacer[20], 
         Button["\|01f50eMostra soluzione", 
          HangmanGame`MostraSoluzione[HangmanGame`Private`parola$$]]}], 
       Dynamic[
        Row[{"Lettere sbagliate: ", 
          StringJoin[
           Riffle[HangmanGame`Private`errori$$, ", "]]}]], 
       Dynamic[
        Row[{"Errori: ", 
          Length[HangmanGame`Private`errori$$], "/", 
          HangmanGame`Private`maxErrori$$}]], 
       Dynamic[
        Style[HangmanGame`Private`messaggio$$, Blue]], 
       Dynamic[
        HangmanGame`Private`DisegnaImpiccato[
         Length[HangmanGame`Private`errori$$]]], 
       Dynamic[
        Column[
         Map[Row[
           Join[{
             Spacer[Part[#, 1] 25]}, 
            Table[
             With[{HangmanGame`Private`l$ = HangmanGame`Private`lettera}, 
              Button[HangmanGame`Private`l$, 
               Module[{HangmanGame`Private`guess$ = ToLowerCase[
                   StringTrim[HangmanGame`Private`l$]]}, {
                  HangmanGame`Private`stato$$, HangmanGame`Private`errori$$, 
                   HangmanGame`Private`score$$} = 
                 HangmanGame`Private`AggiornaStato[
                  HangmanGame`Private`parola$$, HangmanGame`Private`stato$$, 
                   HangmanGame`Private`guess$, HangmanGame`Private`score$$, 
                   HangmanGame`Private`gamemode$$, 
                   HangmanGame`Private`errori$$]; 
                HangmanGame`Private`messaggio$$ = If[
                   MemberQ[
                   HangmanGame`Private`parola$$, HangmanGame`Private`guess$], 
                   "Lettera corretta!", "Lettera sbagliata!"]; Null], Enabled -> 
               And[
                 Not[
                  MemberQ[
                   Join[
                   HangmanGame`Private`stato$$, HangmanGame`Private`errori$$], 
                   ToLowerCase[HangmanGame`Private`l$]]], 
                 MemberQ[HangmanGame`Private`stato$$, "_"], 
                 Length[HangmanGame`Private`errori$$] < 
                 HangmanGame`Private`maxErrori$$], Background -> Which[
                 MemberQ[HangmanGame`Private`stato$$, 
                  ToLowerCase[HangmanGame`Private`l$]], LightGreen, 
                 MemberQ[HangmanGame`Private`errori$$, 
                  ToLowerCase[HangmanGame`Private`l$]], LightRed], 
               ImageSize -> {40, 40}]], {HangmanGame`Private`lettera, 
              Part[#, 2]}]], 
           Spacer[5]]& , HangmanGame`Private`righeTastiera], Spacings -> 1]], 
       
       Dynamic[
        If[
         Or[
         HangmanGame`Private`stato$$ === HangmanGame`Private`parola$$, 
          Length[HangmanGame`Private`errori$$] >= 
          HangmanGame`Private`maxErrori$$], If[
           Not[HangmanGame`Private`classificaMostrata$$], 
           HangmanGame`Private`classificaMostrata$$ = True; 
           HangmanGame`Private`MostraClassificaGUI[
            HangmanGame`Private`score$$]; Null]; Style[
           If[
           HangmanGame`Private`stato$$ === HangmanGame`Private`parola$$, 
            "Hai vinto!", "Hai perso! La parola era: " <> 
            StringJoin[HangmanGame`Private`parola$$]], 
           If[
           HangmanGame`Private`stato$$ === HangmanGame`Private`parola$$, 
            Green, Red], Bold], ""]], 
       Button[
       "\|01f504Nuova partita", HangmanGame`Private`fase$$ = "selezione"; 
        HangmanGame`Private`letteraUtente$$ = ""; 
        HangmanGame`Private`messaggio$$ = ""; Null]}]], StandardForm],
   ImageSizeCache->{
    392.27052116394043`, {69.37128926133737, 75.10322306533344}}],
  DynamicModuleValues:>{}]], "Output",
 CellChangeTimes->{3.953961561877598*^9},
 CellLabel->
  "Out[117]=",ExpressionUUID->"7d4e22d5-8de0-2142-b785-2ca0594d12a6"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\
VII Approfondimento: Hangman per migliorare l\[CloseCurlyQuote]apprendimento \
linguistico\
\>", "Section",
 CellChangeTimes->{{3.9529516736817017`*^9, 3.952951679762285*^9}, {
   3.9538210639475155`*^9, 3.953821085919277*^9}, {3.953888505964283*^9, 
   3.9538885066750183`*^9}, 
   3.9538898114668465`*^9},ExpressionUUID->"139cd4af-51d0-8949-86b2-\
d9dfe22c3d15"],

Cell["\<\

I giochi linguistici rappresentano un insieme di attivit\[AGrave] didattiche \
finalizzate alla pratica di specifici aspetti della lingua, come la \
grammatica, le strutture delle frasi, il vocabolario e \
l\[CloseCurlyQuote]ortografia. Come affermano Rezapanah e Hamidi (2013), \
questi giochi svolgono un ruolo fondamentale nello sviluppo delle competenze \
linguistiche degli studenti. Attraverso i giochi linguistici, gli studenti \
possono acquisire nuove conoscenze e vivere esperienze di apprendimento pi\
\[UGrave] coinvolgenti e divertenti. L\[CloseCurlyQuote]apprendimento della \
lingua, in questo modo, diventa pi\[UGrave] stimolante e gratificante.

Numerosi elementi rendono i giochi strumenti didattici efficaci, tra cui l\
\[CloseCurlyQuote]uso di regole, la promozione della cooperazione e la \
capacit\[AGrave] di rendere l\[CloseCurlyQuote]apprendimento pi\[UGrave] \
piacevole (Yolageldili e Arikan, 2011). Questo approccio rende le attivit\
\[AGrave] scolastiche pi\[UGrave] interessanti e coinvolgenti. Una delle \
tecniche pi\[UGrave] efficaci per migliorare la conoscenza del vocabolario e \
le abilit\[AGrave] comunicative \[EGrave] proprio quella dell\
\[CloseCurlyQuote]utilizzo dei giochi (Chirandon, Laohawiriyanon e Rakthong, \
2010). In altre parole, il gioco rappresenta una strategia utile per gli \
insegnanti, poich\[EAcute] aiuta gli studenti ad arricchire il proprio \
lessico e ad acquisire maggiore sicurezza nel comunicare, soprattutto durante \
le lezioni. 

Un metodo classico per esercitare l\[CloseCurlyQuote]alfabeto e il \
vocabolario \[EGrave] il gioco dell\[CloseCurlyQuote]Impiccato, considerato \
un vero e proprio gioco linguistico. Questo gioco permette agli insegnanti di \
insegnare l\[CloseCurlyQuote]alfabeto e nuove parole in modo semplice, \
dinamico e coinvolgente. Kartikawati (2014) sottolinea che, attraverso il \
gioco dell\[CloseCurlyQuote]Impiccato, gli studenti possono esprimere le \
proprie idee cercando di indovinare la parola segreta, favorendo cos\[IGrave] \
un\[CloseCurlyQuote]atmosfera di apprendimento pi\[UGrave] leggera e \
divertente. Durante il gioco, gli studenti riflettono sulle lettere che \
compongono la parola e cercano di identificarne il significato. Questo \
esercizio contribuisce anche a rafforzare la loro fiducia nell\
\[CloseCurlyQuote]esprimere pensieri e opinioni ad alta voce. Utilizzando il \
gioco dell\[CloseCurlyQuote]Impiccato, gli studenti non solo esercitano l\
\[CloseCurlyQuote]alfabeto e il vocabolario, ma migliorano tutte le abilit\
\[AGrave] linguistiche (Wright et al., 1984). Si tratta infatti di un gioco \
molto semplice da realizzare, che non richiede materiali complessi ed \
\[EGrave] facilmente adattabile a diversi contesti educativi. Il gioco \
\[EGrave] ampiamente usato nell\[CloseCurlyQuote]insegnamento delle lingue \
per diverse ragioni (Wright et al., 2006). In primo luogo, apprendere una \
lingua \[EGrave] un\[CloseCurlyQuote]attivit\[AGrave] impegnativa: \
comprendere, ripetere con precisione, adattare e utilizzare ci\[OGrave] che \
si \[EGrave] appreso nella comunicazione orale e scritta richiede sforzo. Il \
gioco, per\[OGrave], pu\[OGrave] aiutare gli studenti a mantenere vivo l\
\[CloseCurlyQuote]interesse e la motivazione nello studio. In secondo luogo, \
il gioco consente agli studenti di vivere la lingua piuttosto che limitarsi a \
studiarla. Questo \[EGrave] particolarmente importante per chi studia una \
lingua straniera: imparare nuovi vocaboli o costruire frasi mai usate prima \
pu\[OGrave] diventare un\[CloseCurlyQuote]esperienza concreta e coinvolgente \
se mediata da un gioco adatto. 

\
\>", "Text",
 CellFrame->{{0, 0}, {0, 0}},
 CellChangeTimes->{{3.9529508164207783`*^9, 3.9529508633924427`*^9}, {
   3.9538202947890625`*^9, 3.95382029585124*^9}, 3.9538210624656563`*^9, 
   3.95382121985907*^9, {3.9538212907264824`*^9, 3.9538213612570457`*^9}, {
   3.953821395520191*^9, 3.953821403832758*^9}, {3.9538214668352795`*^9, 
   3.9538214679688053`*^9}, {3.9538215021654625`*^9, 
   3.9538216639835625`*^9}, {3.9538220872091217`*^9, 
   3.953822088366028*^9}},ExpressionUUID->"e3081633-21b3-2e48-84e5-\
0493cc5c6747"]
}, Open  ]],

Cell[CellGroupData[{

Cell["VIII Commenti e lavoro futuro", "Section",
 CellChangeTimes->{{3.95382333373802*^9, 3.9538233378577366`*^9}, {
   3.953888513309351*^9, 3.9538885134979706`*^9}, 
   3.9538898165657883`*^9},ExpressionUUID->"3bf05045-1f20-a841-8e3b-\
4f999682df50"],

Cell["\<\
Nei lavori futuri, intendiamo approfondire ulteriormente le potenzialit\
\[AGrave] educative e computazionali del gioco \
dell\[CloseCurlyQuote]Impiccato, esplorando una sua variante particolarmente \
interessante: Evil Hangman. A differenza della versione classica, in cui il \
giocatore \[OpenCurlyDoubleQuote]setter\[CloseCurlyDoubleQuote] sceglie una \
parola segreta all\[CloseCurlyQuote]inizio del gioco e risponde alle ipotesi \
del \[OpenCurlyDoubleQuote]guesser\[CloseCurlyDoubleQuote] in modo coerente, \
nel gioco Evil Hangman il setter pu\[OGrave] modificare la parola segreta \
durante lo svolgimento della partita, a patto che ogni cambiamento sia \
coerente con le informazioni gi\[AGrave] fornite fino a quel momento. In \
altre parole, il setter ha il vantaggio strategico di adattare dinamicamente \
la parola segreta per rendere il compito del guesser pi\[UGrave] arduo. \
Questa variante apre interessanti prospettive sia dal punto di vista teorico \
\[LongDash] per le implicazioni legate alla complessit\[AGrave] \
computazionale e all\[CloseCurlyQuote]ottimalit\[AGrave] delle strategie \
\[LongDash] sia da quello educativo, grazie al potenziale utilizzo del gioco \
in ambienti didattici interattivi. 
Un altro possibile sviluppo futuro consiste nella creazione di un\
\[CloseCurlyQuote]applicazione didattica digitale, accessibile via web o su \
dispositivi mobili, pensata per essere utilizzata in classe o a distanza. \
Questa applicazione potrebbe offrire la possibilit\[AGrave] di selezionare la \
difficolt\[AGrave], il campo semantico (ad esempio animali, verbi, aggettivi) \
e la lingua, fornendo anche suggerimenti intelligenti per facilitare l\
\[CloseCurlyQuote]apprendimento lessicale e grammaticale. \
Un\[CloseCurlyQuote]altra possibile espansione del progetto riguarda l\
\[CloseCurlyQuote]adattamento del gioco a contesti plurilingue, per esempio \
confrontando lingue diverse come l\[CloseCurlyQuote]italiano e l\
\[CloseCurlyQuote]inglese, cos\[IGrave] da rafforzare il vocabolario e \
favorire il trasferimento interlinguistico: attraverso \
l\[CloseCurlyQuote]espansione cross-linguistica del gioco, sar\[AGrave] \
possibile confrontare lingue diverse (es. inglese-italiano, \
italiano-francese) per rafforzare il vocabolario in contesti plurilingue. Gli \
studenti potrebbero ad esempio giocare con parole in L2 ma ricevere indizi o \
definizioni in L1.\
\>", "Text",
 CellChangeTimes->{
  3.953823391057993*^9},ExpressionUUID->"4ff146a4-f38d-bf44-9c43-\
eaf0d6de72d1"]
}, Open  ]],

Cell[CellGroupData[{

Cell["IX Bibliografia e Sitografia", "Section",
 CellChangeTimes->{{3.952951697228281*^9, 3.9529517003257656`*^9}, {
  3.953823397931114*^9, 3.953823399109516*^9}, {3.9538885196449947`*^9, 
  3.9538885207479763`*^9}, {3.9538898213999996`*^9, 
  3.9538898217707634`*^9}},ExpressionUUID->"8f2a2eb0-1a5c-1045-8f47-\
f6c04a2aab53"],

Cell["\<\

 
 Schmidt Jr., H. How (knot?) to play hangman. Mathematics Magazine, 70(2), \
pp. 137\[Dash]141. 

  Barbay, J., & Subercaseaux, B. (2020). The Computational Complexity of Evil \
Hangman. arXiv.Org.
  
 Abrahamson, K. A., & Abrahamson, K. A. Fixed-parameter Tractability and \
Completeness IV: On Completeness for W (P) and PSPACE analogues. In Annals of \
Pure and Applied Logic, 73 (3), pp. 235\[Dash]277.
 
Munikasari, M., Sudarsono, S., & Riyanti, D. (2021). THE EFFECTIVENESS OF \
USING HANGMAN GAME TO STRENGTHEN YOUNG LEARNERS\[CloseCurlyQuote] VOCABULARY. \
Journal of English Education Program, 2(1). 

Manan, R. M. (2018). The Use of Hangman Game in Motivating Students in \
Learning English. Academic Journal Perspective\:202f: Education, Language, \
and Literature, 4(2), 139. 

Rezapanah, F. (2013). Investigating the Effects of Word Games on Iranian EFL \
Learners\[CloseCurlyQuote] Application of the Words in Writing Paragraph \
Essays. In International Journal of Applied Linguistics & English Literature, \
2(1).

Yolageldili, G. and Arikan, A. (2011). Effectiveness of Using Games in \
Teaching Grammar to Young Learners. Ilkogretim Online, 10(1), 219\[Dash]230.

Chirandon A, Laohawiriyanon Cholanda, Rakthong A (2010). The Effects of \
Teaching English through Games. The 2nd International Conference on \
Humanities and Social Sciences.

Wright A., Betteridge D., and uckby M. (1984). Games for Language Learning \
New Edition. Great Britain: Cambridge University Press.

Wright A., Betteridge D., and Buckby M. (2006). Games for Language Learning \
Third Edition. UK: Cambridge University Press.
\
\>", "Text",
 CellFrame->{{0, 0}, {0, 0}},
 CellChangeTimes->{{3.952950896731003*^9, 3.9529509473394775`*^9}, {
   3.9538204456160583`*^9, 3.9538204620899143`*^9}, {3.953820521329481*^9, 
   3.953820594811884*^9}, {3.9538206527967625`*^9, 3.953820690358219*^9}, {
   3.953820910649765*^9, 3.953820922108036*^9}, {3.953820986952196*^9, 
   3.953821001122423*^9}, {3.9538217425580883`*^9, 3.9538218047598953`*^9}, {
   3.9538218468945236`*^9, 3.9538218684216766`*^9}, {3.9538219230078983`*^9, 
   3.9538219585989113`*^9}, {3.9538220135963974`*^9, 3.953822064511101*^9}, {
   3.9538221680801334`*^9, 3.9538221718196487`*^9}, 
   3.953822888306425*^9},ExpressionUUID->"54d97db6-28ae-ac41-87f8-\
26d4dd6bd54d"]
}, Open  ]]
}, Open  ]]
},
WindowSize->{718.5, 729.75},
WindowMargins->{{Automatic, 0}, {Automatic, 0}},
DockedCells->{
  Cell[
   BoxData[
    DynamicModuleBox[{LinterUIDockedCell`Private`notebook$$}, 
     GraphicsBox[{
       InsetBox[
        TemplateBox[{
          PaneBox[
           StyleBox[
           "\"Code Analysis\"", FontColor -> GrayLevel[0.4], FontFamily -> 
            "Source Sans Pro", FontWeight -> Plain, FontSize -> 13, 
            StripOnInput -> False], 
           BaselinePosition -> (Baseline -> Scaled[0.65])], 
          TemplateBox[{8}, "Spacer1"], 
          PaneBox[
           
           PaneSelectorBox[{{False, False} -> 
             TemplateBox[{0}, "Spacer1"], {True, False} -> 
             TemplateBox[{0}, "Spacer1"], {True, True} -> PaneBox[
               InterpretationBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEExpressions", "PercolateAnimator"][Medium]], 
                ProgressIndicator[Appearance -> "Percolate"], 
                BaseStyle -> {"Deploy"}], BaselinePosition -> Scaled[0.05]], {
              False, True} -> 
             DynamicModuleBox[{
               CodeInspector`LinterUI`Private`tracker$$ = 
                CodeInspector`LinterUI`Private`DynamicTriggers`\
dockedCellLintCounts}, 
               DynamicWrapperBox[
                DynamicBox[
                 ToBoxes[
                 CodeInspector`LinterUI`Private`tracker$$; 
                  LinterUIDockedCell`Private`dockedCellSeverityCountsButton[
                   LinterUIDockedCell`Private`notebook$$], TraditionalForm], 
                 TrackedSymbols :> {
                  CodeInspector`LinterUI`Private`tracker$$}], 
                If[
                CodeInspector`LinterUI`Private`tracker$$ =!= 
                 CodeInspector`LinterUI`Private`DynamicTriggers`\
dockedCellLintCounts, CodeInspector`LinterUI`Private`tracker$$ = 
                 CodeInspector`LinterUI`Private`DynamicTriggers`\
dockedCellLintCounts]], DynamicModuleValues :> {}]}, 
            Dynamic[FEPrivate`EvaluatorStatus["Local"]; {
               CodeInspector`LinterUI`Private`varValue[
               LinterUIDockedCell`Private`notebook$$, "AnalysisInProgressQ"], 
               
               TrueQ[
                CodeInspector`LinterUI`Private`varValue[
                LinterUIDockedCell`Private`notebook$$, 
                 "DockedCellPresentQ"]]}], ImageSize -> Automatic], 
           BaselinePosition -> Scaled[0.15]]}, "Row", 
         DisplayFunction -> (PaneBox[
           RowBox[{
             TemplateSlotSequence[1, "\[InvisibleSpace]"]}], Alignment -> 
           Baseline]& ), InterpretationFunction -> (RowBox[{"Row", "[", 
            RowBox[{
              RowBox[{"{", 
                TemplateSlotSequence[1, ","], "}"}], ",", 
              RowBox[{"Alignment", "\[Rule]", "Baseline"}]}], "]"}]& )], 
        Offset[{8, 0}, {-1, 0}], {-1, 0}], 
       InsetBox[
        PaneSelectorBox[{
         True -> DynamicModuleBox[{
            CodeInspector`LinterUI`Private`hoverQ$$ = False, 
             CodeInspector`LinterUI`Private`mouseDownQ$$ = False, 
             CodeInspector`LinterUI`Private`fontColor$$}, 
            ButtonBox[
             DynamicWrapperBox[
              TemplateBox[{
                DynamicWrapperBox[
                 StyleBox[
                  PaneBox[
                  "\"Reanalyze Notebook\"", ContentPadding -> True, 
                   FrameMargins -> None, BaselinePosition -> Baseline], 
                  FontColor -> 
                  Dynamic[CodeInspector`LinterUI`Private`fontColor$$], 
                  FontColor -> GrayLevel[0.2], FontFamily -> 
                  "Source Sans Pro", FontWeight -> Plain, FontSize -> 14, 
                  StripOnInput -> False], 
                 CodeInspector`LinterUI`Private`fontColor$$ = Which[
                   TrueQ[
                    Not[
                    
                    OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "ActiveQ"]]], 
                   
                   OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "TextInactiveColor"], 
                   CodeInspector`LinterUI`Private`hoverQ$$, 
                   
                   OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "TextHoverColor"], True, 
                   
                   OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "TextColor"]]], ContentPadding -> False, 
                FrameMargins -> {{9, 9}, {0, 0}}, 
                Alignment -> {Center, Center}, ImageSize -> {Automatic, 19}, 
                RoundingRadius -> 3, FrameStyle -> Dynamic[
                  Directive[
                   AbsoluteThickness[0.5], 
                   Which[
                    TrueQ[
                    Not[
                    
                    OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "ActiveQ"]]], 
                    
                    OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "EdgeInactiveColor"], 
                    CodeInspector`LinterUI`Private`hoverQ$$, 
                    
                    OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "EdgeHoverColor"], True, 
                    
                    OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "EdgeColor"]]]], Background -> Dynamic[
                  Which[
                   TrueQ[
                    Not[
                    
                    OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "ActiveQ"]]], 
                   
                   OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "BackInactiveColor"], 
                   And[
                   CodeInspector`LinterUI`Private`hoverQ$$, 
                    CodeInspector`LinterUI`Private`mouseDownQ$$], 
                   
                   OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "BackMouseDownColor"], 
                   CodeInspector`LinterUI`Private`hoverQ$$, 
                   
                   OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "BackHoverColor"], True, 
                   
                   OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "BackColor"]]]}, "Highlighted"], 
              CodeInspector`LinterUI`Private`hoverQ$$ = 
               CurrentValue["MouseOver"]; 
              CodeInspector`LinterUI`Private`mouseDownQ$$ = 
               CurrentValue["MouseButtonTest"]], 
             Appearance -> {
              "Default" -> 
               Image[RawArray["UnsignedInteger8",{{{255, 255, 255, 255}, {0, 
                  0, 0, 255}, {255, 255, 255, 255}}, {{0, 0, 0, 255}, {0, 0, 
                  0, 0}, {0, 0, 0, 255}}, {{255, 255, 255, 255}, {0, 0, 0, 
                  255}, {255, 255, 255, 255}}}], "Byte", ColorSpace -> "RGB", 
                 ImageResolution -> {72, 72}, Interleaving -> True], "Hover" -> 
               Image[RawArray["UnsignedInteger8",{{{255, 255, 255, 255}, {0, 
                  0, 0, 255}, {255, 255, 255, 255}}, {{0, 0, 0, 255}, {0, 0, 
                  0, 0}, {0, 0, 0, 255}}, {{255, 255, 255, 255}, {0, 0, 0, 
                  255}, {255, 255, 255, 255}}}], "Byte", ColorSpace -> "RGB", 
                 ImageResolution -> {72, 72}, Interleaving -> True], 
               "Pressed" -> 
               Image[RawArray["UnsignedInteger8",{{{255, 255, 255, 255}, {0, 
                  0, 0, 255}, {255, 255, 255, 255}}, {{0, 0, 0, 255}, {0, 0, 
                  0, 0}, {0, 0, 0, 255}}, {{255, 255, 255, 255}, {0, 0, 0, 
                  255}, {255, 255, 255, 255}}}], "Byte", ColorSpace -> "RGB", 
                 ImageResolution -> {72, 72}, Interleaving -> True]}, 
             BaselinePosition -> Baseline, 
             ButtonFunction :> (
              If[OptionValue[{
                  ImageSize -> {Automatic, 19}, 
                   FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                   Baseline, Alignment -> {Center, Center}, Method -> 
                   "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                   CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                   "TextHoverColor" -> 
                   CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                   CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                   CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                   "BackHoverColor" -> 
                   CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                   CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                   CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                   CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                   "EdgeHoverColor" -> 
                   CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                   CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, "ActiveQ"] =!= 
                False, 
                CodeInspector`LinterUI`Private`attachAnalysisAction[
                 EvaluationNotebook[]]]; 
              CodeInspector`LinterUI`Private`mouseDownQ$$ = False), 
             ContentPadding -> False, Evaluator -> Automatic, Method -> 
             "Queued"], DynamicModuleValues :> {}], False -> ButtonBox[
            TemplateBox[{
              StyleBox[
              "\"Analyze Notebook\"", FontColor -> GrayLevel[0.2], FontFamily -> 
               "Source Sans Pro", FontWeight -> Plain, FontSize -> 14, 
               StripOnInput -> False], ImageSize -> {Automatic, 19}, 
              FrameMargins -> {{9, 9}, {0, 0}}, BaselinePosition -> Baseline, 
              Alignment -> {Center, Center}, Background -> GrayLevel[1], 
              FrameStyle -> Dynamic[
                If[
                 CurrentValue["MouseOver"], 
                 Hue[0.55, 0.82, 0.87], 
                 GrayLevel[0.8]]]}, "Highlighted"], 
            Appearance -> {
             "Default" -> 
              Image[RawArray["UnsignedInteger8",{{{255, 255, 255, 255}, {0, 0,
                  0, 255}, {255, 255, 255, 255}}, {{0, 0, 0, 255}, {0, 0, 0, 
                 0}, {0, 0, 0, 255}}, {{255, 255, 255, 255}, {0, 0, 0, 255}, {
                 255, 255, 255, 255}}}], "Byte", ColorSpace -> "RGB", 
                ImageResolution -> {72, 72}, Interleaving -> True], "Hover" -> 
              Image[RawArray["UnsignedInteger8",{{{255, 255, 255, 255}, {0, 0,
                  0, 255}, {255, 255, 255, 255}}, {{0, 0, 0, 255}, {0, 0, 0, 
                 0}, {0, 0, 0, 255}}, {{255, 255, 255, 255}, {0, 0, 0, 255}, {
                 255, 255, 255, 255}}}], "Byte", ColorSpace -> "RGB", 
                ImageResolution -> {72, 72}, Interleaving -> True], "Pressed" -> 
              Image[RawArray["UnsignedInteger8",{{{255, 255, 255, 255}, {0, 0,
                  0, 255}, {255, 255, 255, 255}}, {{0, 0, 0, 255}, {0, 0, 0, 
                 0}, {0, 0, 0, 255}}, {{255, 255, 255, 255}, {0, 0, 0, 255}, {
                 255, 255, 255, 255}}}], "Byte", ColorSpace -> "RGB", 
                ImageResolution -> {72, 72}, Interleaving -> True]}, 
            ButtonFunction :> (CurrentValue[
                EvaluationNotebook[], DockedCells] = 
              With[{LinterUIDockedCell`Private`dockedCells = CurrentValue[
                   EvaluationNotebook[], DockedCells]}, 
                Pick[LinterUIDockedCell`Private`dockedCells, 
                 Map[Quiet[
                    Options[#, CellTags]] =!= {
                   CellTags -> "CodeAnalysisDockedCell"}& , 
                  LinterUIDockedCell`Private`dockedCells]]]; 
             Needs["CodeInspector`"]; 
             CodeInspector`AttachAnalysis[
              LinterUIDockedCell`Private`notebook$$]), Evaluator -> Automatic,
             Method -> "Queued"]}, 
         Dynamic[FEPrivate`EvaluatorStatus["Local"]; TrueQ[
            CodeInspector`LinterUI`Private`varValue[
            LinterUIDockedCell`Private`notebook$$, "DockedCellPresentQ"]]], 
         ImageSize -> Automatic], 
        Offset[{-26, 0}, {1, 0}], {1, 0}], 
       TagBox[
        TagBox[
         TooltipBox[{{
            GrayLevel[0.6], 
            DiskBox[
             Offset[{-11, 0}, {1, 0}], 
             Offset[6]]}, {
            GrayLevel[0.97], 
            AbsoluteThickness[1.5], 
            CapForm["Round"], 
            LineBox[{{
               Offset[{-13, 2}, {1, 0}], 
               Offset[{-9, -2}, {1, 0}]}, {
               Offset[{-13, -2}, {1, 0}], 
               Offset[{-9, 2}, {1, 0}]}}]}}, "\"Close analysis\"", 
          TooltipDelay -> 0, TooltipStyle -> "TextStyling"], 
         Annotation[#, "Close analysis", "Tooltip"]& ], 
        EventHandlerTag[{"MouseClicked" :> (Map[NotebookDelete, 
             Flatten[
              CodeInspector`LinterUI`Private`varValue[
              LinterUIDockedCell`Private`notebook$$, All, 
               "UIAttachedCells"]]]; Map[NotebookDelete, 
             Flatten[
              CodeInspector`LinterUI`Private`varValue[
              LinterUIDockedCell`Private`notebook$$, All, 
               "CleanCellBracketMarker"]]]; CurrentValue[
              EvaluationNotebook[], DockedCells] = 
            With[{LinterUIDockedCell`Private`dockedCells = CurrentValue[
                 EvaluationNotebook[], DockedCells]}, 
              Pick[LinterUIDockedCell`Private`dockedCells, 
               Map[Quiet[
                  Options[#, CellTags]] =!= {
                 CellTags -> "CodeAnalysisDockedCell"}& , 
                LinterUIDockedCell`Private`dockedCells]]]; 
           CodeInspector`LinterUI`Private`applyToVar[Remove, {
              EvaluationNotebook[], All}]; 
           CodeInspector`LinterUI`Private`varSet[{
             LinterUIDockedCell`Private`notebook$$, "DockedCellPresentQ"}, 
             False]), Method -> "Preemptive", PassEventsDown -> Automatic, 
          PassEventsUp -> True}]]}, AspectRatio -> Full, 
      ImageSize -> {Full, 23}, PlotRange -> {{-1, 1}, {-1, 1}}], 
     Deinitialization :> 
     CodeInspector`LinterUI`Private`varSet[{
       LinterUIDockedCell`Private`notebook$$, "DockedCellPresentQ"}, False], 
     DynamicModuleValues :> {}, 
     Initialization :> ({
       LinterUIDockedCell`Private`dockedCellSeverityCountsButton[
          Pattern[LinterUIDockedCell`Private`notebook, 
           Blank[NotebookObject]]] := 
        With[{LinterUIDockedCell`Private`formatIcon = 
           Show[#, ImageSize -> {13, 9}, BaselinePosition -> Scaled[-0.2]]& }, 
          ActionMenu[
           Highlighted[
            Row[{
              CodeInspector`LinterUI`Private`lintSeverityCountsIconRow[
              LinterUIDockedCell`Private`notebook, "exclamSize" -> 12, 
               FontSize -> 14, FontWeight -> Plain], 
              Spacer[2], 
              LinterUIDockedCell`Private`formatIcon[
               CodeInspector`LinterUI`Private`iconData["DownChevron"][
                CodeInspector`LinterUI`Private`colorData["UIDark"]]]}], 
            ImageSize -> {Automatic, 19}, BaselinePosition -> Baseline, 
            Background -> White, Frame -> True, FrameStyle -> Dynamic[
              If[
               CurrentValue["MouseOver"], 
               Hue[0.55, 0.82, 0.87], 
               GrayLevel[0.8]]], FrameMargins -> {6 {1, 1}, {1, 1}}, 
            Alignment -> {Center, Baseline}], 
           Map[
           LinterUIDockedCell`Private`dockedCellMenuItem[
            LinterUIDockedCell`Private`notebook, #]& , 
            CodeInspector`LinterUI`Private`varValue[
            LinterUIDockedCell`Private`notebook, All, "Cell"]], Appearance -> 
           None]], LinterUIDockedCell`Private`dockedCellMenuItem[
          Pattern[LinterUIDockedCell`Private`notebook, 
           Blank[NotebookObject]], 
          Pattern[LinterUIDockedCell`Private`cell, 
           Blank[CellObject]]] := With[{}, Graphics[{
             Inset[
              With[{LinterUIDockedCell`Private`expressionString = First[
                  FrontEndExecute[
                   FrontEnd`ExportPacket[
                    First[
                    CodeInspector`LinterUI`Private`varValue[
                    LinterUIDockedCell`Private`notebook, 
                    LinterUIDockedCell`Private`cell, "CellContents"]], 
                    "InputText"]]]}, {
               LinterUIDockedCell`Private`noLineBreaks = 
                StringReplace[
                 LinterUIDockedCell`Private`expressionString, "\n" -> " "]}, {
               LinterUIDockedCell`Private`previewString = 
                StringTake[LinterUIDockedCell`Private`noLineBreaks, {1, 
                   UpTo[LinterUIDockedCell`Private`$previewLength]}]}, 
               CodeInspector`LinterUI`Private`styleData["FixedWidth"][
                If[
                StringLength[LinterUIDockedCell`Private`expressionString] > 
                 LinterUIDockedCell`Private`$previewLength, 
                 StringDrop[LinterUIDockedCell`Private`previewString, -1] <> 
                 "\[Ellipsis]", 
                 LinterUIDockedCell`Private`previewString]]], {-1, 0}, {-1, 
              0}], 
             Inset[
              CodeInspector`LinterUI`Private`lintSeverityCountsIconRow[
              LinterUIDockedCell`Private`cell], {1, 0}, {1, 0}]}, 
            ImageSize -> {300, 25}, AspectRatio -> Full, 
            PlotRange -> {{-1, 1}, {-1, 1}}, ImagePadding -> None] :> (
           SelectionMove[LinterUIDockedCell`Private`cell, All, Cell]; 
           With[{
             LinterUIDockedCell`Private`nb = 
              ParentNotebook[LinterUIDockedCell`Private`cell]}, 
             FrontEndExecute[
              FrontEnd`FrontEndToken[
              LinterUIDockedCell`Private`nb, "OpenSelectionParents"]]]; 
           SelectionMove[LinterUIDockedCell`Private`cell, After, Cell])], 
        LinterUIDockedCell`Private`$previewLength = 28, 
        CodeInspector`LinterUI`Private`applyToVar[
          Pattern[CodeInspector`LinterUI`Private`function, 
           Blank[]], {
           Pattern[CodeInspector`LinterUI`Private`notebook, 
            Blank[NotebookObject]], All, 
           Pattern[CodeInspector`LinterUI`Private`name, 
            Blank[String]]}, 
          Pattern[CodeInspector`LinterUI`Private`args, 
           BlankNullSequence[]]] := 
        Map[Apply[CodeInspector`LinterUI`Private`function, 
           Join[
            ToHeldExpression[#], 
            Hold[CodeInspector`LinterUI`Private`args]]]& , 
          
          Names[(CodeInspector`LinterUI`Private`varNameString[
             CodeInspector`LinterUI`Private`notebook] <> "*") <> 
           CodeInspector`LinterUI`Private`name]], Null, 
        CodeInspector`LinterUI`Private`applyToVar[
          Pattern[CodeInspector`LinterUI`Private`function, 
           Blank[]], {
           Pattern[CodeInspector`LinterUI`Private`nameArguments, 
            BlankSequence[]], 
           Pattern[CodeInspector`LinterUI`Private`name, 
            Blank[String]]}, 
          Pattern[CodeInspector`LinterUI`Private`args, 
           BlankNullSequence[]]] := 
        Apply[CodeInspector`LinterUI`Private`function, 
          Join[
           ToHeldExpression[
            CodeInspector`LinterUI`Private`varNameString[
            CodeInspector`LinterUI`Private`nameArguments]], 
           Hold[CodeInspector`LinterUI`Private`args]]], Null, 
        CodeInspector`LinterUI`Private`applyToVar[
          Pattern[CodeInspector`LinterUI`Private`function, 
           Blank[]], {
           Pattern[CodeInspector`LinterUI`Private`nameArguments, 
            BlankSequence[]], All}, 
          Pattern[CodeInspector`LinterUI`Private`args, 
           BlankNullSequence[]]] := 
        Map[Apply[CodeInspector`LinterUI`Private`function, 
           Join[
            ToHeldExpression[#], 
            Hold[CodeInspector`LinterUI`Private`args]]]& , 
          Names[
          CodeInspector`LinterUI`Private`varNameString[
            CodeInspector`LinterUI`Private`nameArguments] <> "*"]], 
        CodeInspector`LinterUI`Private`varValue[
          Pattern[CodeInspector`LinterUI`Private`notebook, 
           Blank[NotebookObject]], All, 
          Pattern[CodeInspector`LinterUI`Private`name, 
           Blank[String]]] := Map[Symbol, 
          
          Names[(CodeInspector`LinterUI`Private`varNameString[
             CodeInspector`LinterUI`Private`notebook] <> "*") <> 
           CodeInspector`LinterUI`Private`name]], Null, 
        CodeInspector`LinterUI`Private`varValue[
          Pattern[CodeInspector`LinterUI`Private`nameArguments, 
           BlankSequence[]], 
          Pattern[CodeInspector`LinterUI`Private`name, 
           Blank[String]]] := Symbol[
          CodeInspector`LinterUI`Private`varNameString[
          CodeInspector`LinterUI`Private`nameArguments, 
           CodeInspector`LinterUI`Private`name]], Null, 
        CodeInspector`LinterUI`Private`varValue[
          Pattern[CodeInspector`LinterUI`Private`nameArguments, 
           BlankSequence[]], All] := Map[Symbol, 
          Names[
          CodeInspector`LinterUI`Private`varNameString[
            CodeInspector`LinterUI`Private`nameArguments] <> "*"]], 
        CodeInspector`LinterUI`Private`varSet[{
           Pattern[CodeInspector`LinterUI`Private`nameArguments, 
            BlankSequence[]]}, 
          Pattern[CodeInspector`LinterUI`Private`value, 
           Blank[]]] := Apply[Set, 
          Append[
           ToHeldExpression[
            CodeInspector`LinterUI`Private`varNameString[
            CodeInspector`LinterUI`Private`nameArguments]], 
           CodeInspector`LinterUI`Private`value]], 
        CodeInspector`LinterUI`Private`varNameString[
          Pattern[CodeInspector`LinterUI`Private`notebook, 
           Blank[NotebookObject]]] := ((
           "CodeInspector`LinterUI`Private`Vars`" <> "$$") <> 
          With[{CodeInspector`LinterUI`Private`nbID = 
             Last[CodeInspector`LinterUI`Private`notebook]}, 
            If[
             StringQ[CodeInspector`LinterUI`Private`nbID], 
             StringReplace[CodeInspector`LinterUI`Private`nbID, "-" -> "$"], 
             ToString[CodeInspector`LinterUI`Private`nbID]]]) <> "$$", Null, 
        CodeInspector`LinterUI`Private`varNameString[
          Pattern[CodeInspector`LinterUI`Private`cell, 
           Blank[CellObject]]] := (
          CodeInspector`LinterUI`Private`varNameString[
            Replace[
             ParentNotebook[CodeInspector`LinterUI`Private`cell], $Failed -> 
             EvaluationNotebook[]]] <> 
          With[{CodeInspector`LinterUI`Private`cellID = 
             First[CodeInspector`LinterUI`Private`cell]}, 
            If[
             StringQ[CodeInspector`LinterUI`Private`cellID], 
             StringReplace[CodeInspector`LinterUI`Private`cellID, "-" -> "$"], 
             ToString[CodeInspector`LinterUI`Private`cellID]]]) <> "$$", Null,
         CodeInspector`LinterUI`Private`varNameString[
          Pattern[CodeInspector`LinterUI`Private`notebook, 
           Blank[NotebookObject]], 
          Pattern[CodeInspector`LinterUI`Private`cell, 
           Blank[CellObject]]] := (
          CodeInspector`LinterUI`Private`varNameString[
           CodeInspector`LinterUI`Private`notebook] <> 
          With[{CodeInspector`LinterUI`Private`cellID = 
             First[CodeInspector`LinterUI`Private`cell]}, 
            If[
             StringQ[CodeInspector`LinterUI`Private`cellID], 
             StringReplace[CodeInspector`LinterUI`Private`cellID, "-" -> "$"], 
             ToString[CodeInspector`LinterUI`Private`cellID]]]) <> "$$", Null,
         CodeInspector`LinterUI`Private`varNameString[
          Pattern[CodeInspector`LinterUI`Private`notebook, 
           Blank[NotebookObject]], 
          Pattern[CodeInspector`LinterUI`Private`name, 
           Blank[String]]] := 
        CodeInspector`LinterUI`Private`varNameString[
          CodeInspector`LinterUI`Private`notebook] <> 
         CodeInspector`LinterUI`Private`name, Null, 
        CodeInspector`LinterUI`Private`varNameString[
          Pattern[CodeInspector`LinterUI`Private`cell, 
           Blank[CellObject]], 
          Pattern[CodeInspector`LinterUI`Private`name, 
           Blank[String]]] := 
        CodeInspector`LinterUI`Private`varNameString[
          CodeInspector`LinterUI`Private`cell] <> 
         CodeInspector`LinterUI`Private`name, Null, 
        CodeInspector`LinterUI`Private`varNameString[
          Pattern[CodeInspector`LinterUI`Private`notebook, 
           Blank[NotebookObject]], 
          Pattern[CodeInspector`LinterUI`Private`cell, 
           Blank[CellObject]], 
          Pattern[CodeInspector`LinterUI`Private`name, 
           Blank[String]]] := 
        CodeInspector`LinterUI`Private`varNameString[
          CodeInspector`LinterUI`Private`notebook, 
           CodeInspector`LinterUI`Private`cell] <> 
         CodeInspector`LinterUI`Private`name, Null, 
        CodeInspector`LinterUI`Private`varNameString[
          Pattern[CodeInspector`LinterUI`Private`nameArguments, 
           BlankSequence[]], 
          Pattern[CodeInspector`LinterUI`Private`lint, 
           Blank[CodeInspector`InspectionObject]], 
          Pattern[CodeInspector`LinterUI`Private`name, 
           Blank[String]]] := ((
           CodeInspector`LinterUI`Private`varNameString[
            CodeInspector`LinterUI`Private`nameArguments] <> Apply[Sequence, 
             Riffle[
              Map[StringDelete[
                ToString[#], 
                Alternatives["[", "]", "{", "}", ",", " "]]& , 
               CodeInspector`LinterUI`Private`extractFirstList[
                Last[CodeInspector`LinterUI`Private`lint][
                CodeParser`Source]]], "$"]]) <> "$$") <> 
         CodeInspector`LinterUI`Private`name, 
        CodeInspector`LinterUI`Private`extractFirstList[
          Pattern[CodeInspector`LinterUI`Private`expr, 
           Blank[]]] := FirstCase[CodeInspector`LinterUI`Private`expr, 
          Blank[List], {}, {0, Infinity}]}; 
      LinterUIDockedCell`Private`notebook$$ = EvaluationNotebook[]), 
     UnsavedVariables :> {LinterUIDockedCell`Private`notebook$$}]], 
   CellFrame -> {{0, 0}, {1, 1}}, CellFrameMargins -> {{0, 0}, {0, 0}}, 
   CellFrameColor -> GrayLevel[0.85], Background -> GrayLevel[0.97], CellTags -> 
   "CodeAnalysisDockedCell"]},
FrontEndVersion->"14.2 for Microsoft Windows (64-bit) (March 14, 2025)",
StyleDefinitions->"Default.nb",
ExpressionUUID->"dc2d8fa6-0bef-fd47-afe3-890dcc491ae8"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[576, 22, 159, 3, 96, "Title",ExpressionUUID->"c0d10265-0122-ef49-b205-3504c01f7f53"],
Cell[738, 27, 280, 8, 83, "Subtitle",ExpressionUUID->"2af73279-7200-9f49-bb81-b0d9e79e303c"],
Cell[1021, 37, 348, 7, 33, "Text",ExpressionUUID->"5fa28044-5d8f-f944-b66c-3081990c14b9"],
Cell[1372, 46, 279, 7, 33, "Text",ExpressionUUID->"377b9d67-0394-0141-9385-837b73eeec74"],
Cell[1654, 55, 391, 10, 77, "Text",ExpressionUUID->"da94ac42-1c37-8e4f-a35d-cfab77b35df7"],
Cell[CellGroupData[{
Cell[2070, 69, 155, 3, 66, "Section",ExpressionUUID->"61ab9a5d-fe27-8d49-96df-04e596fce78c"],
Cell[2228, 74, 175, 3, 33, "Text",ExpressionUUID->"935f0f68-a392-ab45-8fcf-45c8654d8de8"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[2452, 83, 178, 3, 96, "Title",ExpressionUUID->"4be9a7d2-9fc1-f545-90af-62802ce52b08"],
Cell[2633, 88, 2189, 34, 449, "Text",ExpressionUUID->"0a13f48f-4b7d-e040-97b9-6d810546a458"],
Cell[CellGroupData[{
Cell[4847, 126, 157, 3, 66, "Section",ExpressionUUID->"64199269-405f-7d42-9f26-0cec28fb2eef"],
Cell[CellGroupData[{
Cell[5029, 133, 175, 3, 53, "Subsection",ExpressionUUID->"b23819c7-b61d-a64c-bdb9-5183691a0432"],
Cell[5207, 138, 1196, 23, 317, "Text",ExpressionUUID->"49bc2f04-ebee-1a41-b72f-d5d90c3c3bcc"]
}, Open  ]],
Cell[CellGroupData[{
Cell[6440, 166, 225, 4, 53, "Subsection",ExpressionUUID->"e1eec17d-b810-b441-8ded-980b484e5ff3"],
Cell[6668, 172, 268, 5, 33, "Text",ExpressionUUID->"c3f36166-ec64-cb40-868f-0184b42cc7fb"],
Cell[6939, 179, 2337, 36, 383, "Text",ExpressionUUID->"765ba2fc-2b1a-d342-9b3a-6162fc08e7f6"]
}, Open  ]],
Cell[CellGroupData[{
Cell[9313, 220, 232, 4, 53, "Subsection",ExpressionUUID->"db5720e7-0bc5-b94b-9f0e-bb417c275c40"],
Cell[9548, 226, 2414, 48, 755, "Text",ExpressionUUID->"1975e73d-73c4-414a-a809-7c7940ebbd84"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[12011, 280, 280, 4, 66, "Section",ExpressionUUID->"3ed7b48a-539b-0643-9640-fefdd8f0a2bb"],
Cell[CellGroupData[{
Cell[12316, 288, 292, 4, 53, "Subsection",ExpressionUUID->"4d7dcd69-139e-ba44-9711-e4217d0aa1ff"],
Cell[12611, 294, 9127, 214, 602, "Text",ExpressionUUID->"69c62429-f047-f043-9032-eb4fb8137393"]
}, Open  ]],
Cell[CellGroupData[{
Cell[21775, 513, 186, 3, 53, "Subsection",ExpressionUUID->"bd6d3cb2-c18b-924e-b012-bbfd74089f37"],
Cell[21964, 518, 3712, 91, 253, "Text",ExpressionUUID->"83f49459-a520-e24a-9cbf-2476d27b2203"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[25725, 615, 292, 4, 66, "Section",ExpressionUUID->"7f932e4b-efab-6645-9f02-e31694a76418"],
Cell[CellGroupData[{
Cell[26042, 623, 190, 3, 53, "Subsection",ExpressionUUID->"d2c922b6-181e-5c42-abbc-656b1a4c50e8"],
Cell[26235, 628, 120983, 1987, 1643, "Text",ExpressionUUID->"ccc5045f-8e11-954c-9e15-fe2b9f163f03"]
}, Open  ]],
Cell[CellGroupData[{
Cell[147255, 2620, 230, 4, 53, "Subsection",ExpressionUUID->"74a6b7e9-6aa1-9047-a887-3c7ed2e676df"],
Cell[147488, 2626, 146, 3, 33, "Text",ExpressionUUID->"5a63c567-02c8-d84a-828e-116cfa832986"],
Cell[147637, 2631, 2552, 50, 689, "Text",ExpressionUUID->"c16fd781-928c-a74d-8c31-aaafb64517c4"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[150238, 2687, 164, 3, 66, "Section",ExpressionUUID->"32843ab8-cabf-2f4d-8dc5-10170d264a80"],
Cell[150405, 2692, 4251, 74, 1082, "Text",ExpressionUUID->"f98f5437-c9ea-a84a-a977-2b7b22a225d0"]
}, Open  ]],
Cell[CellGroupData[{
Cell[154693, 2771, 164, 3, 66, "Section",ExpressionUUID->"7de85d76-2e4b-0b48-bae7-885405b2100d"],
Cell[154860, 2776, 760, 14, 164, "Text",ExpressionUUID->"797a909f-9942-6841-a48f-26a7069f8ec1"]
}, Open  ]],
Cell[CellGroupData[{
Cell[155657, 2795, 256, 4, 66, "Section",ExpressionUUID->"eaebc9a6-c66b-9c4d-97a5-af5c8a4e5c8c"],
Cell[CellGroupData[{
Cell[155938, 2803, 507, 10, 66, "Input",ExpressionUUID->"ef1e26f2-3d2e-da4c-b9f1-24f1de8d921a"],
Cell[156448, 2815, 6265, 137, 161, "Output",ExpressionUUID->"7d4e22d5-8de0-2142-b785-2ca0594d12a6"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[162762, 2958, 374, 8, 103, "Section",ExpressionUUID->"139cd4af-51d0-8949-86b2-d9dfe22c3d15"],
Cell[163139, 2968, 4186, 65, 886, "Text",ExpressionUUID->"e3081633-21b3-2e48-84e5-0493cc5c6747"]
}, Open  ]],
Cell[CellGroupData[{
Cell[167362, 3038, 252, 4, 66, "Section",ExpressionUUID->"3bf05045-1f20-a841-8e3b-4f999682df50"],
Cell[167617, 3044, 2525, 38, 230, "Text",ExpressionUUID->"4ff146a4-f38d-bf44-9c43-eaf0d6de72d1"]
}, Open  ]],
Cell[CellGroupData[{
Cell[170179, 3087, 327, 5, 66, "Section",ExpressionUUID->"8f2a2eb0-1a5c-1045-8f47-f6c04a2aab53"],
Cell[170509, 3094, 2338, 50, 492, "Text",ExpressionUUID->"54d97db6-28ae-ac41-87f8-26d4dd6bd54d"]
}, Open  ]]
}, Open  ]]
}
]
*)

